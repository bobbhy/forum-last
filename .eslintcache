[{"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\index.js":"1","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\App.js":"2","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\services\\authHeader.js":"3","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\services\\userService.js":"4","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation.jsx":"5","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Signup\\SignUp.jsx":"6","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Login\\Login.jsx":"7","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Home.jsx":"8","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\Profile.jsx":"9","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\ConfirmationToken\\ConfirmationToken.jsx":"10","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Header.jsx":"11","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Network\\Network.jsx":"12","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Notification\\Notification.jsx":"13","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Dashboard.jsx":"14","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Messages.jsx":"15","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\SinglePost\\SinglePostMain.jsx":"16","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\Cv.jsx":"17","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\services\\authService.js":"18","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\Feed.jsx":"19","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\StudentProfile.jsx":"20","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\CompanyProfile.jsx":"21","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Statistics.jsx":"22","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Messages.jsx":"23","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Charts.jsx":"24","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Enable.jsx":"25","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\ListUsers.jsx":"26","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation Children\\Team.jsx":"27","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Sidebarl\\Sidebarl.jsx":"28","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Sidebar\\Sidebar.jsx":"29","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Sidebar\\Sidebar.jsx":"30","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Feed\\Feed.jsx":"31","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\src\\components\\Home\\welcome\\ContactUs.jsx":"32","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\src\\components\\Home\\welcome\\sponsor.jsx":"33","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\src\\components\\Home\\welcome\\welcome.jsx":"34","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Title.jsx":"35","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCv.jsx":"36","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\SetCompany.jsx":"37","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Feed\\ProfileInfo\\ProfileInfo.jsx":"38","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Sidebar\\MessageConversation\\MessageConversation.jsx":"39","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Footer\\FooterPage.jsx":"40","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\AddCompany Components\\CompanyImage.jsx":"41","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\AddCompany Components\\AboutCompany.jsx":"42","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\AddCompany Components\\CompanySocials.jsx":"43","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Award.jsx":"44","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm.jsx":"45","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Education.jsx":"46","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Experience.jsx":"47","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\About.jsx":"48","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Image.jsx":"49","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\Other.jsx":"50","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Socials.jsx":"51","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\NormalLanguage.jsx":"52","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\Software.jsx":"53","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\DevLanguage.jsx":"54","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\Post\\Post.jsx":"55","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\InputOption\\InputOption.jsx":"56","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditImage.jsx":"57","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCompany\\EditAboutCompany.jsx":"58","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\js\\cv.js":"59","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditAwards.jsx":"60","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditEducation.jsx":"61","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditNormalLanguages.jsx":"62","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditDevLanguages.jsx":"63","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditExperience.jsx":"64","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditSoftware.jsx":"65","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditAbout.jsx":"66","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\SinglePost\\SinglePost.jsx":"67","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Interest.jsx":"68","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Award.jsx":"69","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Education.jsx":"70","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Experience.jsx":"71","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Skill.jsx":"72","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\About.jsx":"73","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Navbar.jsx":"74","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\company\\Nav.jsx":"75","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\company\\About.jsx":"76","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Notification\\Feed\\Feed.jsx":"77","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Network\\Feed\\Feed.jsx":"78","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Network\\Sidebar\\Sidebar.jsx":"79","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Search\\Search.jsx":"80","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Search\\SearchMenu\\SearchMenu.jsx":"81","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\HeaderOption\\HeaderOption.jsx":"82","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\HeaderOption\\DropdowMenu\\DropdownMenu.jsx":"83","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Search\\SearchMenu\\ProfileInfo\\ProfileInfo.jsx":"84","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\Post\\Comments\\Comment\\Comment.jsx":"85"},{"size":314,"mtime":1619648939241,"results":"86","hashOfConfig":"87"},{"size":4593,"mtime":1619648938803,"results":"88","hashOfConfig":"87"},{"size":373,"mtime":1619648939245,"results":"89","hashOfConfig":"87"},{"size":12070,"mtime":1620004829649,"results":"90","hashOfConfig":"87"},{"size":3928,"mtime":1619648938871,"results":"91","hashOfConfig":"87"},{"size":21354,"mtime":1619648939233,"results":"92","hashOfConfig":"87"},{"size":6877,"mtime":1619648938823,"results":"93","hashOfConfig":"87"},{"size":502,"mtime":1619648938821,"results":"94","hashOfConfig":"87"},{"size":655,"mtime":1619648939211,"results":"95","hashOfConfig":"87"},{"size":1032,"mtime":1619648938804,"results":"96","hashOfConfig":"87"},{"size":4090,"mtime":1619648938809,"results":"97","hashOfConfig":"87"},{"size":324,"mtime":1619648938830,"results":"98","hashOfConfig":"87"},{"size":443,"mtime":1619648938832,"results":"99","hashOfConfig":"87"},{"size":11315,"mtime":1619648938805,"results":"100","hashOfConfig":"87"},{"size":2043,"mtime":1619648938826,"results":"101","hashOfConfig":"87"},{"size":484,"mtime":1619648938821,"results":"102","hashOfConfig":"87"},{"size":23080,"mtime":1619887531093,"results":"103","hashOfConfig":"87"},{"size":1757,"mtime":1619887531093,"results":"104","hashOfConfig":"87"},{"size":14099,"mtime":1619648938816,"results":"105","hashOfConfig":"87"},{"size":830,"mtime":1619648939233,"results":"106","hashOfConfig":"87"},{"size":835,"mtime":1619648939211,"results":"107","hashOfConfig":"87"},{"size":11560,"mtime":1619648938807,"results":"108","hashOfConfig":"87"},{"size":3418,"mtime":1619648938807,"results":"109","hashOfConfig":"87"},{"size":1564,"mtime":1619648938805,"results":"110","hashOfConfig":"87"},{"size":3878,"mtime":1619648938805,"results":"111","hashOfConfig":"87"},{"size":4965,"mtime":1619648938806,"results":"112","hashOfConfig":"87"},{"size":6687,"mtime":1619648938833,"results":"113","hashOfConfig":"87"},{"size":396,"mtime":1619648938823,"results":"114","hashOfConfig":"87"},{"size":2379,"mtime":1619648938822,"results":"115","hashOfConfig":"87"},{"size":2146,"mtime":1619648938828,"results":"116","hashOfConfig":"87"},{"size":11899,"mtime":1619648938824,"results":"117","hashOfConfig":"87"},{"size":5253,"mtime":1619648938873,"results":"118","hashOfConfig":"87"},{"size":1926,"mtime":1619648939208,"results":"119","hashOfConfig":"87"},{"size":18608,"mtime":1619887531092,"results":"120","hashOfConfig":"87"},{"size":358,"mtime":1619648938807,"results":"121","hashOfConfig":"87"},{"size":6656,"mtime":1619648939214,"results":"122","hashOfConfig":"87"},{"size":5439,"mtime":1619648939214,"results":"123","hashOfConfig":"87"},{"size":1251,"mtime":1619648938825,"results":"124","hashOfConfig":"87"},{"size":816,"mtime":1619648938827,"results":"125","hashOfConfig":"87"},{"size":2298,"mtime":1619648938808,"results":"126","hashOfConfig":"87"},{"size":3825,"mtime":1619648939213,"results":"127","hashOfConfig":"87"},{"size":6611,"mtime":1619648939212,"results":"128","hashOfConfig":"87"},{"size":2960,"mtime":1619648939213,"results":"129","hashOfConfig":"87"},{"size":7585,"mtime":1619648939215,"results":"130","hashOfConfig":"87"},{"size":4334,"mtime":1620003087112,"results":"131","hashOfConfig":"87"},{"size":11442,"mtime":1619994944352,"results":"132","hashOfConfig":"87"},{"size":15209,"mtime":1620006136776,"results":"133","hashOfConfig":"87"},{"size":10528,"mtime":1620006904116,"results":"134","hashOfConfig":"87"},{"size":4744,"mtime":1619648939217,"results":"135","hashOfConfig":"87"},{"size":1822,"mtime":1619648939219,"results":"136","hashOfConfig":"87"},{"size":4023,"mtime":1619648939221,"results":"137","hashOfConfig":"87"},{"size":6874,"mtime":1619648939218,"results":"138","hashOfConfig":"87"},{"size":7593,"mtime":1619648939220,"results":"139","hashOfConfig":"87"},{"size":8171,"mtime":1619648939218,"results":"140","hashOfConfig":"87"},{"size":16773,"mtime":1619648938819,"results":"141","hashOfConfig":"87"},{"size":358,"mtime":1619648938817,"results":"142","hashOfConfig":"87"},{"size":3814,"mtime":1619648939225,"results":"143","hashOfConfig":"87"},{"size":5664,"mtime":1619648939223,"results":"144","hashOfConfig":"87"},{"size":1315,"mtime":1619648939233,"results":"145","hashOfConfig":"87"},{"size":7647,"mtime":1619648939224,"results":"146","hashOfConfig":"87"},{"size":13097,"mtime":1619648939224,"results":"147","hashOfConfig":"87"},{"size":6217,"mtime":1619648939225,"results":"148","hashOfConfig":"87"},{"size":7093,"mtime":1619648939224,"results":"149","hashOfConfig":"87"},{"size":13294,"mtime":1619648939225,"results":"150","hashOfConfig":"87"},{"size":7035,"mtime":1619648939226,"results":"151","hashOfConfig":"87"},{"size":8601,"mtime":1619648939223,"results":"152","hashOfConfig":"87"},{"size":14926,"mtime":1620045715012,"results":"153","hashOfConfig":"87"},{"size":368,"mtime":1619648939231,"results":"154","hashOfConfig":"87"},{"size":2025,"mtime":1619648939229,"results":"155","hashOfConfig":"87"},{"size":1171,"mtime":1619648939229,"results":"156","hashOfConfig":"87"},{"size":2605,"mtime":1620007809758,"results":"157","hashOfConfig":"87"},{"size":2540,"mtime":1619648939232,"results":"158","hashOfConfig":"87"},{"size":4279,"mtime":1620005549753,"results":"159","hashOfConfig":"87"},{"size":2304,"mtime":1619648939231,"results":"160","hashOfConfig":"87"},{"size":621,"mtime":1619648939227,"results":"161","hashOfConfig":"87"},{"size":2982,"mtime":1619648939227,"results":"162","hashOfConfig":"87"},{"size":8185,"mtime":1619648938831,"results":"163","hashOfConfig":"87"},{"size":7684,"mtime":1619648938829,"results":"164","hashOfConfig":"87"},{"size":3087,"mtime":1619648938830,"results":"165","hashOfConfig":"87"},{"size":1492,"mtime":1619648938812,"results":"166","hashOfConfig":"87"},{"size":1901,"mtime":1619648938815,"results":"167","hashOfConfig":"87"},{"size":2374,"mtime":1619648938811,"results":"168","hashOfConfig":"87"},{"size":3026,"mtime":1619648938810,"results":"169","hashOfConfig":"87"},{"size":1261,"mtime":1619648938813,"results":"170","hashOfConfig":"87"},{"size":9660,"mtime":1620045716682,"results":"171","hashOfConfig":"87"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},"10h1qi1",{"filePath":"175","messages":"176","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"174"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"174"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"174"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"174"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"174"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"174"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"174"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"174"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"174"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"174"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"174"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"174"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"174"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"174"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"174"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"174"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"174"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"174"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"174"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"174"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"174"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"174"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"174"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"174"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"174"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"174"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"174"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"174"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"174"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"174"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"174"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"174"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"174"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"174"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"174"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"174"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"174"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"174"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"174"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"174"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"174"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"174"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"174"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"174"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"174"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"174"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"174"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"174"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"174"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\index.js",[],["392","393"],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\App.js",["394","395","396","397","398"],"import React, { useState, useEffect, initialState } from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport \"./css/App.css\";\r\nimport Login from \"./Components/Login/Login\";\r\nimport SignUp from \"./Components/Signup/SignUp\";\r\nimport userService from \"./services/userService\";\r\nimport Presentation from \"./Components/Presentation/Presentation\";\r\nimport ConfirmToken from \"./Components/ConfirmationToken/ConfirmationToken\";\r\nimport Home from \"./Components/Home/Home\";\r\nimport Header from \"./Components/Header/Header\";\r\nimport Profile from \"./Components/Profile/Profile\";\r\nimport Dashboard from \"./Components/Dashboard/Dashboard\";\r\nimport Notification from \"./Components/Notification/Notification\";\r\nimport Network from \"./Components/Network/Network\";\r\nimport Cv from \"./Components/Profile/ShownProfile/Cv\";\r\nimport Messages from \"./Components/Messages/Messages\";\r\nimport SinglePostMain from \"./Components/Home/Feed/SinglePost/SinglePostMain\";\r\nimport authHeader from \"./services/authHeader\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState(initialState);\r\n  const [image, setImage] = useState(initialState);\r\n  const [role, setRole] = useState(initialState);\r\n\r\n\r\n  useEffect(() => {\r\n    async function getUserData() {\r\n      await userService.getUserData().then((response) => {\r\n        setUser(response?.data);\r\n        setRole(response?.data?.roles[0]?.id);\r\n        if (response?.data?.roles[0]?.id === 1) {\r\n          setImage(response?.data?.cv?.image);\r\n        } else if (response?.data?.roles[0]?.id === 3) {\r\n          setImage(response?.data?.company?.companyImage);\r\n        }\r\n      }, (error) => {\r\n        setUser(null)\r\n      });\r\n    }\r\n    getUserData();\r\n    async function getCurrentImage() {\r\n      if (role === 1) {\r\n        await userService.getCurrentImage().then((response) => {\r\n          // setImage(`data:image/png;base64,${response?.data}`);\r\n        });\r\n      } else if (role === 3) {\r\n        await userService.getCurrentCompanyImage().then((response) => {\r\n          // setImage(`data:image/png;base64,${response?.data}`);\r\n        });\r\n      }\r\n    }\r\n    getCurrentImage();\r\n  }, [role]);\r\n  return (\r\n    <div className=\"app\">\r\n      {/* Header */}\r\n      {user?.roles[0]?.id === 2 && <Redirect to=\"/admin\" />}\r\n      {!(user?.roles[0]?.id === 2) && <Header image={image} user={user} />}\r\n      {/* App Body */}\r\n      <div className=\"app_body\">\r\n        <Switch>\r\n          <Route exact path={\"/\"} component={Presentation} />\r\n          <Route\r\n            exact\r\n            path={\"/confirm\"}\r\n            component={() => (\r\n              <ConfirmToken userinfo={user} user={user ? true : false} />\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path={\"/login\"}\r\n            component={() => (\r\n              <Login user={user ? true : false} userInfo={user} />\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path={\"/register\"}\r\n            component={() => <SignUp user={user ? true : false} />}\r\n          />\r\n          {user === null ? (<><Route\r\n            component={() => <Presentation />}\r\n          /></>) : (user?.roles[0]?.id === 1 && user.cv.flag == false) || (user?.roles[0]?.id === 3 && user.company.flag == false) ? (<>\r\n            <Route\r\n              component={() => <Profile user={user} image={image} />}\r\n            />\r\n          </>) : (<>\r\n            <Route\r\n              exact\r\n              path={\"/home\"}\r\n              render={() => <Home image={image} user={user} />}\r\n            />\r\n            <Route\r\n              exact\r\n              path={\"/profile\"}\r\n              component={() => <Profile user={user} image={image} />}\r\n            />\r\n            <Route exact path=\"/view/:id\" component={Cv} />\r\n            <Route exact path={\"/post/:postId\"} component={() => <SinglePostMain user={user} image={image} />} />\r\n            <Route\r\n              exact\r\n              path=\"/admin\"\r\n              component={() => <Dashboard user={user} />}\r\n            />\r\n            <Route exact path=\"/MyNetwork\" component={() => <Network user={user} />} />\r\n            <Route\r\n              exact\r\n              path={\"/Notifications\"}\r\n              component={() => <Notification user={user} image={image} />}\r\n            />\r\n            <Route\r\n              exact\r\n              path={\"/Messages/:id?/\"}\r\n              component={() => <Messages user={user} />} />\r\n          </>)}\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\services\\authHeader.js",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\services\\userService.js",["399"],"import axios from \"axios\";\r\nimport authHeader from \"./authHeader\";\r\n\r\nconst API_URL = \"http://134.122.94.140:5000/\";\r\n// const API_URL = \"http://localhost:5000/\";\r\n\r\nconst getApiState = () => {\r\n  return axios.get(API_URL + \"hello\");\r\n};\r\n\r\nconst getAllCompanies = () => {\r\n  return axios.get(API_URL + \"api/comp/companies\", { headers: authHeader() });\r\n};\r\nconst getAllStudents = () => {\r\n  return axios.get(API_URL + \"api/cv/students\", { headers: authHeader() });\r\n};\r\nconst getUsersLike = (key) => {\r\n  return axios.get(API_URL + \"api/profile/\" + key, { headers: authHeader() });\r\n};\r\nconst getEtablishements = () => {\r\n  return axios.get(API_URL + \"api/profile/etablishment/all\");\r\n};\r\nconst connectTo = (id) => {\r\n  return axios({\r\n    method: \"post\",\r\n    url: API_URL + \"api/profile/add/\" + id,\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst priveCv = (id) => {\r\n  return axios.put(`${API_URL}api/cv/prive/${id}`);\r\n};\r\nconst unpriveCv = (id) => {\r\n  return axios.put(`${API_URL}api/cv/unprive/${id}`);\r\n};\r\nconst disconnect = (id) => {\r\n  return axios({\r\n    method: \"delete\",\r\n    url: API_URL + \"api/profile/disconnect/\" + id,\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst accept = (id) => {\r\n  return axios({\r\n    method: \"post\",\r\n    url: API_URL + \"api/profile/accept/\" + id,\r\n    headers: authHeader(),\r\n  });\r\n};\r\n\r\n// const cvSearch = (key) => {\r\n//   return axios.get(API_URL + \"api/cv/search/\" + key);\r\n// };\r\n\r\n// const companySearch = (key) => {\r\n//   return axios.get(API_URL + \"api/comp/search/\" + key);\r\n// };\r\n\r\nconst getUserData = () => {\r\n  return axios.get(API_URL + \"api/profile\", { headers: authHeader() });\r\n};\r\n\r\nconst getCurrentImage = () => {\r\n  return axios.get(`${API_URL}api/cv/image`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\n\r\nconst getCurrentCompanyImage = () => {\r\n  return axios.get(`${API_URL}api/comp/image`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\n\r\nconst getImageById = (id) => {\r\n  return axios.get(`${API_URL}api/cv/image/${id}`);\r\n};\r\n\r\nconst getCompanyImageById = (id) => {\r\n  return axios.get(`${API_URL}api/comp/image/${id}`);\r\n};\r\n\r\nconst getUserById = (id) => {\r\n  return axios.get(API_URL + `api/cv/${id}`);\r\n};\r\n\r\nconst handleNotif = () => {\r\n  return axios({\r\n    method: \"post\",\r\n    url: API_URL + \"api/profile/notifications\",\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst handleSingleNotif = (id) => {\r\n  return axios({\r\n    method: \"post\",\r\n    url: API_URL + `api/profile/notification/${id}`,\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst deleteNotification = (id) => {\r\n  return axios({\r\n    method: \"delete\",\r\n    url: API_URL + `api/profile/notification/${id}`,\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst deleteMesssage = (id) => {\r\n  return axios({\r\n    method: \"delete\",\r\n    url: API_URL + `api/profile/message/${id}`,\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst getAllConversations = () => {\r\n  return axios.get(API_URL + \"api/profile/all\", {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst sendMessage = (messagePayload) => {\r\n  return axios.post(API_URL + \"api/profile/sendMessage\", messagePayload, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst getMessages = (id) => {\r\n  return axios.get(API_URL + `api/profile/allMessages/${id}`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst getAllNotifications = () => {\r\n  return axios.get(API_URL + \"api/profile/allNotifications\", {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst getLikesByPost = (postId) => {\r\n  return axios.get(`${API_URL}api/cv/likesbypost/${postId}`);\r\n};\r\nconst getPosts = () => {\r\n  return axios.get(`${API_URL}api/cv/getPosts`);\r\n};\r\nconst getPostById = async (postId) => {\r\n  return await axios.get(`${API_URL}api/cv/post/${postId}`);\r\n};\r\nconst getPostComments = (postId) => {\r\n  return axios.get(`${API_URL}api/cv/post/${postId}/comment`);\r\n};\r\nconst contactUs = async (contact) => {\r\n  return await axios.post(`${API_URL}contact/message`, contact);\r\n};\r\nconst getNonPrivatePosts = () => {\r\n  return axios.get(`${API_URL}api/cv/getNonPosts`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst getAll = async () => {\r\n  return await axios.get(`${API_URL}api/profile/getall`, {\r\n    headers: authHeader(),\r\n  }); // buggy\r\n};\r\nconst enable = async (id) => {\r\n  return await axios.put(`${API_URL}api/cv/enable/${id}`);\r\n};\r\nconst updateStudentPost = (id, post) => {\r\n  return axios.put(`${API_URL}api/cv/post/${id}`, post);\r\n};\r\nconst updateCompanyPost = (id, post) => {\r\n  return axios.put(`${API_URL}api/comp/post/${id}`, post);\r\n};\r\nconst deleteComment = (id) => {\r\n  return axios.delete(`${API_URL}api/cv/comment/${id}`);\r\n};\r\nconst uploadStudentComment = (postId, comment) => {\r\n  return axios.post(`${API_URL}api/cv/post/${postId}/comment`, comment, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst uploadCompanyComment = (postId, comment) => {\r\n  return axios.post(`${API_URL}api/comp/post/${postId}/comment`, comment, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst updateStudentComment = (id, comment) => {\r\n  return axios.put(`${API_URL}api/cv/comment/${id}`, comment);\r\n};\r\nconst updateCompanyComment = (id, comment) => {\r\n  return axios.put(`${API_URL}api/comp/comment/${id}`, comment);\r\n};\r\nconst likeComment = (commentId, userId) => {\r\n  return axios.put(`${API_URL}api/cv/comment/${commentId}/${userId}/liking`);\r\n};\r\nconst deletePostById = (postId) => {\r\n  return axios.delete(`${API_URL}api/cv/post/${postId}`);\r\n};\r\nconst unlikeComment = (commentId) => {\r\n  return axios.delete(`${API_URL}api/cv/comment/${commentId}/unliking`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst likePost = (postId, userId) => {\r\n  return axios.put(`${API_URL}api/cv/post/${postId}/${userId}/liking`);\r\n};\r\nconst unlikePost = (postId) => {\r\n  return axios.delete(`${API_URL}api/cv/post/${postId}/unliking`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst uploadStudentPost = (post) => {\r\n  return axios.post(`${API_URL}api/cv/uploadPost`, post, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst uploadCompanyPost = (post) => {\r\n  return axios.post(`${API_URL}api/comp/uploadPost`, post, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst getAbout = () => {\r\n  return axios.get(`${API_URL}api/cv/about`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst uploadAboutCompany = (address, city, number, bio, socials) => {\r\n  return axios.post(\r\n    `${API_URL}api/comp/about`,\r\n    {\r\n      address,\r\n      city,\r\n      number,\r\n      bio,\r\n      socials,\r\n    },\r\n    { headers: authHeader() }\r\n  );\r\n};\r\nconst flagCompany = (id) => {\r\n  return axios.put(`${API_URL}api/comp/flag/${id}`);\r\n};\r\nconst flagStudent = (id) => {\r\n  return axios.put(`${API_URL}api/cv/flag/${id}`);\r\n};\r\nconst getDevLang = () => {\r\n  return axios.get(`${API_URL}api/cv/dev`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst uploadDevLang = (name, value, icon) => {\r\n  return axios.post(\r\n    `${API_URL}api/cv/dev`,\r\n    {\r\n      name,\r\n      value,\r\n      icon,\r\n    },\r\n    { headers: authHeader() }\r\n  );\r\n};\r\nconst deleteDevLang = (id) => {\r\n  return axios.delete(`${API_URL}api/cv/dev/${id}`);\r\n};\r\nconst getNormalLang = () => {\r\n  return axios.get(`${API_URL}api/cv/normal`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst uploadNormalLang = (name, value) => {\r\n  return axios.post(\r\n    `${API_URL}api/cv/normal`,\r\n    {\r\n      name,\r\n      value,\r\n    },\r\n    { headers: authHeader() }\r\n  );\r\n};\r\nconst deleteNormalLang = (id) => {\r\n  return axios.delete(`${API_URL}api/cv/normal/${id}`);\r\n};\r\nconst getSoftware = (id) => {\r\n  return axios.get(`${API_URL}api/cv/software`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst uploadSoftware = (name, value, icon) => {\r\n  return axios.post(\r\n    `${API_URL}api/cv/software`,\r\n    {\r\n      name,\r\n      value,\r\n      icon,\r\n    },\r\n    { headers: authHeader() }\r\n  );\r\n};\r\nconst deleteSoftware = (id) => {\r\n  return axios.delete(`${API_URL}api/cv/software/${id}`);\r\n};\r\nconst getAward = () => {\r\n  return axios.get(`${API_URL}api/cv/award`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst uploadAbout = (\r\n  firstName,\r\n  lastName,\r\n  address,\r\n  city,\r\n  number,\r\n  bio,\r\n  socials,\r\n  interests,\r\n  domaine\r\n) => {\r\n  return axios.post(\r\n    `${API_URL}api/cv/about`,\r\n    {\r\n      firstName,\r\n      lastName,\r\n      address,\r\n      city,\r\n      number,\r\n      bio,\r\n      socials,\r\n      interests,\r\n      domaine,\r\n    },\r\n    { headers: authHeader() }\r\n  );\r\n};\r\nconst uploadAward = (organizer, name, position) => {\r\n  return axios.post(\r\n    `${API_URL}api/cv/award`,\r\n    {\r\n      organizer,\r\n      name,\r\n      position,\r\n    },\r\n    { headers: authHeader() }\r\n  );\r\n};\r\nconst deleteAward = (id) => {\r\n  return axios.delete(`${API_URL}api/cv/award/${id}`);\r\n};\r\nconst getEducation = () => {\r\n  return axios.get(`${API_URL}api/cv/education`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst uploadEducation = (school, diploma, dateStart, dateEnd, field) => {\r\n  return axios.post(\r\n    `${API_URL}api/cv/education`,\r\n    {\r\n      school,\r\n      diploma,\r\n      dateStart,\r\n      dateEnd,\r\n      field,\r\n    },\r\n    { headers: authHeader() }\r\n  );\r\n};\r\nconst deleteEducation = (id) => {\r\n  return axios.delete(`${API_URL}api/cv/education/${id}`);\r\n};\r\nconst getExperience = () => {\r\n  return axios.get(`${API_URL}api/cv/experience`, {\r\n    headers: authHeader(),\r\n  });\r\n};\r\nconst uploadExperience = (\r\n  occupation,\r\n  company,\r\n  dateStart,\r\n  dateEnd,\r\n  description,\r\n  isProject\r\n) => {\r\n  return axios.post(\r\n    `${API_URL}api/cv/experience`,\r\n    { occupation, company, dateStart, dateEnd, description, isProject },\r\n    { headers: authHeader() }\r\n  );\r\n};\r\nconst getExperienceById = (id) => {\r\n  return axios.get(`${API_URL}api/cv/getexperiencebyid/${id}`);\r\n};\r\nconst deleteExperience = (id) => {\r\n  return axios.delete(`${API_URL}api/cv/experience/${id}`);\r\n};\r\nconst updateAboutCompany = (id, about) => {\r\n  return axios.put(`${API_URL}api/comp/about/${id}`, about);\r\n};\r\nconst updateAbout = (id, about) => {\r\n  return axios.put(`${API_URL}api/cv/updateAbout/${id}`, about);\r\n};\r\nconst getEducationById = (id) => {\r\n  return axios.get(`${API_URL}api/cv/geteducationbyid/${id}`);\r\n};\r\nconst editEducation = (id, education) => {\r\n  return axios.put(`${API_URL}api/cv/updateEducation/${id}`, education);\r\n};\r\nconst getUnenabledManagers = () => {\r\n  return axios.get(`${API_URL}api/comp/unenabledcompanies`);\r\n};\r\nconst editExperience = (id, experience) => {\r\n  return axios.put(`${API_URL}api/cv/updateExperience/${id}`, experience);\r\n};\r\nconst imageLink = `${API_URL}upload/static/images/`;\r\nconst uploadImageUrl = `${API_URL}api/cv/image`;\r\nconst uploadImageUrlCompany = `${API_URL}api/comp/image`;\r\nconst userService = {\r\n  getApiState,\r\n  getSoftware,\r\n  getAward,\r\n  getAbout,\r\n  uploadSoftware,\r\n  uploadAbout,\r\n  deleteSoftware,\r\n  getAllConversations,\r\n  getUserData,\r\n  getAllStudents,\r\n  getExperienceById,\r\n  editExperience,\r\n  connectTo,\r\n  deleteAward,\r\n  disconnect,\r\n  getEducation,\r\n  uploadEducation,\r\n  deleteEducation,\r\n  getExperience,\r\n  uploadExperience,\r\n  updateAboutCompany,\r\n  deleteExperience,\r\n  uploadAward,\r\n  getUnenabledManagers,\r\n  flagCompany,\r\n  getEducationById,\r\n  editEducation,\r\n  updateAbout,\r\n  accept,\r\n  deleteNotification,\r\n  getAllCompanies,\r\n  getUserById,\r\n  getCurrentImage,\r\n  deleteDevLang,\r\n  uploadAboutCompany,\r\n  getImageById,\r\n  getNormalLang,\r\n  uploadNormalLang,\r\n  deleteNormalLang,\r\n  getDevLang,\r\n  getCurrentCompanyImage,\r\n  getUsersLike,\r\n  getCompanyImageById,\r\n  handleNotif,\r\n  uploadDevLang,\r\n  handleSingleNotif,\r\n  uploadCompanyPost,\r\n  sendMessage,\r\n  getMessages,\r\n  likePost,\r\n  flagStudent,\r\n  unlikePost,\r\n  deleteMesssage,\r\n  uploadStudentPost,\r\n  uploadStudentComment,\r\n  uploadCompanyComment,\r\n  getAllNotifications,\r\n  getLikesByPost,\r\n  getPosts,\r\n  getPostById,\r\n  contactUs,\r\n  priveCv,\r\n  unpriveCv,\r\n  getEtablishements,\r\n  getNonPrivatePosts,\r\n  getAll,\r\n  updateStudentPost,\r\n  enable,\r\n  deleteComment,\r\n  updateStudentComment,\r\n  updateCompanyComment,\r\n  likeComment,\r\n  deletePostById,\r\n  getPostComments,\r\n  unlikeComment,\r\n  imageLink,\r\n  uploadImageUrl,\r\n  uploadImageUrlCompany,\r\n};\r\nexport default userService;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation.jsx",["400"],"import React, { useEffect, useState } from \"react\";\r\n//Materiel Ui\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n//component imports\r\nimport Welcome from \"./src/components/Home/welcome/welcome\";\r\nimport Team from \"./Presentation Children/Team\"\r\nimport Sponsor from \"./src/components/Home/welcome/sponsor\";\r\nimport ContactUs from \"./src/components/Home/welcome/ContactUs\";\r\n\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\nconst GlobalCss = withStyles({\r\n  \"@global\": {\r\n    \".MuiBox-root\": {\r\n      padding: \"0px\",\r\n    },\r\n  },\r\n})(() => null);\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    width: \"100%\",\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n    color: \"white\",\r\n    fontWeight: \"bolder\",\r\n    \"&:hover, &:focus\": {\r\n      color: \"black\",\r\n      textDecoration: \"none\",\r\n    },\r\n    \"&:active\": {\r\n      color: \"black\",\r\n      textDecoration: \"none\",\r\n    },\r\n  },\r\n}));\r\nconst Presentation = () => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = useState(0);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  useEffect(() => { }, []);\r\n  return (\r\n    <>\r\n      <div className={classes.root}>\r\n        <GlobalCss />\r\n        <AppBar position=\"static\" color=\"whitesmoke\">\r\n          <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n            variant=\"fullWidth\"\r\n            scrollButtons=\"auto\"\r\n            aria-label=\"scrollable auto tabs example\"\r\n          >\r\n            <Tab\r\n              label=\"Accueil\"\r\n              {...a11yProps(0)}\r\n              style={{ outline: \"none\" }}\r\n            />\r\n            <Tab label=\"Team\" {...a11yProps(1)} style={{ outline: \"none\" }} />\r\n\r\n            <Tab\r\n              label=\"contact-us\"\r\n              {...a11yProps(4)}\r\n              style={{ outline: \"none\" }}\r\n            />\r\n          </Tabs>\r\n        </AppBar>\r\n        <TabPanel value={value} index={0}>\r\n          <Welcome />\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1}>\r\n          <Team />\r\n        </TabPanel>\r\n\r\n        <TabPanel value={value} index={2}>\r\n          <ContactUs />\r\n        </TabPanel>\r\n      </div>\r\n      <Snackbar open={open} autoHideDuration={20000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"info\">\r\n          <a href=\"./profile\" className={classes.link}>\r\n            Set up your profile here\r\n          </a>\r\n        </Alert>\r\n      </Snackbar>\r\n    </>\r\n  );\r\n};\r\nexport default Presentation;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Signup\\SignUp.jsx",["401","402","403"],"import React, { useEffect, useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport authService from \"../../services/authService\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport login from \"../../login.jfif\";\r\nimport userService from \"../../services/userService\";\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    flexGrow: 1,\r\n  },\r\n  tab: {\r\n    width: \"50%\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(0, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  typo: {\r\n    marginTop: \"2vh\",\r\n    marginBottom: \"2vh\",\r\n  },\r\n  image: {\r\n    backgroundImage: `url(${login})`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[50]\r\n        : theme.palette.grey[900],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n}));\r\nfunction validateEmail(email) {\r\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\nexport default function SignUp({ user }) {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [companyName, setCompanyName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errors, setErrors] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [successful, setSuccessful] = useState(\"\");\r\n  const [value, setValue] = useState(0);\r\n  const [etablishments, setEtablishments] = useState([]);\r\n  const [etablishment, setEtablishment] = useState(0);\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push(\"/profile\");\r\n    }\r\n    async function getEtablishments() {\r\n      await userService.getEtablishements().then((response) => {\r\n        setEtablishments(response.data);\r\n      })\r\n    }\r\n    getEtablishments();\r\n  }, []);\r\n  const handleChangeFirstName = (e) => {\r\n    const firstName = e.target.value;\r\n    setFirstName(firstName);\r\n    if (firstName.length === 0) {\r\n      setErrors({ ...errors, firstName: \"First name is required\" });\r\n    } else {\r\n      setErrors({ ...errors, firstName: null });\r\n    }\r\n  };\r\n  const handleChangeLastName = (e) => {\r\n    const lastName = e.target.value;\r\n    setLastName(lastName);\r\n    if (lastName.length === 0) {\r\n      setErrors({ ...errors, lastName: \"Last name is required\" });\r\n    } else {\r\n      setErrors({ ...errors, lastName: null });\r\n    }\r\n  };\r\n  const handleChangeUsername = (e) => {\r\n    const userName = e.target.value;\r\n    setUserName(userName);\r\n    if (userName.length === 0) {\r\n      setErrors({ ...errors, userName: \"User name is required\" });\r\n    } else {\r\n      setErrors({ ...errors, userName: null });\r\n      if (userName?.length < 3)\r\n        setErrors({\r\n          ...errors,\r\n          userName: \"User name must be equal or greater than 3\",\r\n        });\r\n    }\r\n  };\r\n  const handleChangeEmail = (e) => {\r\n    const email = e.target.value;\r\n    setEmail(email);\r\n    if (email.length === 0) {\r\n      setErrors({ ...errors, email: \"Email is required\" });\r\n    } //else if (!email.endsWith('@uit.ac.ma') && value === 0) {\r\n    //   setErrors({ ...errors, email: \"Use your university email\" })\r\n    // }\r\n    else {\r\n      setErrors({ ...errors, email: null });\r\n      if (!validateEmail(email)) {\r\n        setErrors({ ...errors, email: \"Invalid email format\" });\r\n      }\r\n    }\r\n  };\r\n  const handleChangeEtablishment = (e) => {\r\n    const etablishment = e.target.value;\r\n    setEtablishment(etablishment);\r\n    if (etablishment == 0) {\r\n      setErrors({ ...errors, etablishment: \"Etablishement is required\" });\r\n    }\r\n    else {\r\n      setErrors({ ...errors, etablishment: null })\r\n    }\r\n  };\r\n\r\n  const handleChangeCompanyName = (e) => {\r\n    const companyName = e.target.value;\r\n    setCompanyName(companyName);\r\n    if (companyName.length === 0) {\r\n      setErrors({ ...errors, companyName: \"User name is required\" });\r\n    } else {\r\n      setErrors({ ...errors, companyName: null });\r\n    }\r\n  };\r\n\r\n  const handleChangePassword = (e) => {\r\n    const password = e.target.value;\r\n    setPassword(password);\r\n    if (password?.length === 0) {\r\n      setErrors({ ...errors, password: \"Password required\" });\r\n    } else {\r\n      setErrors({ ...errors, password: null });\r\n      if (password?.length < 8)\r\n        setErrors({\r\n          ...errors,\r\n          password: \"Password must be equal or greater than 8\",\r\n        });\r\n    }\r\n  };\r\n  const handleStudentSignup = (e) => {\r\n    e.preventDefault();\r\n    if (etablishment == 0) {\r\n      setErrors({ ...errors, etablishment: \"Etablishement is required\" });\r\n      return 0;\r\n    }\r\n    setMessage(\"\");\r\n    setLoading(true);\r\n    if (!Object.values(errors).some((x) => x !== null && x !== \"\")) {\r\n      setLoading(true);\r\n      const name =\r\n        firstName.split(\" \").join(\"\").toLowerCase() +\r\n        \" \" +\r\n        lastName.split(\" \").join(\"\").toLowerCase();\r\n      const userNamex = userName.toLowerCase();\r\n      const emailx = email.toLowerCase();\r\n      authService.register(name, \"\", userNamex, emailx, password, 1, etablishment).then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setLoading(false);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n          setLoading(false);\r\n        }\r\n      );\r\n    }\r\n    else {\r\n      setLoading(false)\r\n    }\r\n\r\n  };\r\n  const handleManagerSignup = (e) => {\r\n    e.preventDefault();\r\n    setMessage(\"\");\r\n    setLoading(true);\r\n    if (!Object.values(errors).some((x) => x !== null && x !== \"\")) {\r\n      setLoading(true);\r\n      const name =\r\n        firstName.split(\" \").join(\"\").toLowerCase() +\r\n        \" \" +\r\n        lastName.split(\" \").join(\"\").toLowerCase();\r\n      const userNamex = userName.toLowerCase();\r\n      const emailx = email.toLowerCase();\r\n      authService\r\n        .register(name, companyName, userNamex, emailx, password, 3)\r\n        .then(\r\n          (response) => {\r\n            setMessage(\"Please wait for the admin to enable your account\");\r\n            setSuccessful(true);\r\n            setLoading(false);\r\n          },\r\n          (error) => {\r\n            const resMessage =\r\n              (error.response &&\r\n                error.response.data &&\r\n                error.response.data.message) ||\r\n              error.message ||\r\n              error.toString();\r\n\r\n            setMessage(resMessage);\r\n            setSuccessful(false);\r\n            setLoading(false);\r\n          }\r\n        );\r\n    }\r\n  };\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n        {loading && (\r\n          <div className={classes.root}>\r\n            <LinearProgress />\r\n          </div>\r\n        )}\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Paper className={classes.root}>\r\n            <Tabs\r\n              value={value}\r\n              onChange={handleChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              centered\r\n            >\r\n              <Tab label=\"Student Registration\" className={classes.tab} />\r\n              <Tab label=\"Manager Registration\" />\r\n            </Tabs>\r\n          </Paper>\r\n\r\n          {!successful && value === 0 && (\r\n            <>\r\n              <Typography component=\"h1\" variant=\"h5\" className={classes.typo}>\r\n                Sign up as a Student\r\n              </Typography>\r\n              <form\r\n                className={classes.form}\r\n                onSubmit={handleStudentSignup}\r\n                Validate\r\n              >\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      autoComplete=\"fname\"\r\n                      name=\"firstName\"\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      error={Boolean(errors?.firstName)}\r\n                      id=\"firstName\"\r\n                      label=\"First Name\"\r\n                      value={firstName\r\n                        .split(\" \")\r\n                        .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                        .join(\" \")}\r\n                      helperText={errors?.firstName}\r\n                      onChange={handleChangeFirstName}\r\n                      autoFocus\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"lastName\"\r\n                      label=\"Last Name\"\r\n                      name=\"lastName\"\r\n                      autoComplete=\"lname\"\r\n                      value={lastName\r\n                        .split(\" \")\r\n                        .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                        .join(\" \")}\r\n                      onChange={handleChangeLastName}\r\n                      error={Boolean(errors?.lastName)}\r\n                      helperText={errors?.lastName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"username\"\r\n                      label=\"Username\"\r\n                      name=\"username\"\r\n                      autoComplete=\"username\"\r\n                      value={userName}\r\n                      onChange={handleChangeUsername}\r\n                      error={Boolean(errors?.userName)}\r\n                      helperText={errors?.userName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <FormControl variant=\"filled\" xs={12} sm={6}>\r\n                      <InputLabel id=\"demo-simple-select-label\">Etablissement</InputLabel>\r\n                      <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={etablishment}\r\n                        onChange={handleChangeEtablishment}\r\n                        error={Boolean(errors?.etablishment)}\r\n                      >\r\n                        <MenuItem value={0}>Choose Your Etablishement</MenuItem>\r\n                        {etablishments.map((etablishment) => {\r\n                          return (<MenuItem value={etablishment.id}>{etablishment.name}</MenuItem>)\r\n                        })}\r\n                      </Select>\r\n                      <FormHelperText error={Boolean(errors?.etablishment)}>{errors?.etablishment}</FormHelperText>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email Address\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      value={email}\r\n                      onChange={handleChangeEmail}\r\n                      error={Boolean(errors?.email)}\r\n                      helperText={errors?.email}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      value={password}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      onChange={handleChangePassword}\r\n                      autoComplete=\"current-password\"\r\n                      error={Boolean(errors?.password)}\r\n                      helperText={errors?.password}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox value=\"allowExtraEmails\" color=\"primary\" />\r\n                      }\r\n                      label=\"I agree to use my personnal information for academic researches\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                >\r\n                  Sign Up\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item>\r\n                    <Link\r\n                      href=\"#\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        history.push(\"/login\");\r\n                      }}\r\n                      variant=\"body2\"\r\n                    >\r\n                      Already have an account? Sign in\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            </>\r\n          )}\r\n          {!successful && value === 1 && (\r\n            <>\r\n              <Typography component=\"h1\" variant=\"h5\" className={classes.typo}>\r\n                Sign up as an Enterprise Manager\r\n              </Typography>\r\n              <form\r\n                className={classes.form}\r\n                onSubmit={handleManagerSignup}\r\n                Validate\r\n              >\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      autoComplete=\"fname\"\r\n                      name=\"firstName\"\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      error={Boolean(errors?.firstName)}\r\n                      id=\"firstName\"\r\n                      label=\"First Name\"\r\n                      value={firstName\r\n                        .split(\" \")\r\n                        .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                        .join(\" \")}\r\n                      helperText={errors?.firstName}\r\n                      onChange={handleChangeFirstName}\r\n                      autoFocus\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"lastName\"\r\n                      label=\"Last Name\"\r\n                      name=\"lastName\"\r\n                      autoComplete=\"lname\"\r\n                      value={lastName\r\n                        .split(\" \")\r\n                        .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                        .join(\" \")}\r\n                      onChange={handleChangeLastName}\r\n                      error={Boolean(errors?.lastName)}\r\n                      helperText={errors?.lastName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"username\"\r\n                      label=\"Company Name\"\r\n                      name=\"companyName\"\r\n                      autoComplete=\"companyName\"\r\n                      value={companyName}\r\n                      onChange={handleChangeCompanyName}\r\n                      error={Boolean(errors?.userName)}\r\n                      helperText={errors?.userName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"username\"\r\n                      label=\"Username\"\r\n                      name=\"username\"\r\n                      autoComplete=\"username\"\r\n                      value={userName}\r\n                      onChange={handleChangeUsername}\r\n                      error={Boolean(errors?.userName)}\r\n                      helperText={errors?.userName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email Address\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      value={email}\r\n                      onChange={handleChangeEmail}\r\n                      error={Boolean(errors?.email)}\r\n                      helperText={errors?.email}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      value={password}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      onChange={handleChangePassword}\r\n                      autoComplete=\"current-password\"\r\n                      error={Boolean(errors?.password)}\r\n                      helperText={errors?.password}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox value=\"allowExtraEmails\" color=\"primary\" />\r\n                      }\r\n                      label=\"I agre to use my data in ...\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                >\r\n                  Sign Up\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item>\r\n                    <Link\r\n                      href=\"#\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        history.push(\"/login\");\r\n                      }}\r\n                      variant=\"body2\"\r\n                    >\r\n                      Already have an account? Sign in\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            </>\r\n          )}\r\n        </div>\r\n        {message && (\r\n          <Alert\r\n            severity={!successful ? \"error\" : \"success\"}\r\n            onClose={() => {\r\n              setMessage(null);\r\n            }}\r\n          >\r\n            {message}\r\n          </Alert>\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Login\\Login.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Home.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\Profile.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\ConfirmationToken\\ConfirmationToken.jsx",["404"],"import React, { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport authService from \"../../services/authService\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport \"./ConfirmationToken.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction ConfirmationToken({ userinfo, user }) {\r\n  const history = useHistory();\r\n  const query = useQuery();\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push(\"/home\");\r\n    }\r\n    const token = query.get(\"token\");\r\n    authService.verify(token).then(() => {\r\n      history.push(\"/profile\");\r\n      window.location.reload();\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"loader\">\r\n      <CircularProgress\r\n        variant=\"determinate\"\r\n        className=\"circularProgress\"\r\n        size={40}\r\n        thickness={4}\r\n        value={100}\r\n      />\r\n      <h1>Redirect...</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConfirmationToken;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Header.jsx",["405"],"import React, { useState, useEffect, initialState } from \"react\";\r\nimport \"./Header.css\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport HeaderOption from \"./HeaderOption/HeaderOption\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport DropdownMenu from \"./HeaderOption/DropdowMenu/DropdownMenu\";\r\nimport Search from \"./Search/Search\";\r\nimport SearchMenu from \"./Search/SearchMenu/SearchMenu\";\r\nimport userService from \"../../services/userService\";\r\nimport logo from \"../../logo.png\";\r\n\r\nfunction Header({ image }) {\r\n  const [user, setUser] = useState(initialState);\r\n  const [count, setCount] = useState(0);\r\n  useEffect(() => {\r\n    async function getUserData() {\r\n      await userService.getUserData().then((response) => {\r\n        setUser(response?.data);\r\n      });\r\n    }\r\n    getUserData();\r\n  }, [count]);\r\n  const history = useHistory();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const handleButtonClick = (pageURL) => {\r\n    history.push(pageURL);\r\n  };\r\n  const handleSearch = (e) => {\r\n    e.target.style.marginLeft = \"20px\";\r\n  };\r\n  const handleNotif = () => {\r\n    try {\r\n      userService.handleNotif();\r\n      setCount(count + 1)\r\n    } catch (err) {\r\n      // Handle Error Here\r\n      console.error(err);\r\n    }\r\n  };\r\n  const badge = user?.notifications.filter((x) => x.status === false).length;\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header_left align-items-center\">\r\n        <Link to=\"/\">\r\n          <img src={logo} alt=\"Logo\" className=\"logo\" />\r\n        </Link>\r\n        {/* SearchIcon */}\r\n        {user && !isMobile && (\r\n          <Search>\r\n            <SearchMenu />\r\n          </Search>\r\n        )}\r\n      </div>\r\n      <div className=\"header_right align-items-center\" id=\"myDiv\">\r\n        {user ? (\r\n          <>\r\n            <HeaderOption Icon={HomeIcon} title=\"Home\" isMobile={isMobile} onClick={handleNotif} />\r\n            <HeaderOption\r\n              Icon={SupervisorAccountIcon}\r\n              title=\"MyNetwork\"\r\n              isMobile={isMobile}\r\n              onClick={handleNotif}\r\n            />\r\n            <HeaderOption\r\n              Icon={ChatIcon}\r\n              title=\"Messages\"\r\n              isMobile={isMobile}\r\n              onClick={handleNotif}\r\n            />\r\n            <HeaderOption\r\n              Icon={NotificationsIcon}\r\n              title=\"Notifications\"\r\n              isMobile={isMobile}\r\n              badge={badge}\r\n              onClick={handleNotif}\r\n            />\r\n            <HeaderOption\r\n              image={\r\n                user?.roles[0]?.id === 1\r\n                  ? userService.imageLink +\r\n                  user?.cv?.image\r\n                  : userService.imageLink +\r\n                  user?.company?.companyImage\r\n              }\r\n              className=\"wrapper button\"\r\n              title={\"@\" + user?.username.split(\" \")[0]}\r\n              titleIcon={<ArrowDropDownIcon />}\r\n              isMobile={isMobile}\r\n            >\r\n              <DropdownMenu image={image} user={user} />\r\n            </HeaderOption>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Button\r\n              variant=\"contained\"\r\n              className=\"button\"\r\n              onClick={() => handleButtonClick(\"/login\", true)}\r\n            >\r\n              LOG IN\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              className=\"button\"\r\n              onClick={() => handleButtonClick(\"/register\")}\r\n            >\r\n              REGISTER\r\n            </Button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Network\\Network.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Notification\\Notification.jsx",["406","407"],"import React, { useEffect } from \"react\";\r\nimport Sidebar from \"../Home/Sidebar/Sidebar\"\r\nimport Feed from \"./Feed/Feed\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nfunction Home(props) {\r\n    const history = useHistory();\r\n    const image = props?.image;\r\n    const user = props?.user;\r\n    return (\r\n        <>\r\n            <Sidebar image={image} user={user} />\r\n            <Feed />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Dashboard.jsx",["408","409","410","411","412","413","414","415","416"],"import React, { useState, useEffect } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ListUsers from \"./ListUsers\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\r\nimport EqualizerIcon from \"@material-ui/icons/Equalizer\";\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport Statistics from \"./Statistics\";\r\nimport Enable from \"./Enable\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../services/authHeader\";\r\nimport Charts from \"./Charts\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport authService from \"../../services/authService\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport { useHistory } from \"react-router\";\r\nimport Messages from \"./Messages\";\r\nimport userService from \"../../services/userService\"\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  toolbar: {\r\n    paddingRight: 24, // keep right padding when drawer closed\r\n  },\r\n  toolbarIcon: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"0 8px\",\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create([\"width\", \"margin\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  menuButtonHidden: {\r\n    display: \"none\",\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  drawerPaper: {\r\n    position: \"relative\",\r\n    whiteSpace: \"nowrap\",\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerPaperClose: {\r\n    overflowX: \"hidden\",\r\n    transition: theme.transitions.create(\"width\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    width: theme.spacing(7),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: theme.spacing(9),\r\n    },\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    width: \"100vw\",\r\n    height: \"100vh\",\r\n    overflow: \"auto\",\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n    width: \"100vw\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    width: \"80vw\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n}));\r\nexport default function Dashboard({ user }) {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(true);\r\n\r\n  const [toggleDash, setToggleDash] = useState(true);\r\n  const [toggleStatistics, setToggleStatistics] = useState(false);\r\n  const [toggleEnable, setToggleEnable] = useState(false);\r\n  const [toggleMessages, setToggleMessages] = useState(false);\r\n\r\n  const [dada, setDada] = useState([]);\r\n\r\n  const [accounts, setAccounts] = useState();\r\n\r\n  const [refresh, setRefresh] = useState(false);\r\n\r\n  const handleLogout = () => {\r\n    authService.logout();\r\n    history.push(\"/register\");\r\n    window.location.reload();\r\n  };\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  const handleDashClick = () => {\r\n    setToggleDash(true);\r\n    setToggleStatistics(false);\r\n    setToggleEnable(false);\r\n    setToggleMessages(false);\r\n  };\r\n  const handleStatisticsClick = () => {\r\n    setToggleDash(false);\r\n    setToggleStatistics(true);\r\n    setToggleMessages(false);\r\n    setToggleEnable(false);\r\n  };\r\n  const handleEnableClick = () => {\r\n    setToggleDash(false);\r\n    setToggleStatistics(false);\r\n    setToggleMessages(false);\r\n    setToggleEnable(true);\r\n  };\r\n  const handleMessageClick = () => {\r\n    setToggleDash(false);\r\n    setToggleStatistics(false);\r\n    setToggleEnable(false);\r\n    setToggleMessages(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"absolute\"\r\n        className={clsx(classes.appBar, open && classes.appBarShift)}\r\n      >\r\n        <Toolbar className={classes.toolbar}>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(\r\n              classes.menuButton,\r\n              open && classes.menuButtonHidden\r\n            )}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography\r\n            component=\"h1\"\r\n            variant=\"h6\"\r\n            color=\"inherit\"\r\n            noWrap\r\n            className={classes.title}\r\n          >\r\n            Dashboard\r\n          </Typography>\r\n          <Button\r\n            color=\"secondary\"\r\n            variant=\"contained\"\r\n            endIcon={<ExitToAppIcon />}\r\n            onClick={() => handleLogout()}\r\n          >\r\n            Logout\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        classes={{\r\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n        }}\r\n        open={open}\r\n      >\r\n        <div className={classes.toolbarIcon}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          <div>\r\n            <ListItem button onClick={handleDashClick}>\r\n              <ListItemIcon>\r\n                <DashboardIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Dashboard\" />\r\n            </ListItem>\r\n            <ListItem button onClick={handleStatisticsClick}>\r\n              <ListItemIcon>\r\n                <EqualizerIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Statistics\" />\r\n            </ListItem>\r\n            <ListItem button onClick={handleEnableClick}>\r\n              <ListItemIcon>\r\n                <PersonAddIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Enable Managers\" />\r\n            </ListItem>\r\n            <ListItem button onClick={handleMessageClick}>\r\n              <ListItemIcon>\r\n                <EmailIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Messages\" />\r\n            </ListItem>\r\n          </div>\r\n        </List>\r\n        <Divider />\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          {toggleDash && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={8} lg={9}>\r\n                <Typography\r\n                  component=\"h2\"\r\n                  variant=\"h6\"\r\n                  color=\"inherit\"\r\n                  noWrap\r\n                  className={classes.title}\r\n                >\r\n                  Hello{\" \"}\r\n                  {user?.name\r\n                    .split(\" \")\r\n                    .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                    .join(\" \")}\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <Paper className={classes.paper}>\r\n                  <ListUsers user={user} />\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n          {toggleMessages && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={8} lg={9}>\r\n                <Typography\r\n                  component=\"h2\"\r\n                  variant=\"h6\"\r\n                  color=\"inherit\"\r\n                  noWrap\r\n                  className={classes.title}\r\n                >\r\n                  Hello{\" \"}\r\n                  {user?.name\r\n                    .split(\" \")\r\n                    .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                    .join(\" \")}\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <Paper className={classes.paper}>\r\n                  <Messages accounts={accounts} user={user} />\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n          {toggleStatistics && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={8} lg={9}>\r\n                <Typography\r\n                  component=\"h2\"\r\n                  variant=\"h6\"\r\n                  color=\"inherit\"\r\n                  noWrap\r\n                  className={classes.title}\r\n                >\r\n                  Hello{\" \"}\r\n                  {user?.name\r\n                    .split(\" \")\r\n                    .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                    .join(\" \")}\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <Statistics user={user} />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n          {toggleEnable && (\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12} md={8} lg={9}>\r\n                <Typography\r\n                  component=\"h2\"\r\n                  variant=\"h6\"\r\n                  color=\"inherit\"\r\n                  noWrap\r\n                  className={classes.title}\r\n                >\r\n                  Hello{\" \"}\r\n                  {user?.name\r\n                    .split(\" \")\r\n                    .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                    .join(\" \")}\r\n                </Typography>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <Paper className={classes.paper}>\r\n                  <Enable\r\n                    refresh={refresh}\r\n                    onChange={(value) => setRefresh(value)}\r\n                  />\r\n                </Paper>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Messages.jsx",["417","418"],"import React, { useState, useEffect } from 'react'\r\nimport userService from '../../services/userService';\r\nimport Feed from './Feed/Feed'\r\nimport styles from './Messages.module.css'\r\nimport Sidebar from './Sidebar/Sidebar'\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction Messages(props) {\r\n    const [data, setData] = useState([])\r\n    const [name, setName] = useState(\"\")\r\n    const [date, setDate] = useState(\"\")\r\n    const [img, setImage] = useState(\"\")\r\n    const [id, setId] = useState(-1)\r\n    const [forceId, setForceId] = useState(parseInt(useParams().id))\r\n    const [isNew, setIsNew] = useState(true)\r\n    const handleActive = (id, namex, datex, imgx) => {\r\n        setId(id)\r\n        setName(namex)\r\n        const datexx = new Date(datex)\r\n        const dt = datexx.toLocaleTimeString()\r\n        setDate(dt)\r\n        setImage(imgx)\r\n        setIsNew(false)\r\n        setForceId(false)\r\n    }\r\n    useEffect(() => {\r\n        async function getConversations() {\r\n            await userService.getAllConversations().then((response) => {\r\n                const datax = response.data\r\n                if (forceId) {\r\n                    const current = datax.find(conversation => { return (conversation.id == forceId) })\r\n                    setId(current.id)\r\n                    setName(current?.username)\r\n                    setDate(current?.date)\r\n                    setImage(current.img)\r\n                    setIsNew(false)\r\n                }\r\n                setData(datax);\r\n            },\r\n                (error) => {\r\n                    console.log(error)\r\n                });\r\n        }\r\n        getConversations();\r\n    }, []);\r\n    return (\r\n        <div className={styles.container}>\r\n            <Sidebar forceId={forceId} data={data} NewConversation={() => { setIsNew(true) }} setActive={(id, namex, datex, imgx) => handleActive(id, namex, datex, imgx)} />\r\n            <Feed id={id} isNew={isNew} name={name} date={date} img={img} user={props.user} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\SinglePost\\SinglePostMain.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\Cv.jsx",["419","420","421","422","423","424","425","426","427"],"import Navbar from \"./cv/Navbar\";\r\nimport \"../js/cv\";\r\nimport About from \"./cv/About\";\r\nimport AboutCompany from \"./company/About\";\r\nimport Nav from \"./company/Nav\";\r\nimport Education from \"./cv/Education\";\r\nimport Experience from \"./cv/Experience\";\r\nimport Skill from \"./cv/Skill\";\r\nimport Interests from \"./cv/Interest\";\r\nimport Award from \"./cv/Award\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport userService from \"../../../services/userService\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"react-icons/fa\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport EditAbout from \"./EditCv/EditAbout\";\r\nimport EditExperience from \"./EditCv/EditExperience\";\r\nimport EditEducation from \"./EditCv/EditEducation\";\r\nimport EditDevLanguages from \"./EditCv/EditDevLanguages\";\r\nimport EditNormalLanguages from \"./EditCv/EditNormalLanguages\";\r\nimport EditSoftware from \"./EditCv/EditSoftware\";\r\nimport EditAwards from \"./EditCv/EditAwards\";\r\nimport BootAccordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport EditAboutCompany from \"./EditCompany/EditAboutCompany\";\r\nimport EditImage from \"./EditCv/EditImage\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport \"./Cv.css\";\r\n\r\n// import EditSkills from \"./Edit Cv/EditSkills\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    color: \"#fff\",\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n    borderRadius: \"30px\",\r\n  },\r\n}));\r\n\r\nconst Cv = (props) => {\r\n  const history = useHistory();\r\n  const [currentUserId, setCurrentUserId] = useState();\r\n  const [currentUser, setCurrentUser] = useState();\r\n  const [isFriend, setIsFriend] = useState(-1);\r\n  const [cv, setCv] = useState({});\r\n  const [company, setCompany] = useState({});\r\n  const [email, setEmail] = useState(\"\");\r\n  const [role, setRole] = useState();\r\n  const [flag, setFlag] = useState(false);\r\n  const id = props?.match?.params?.id;\r\n  const [data, setData] = useState({});\r\n  const [toggle, setToggle] = useState(false);\r\n  const [image, setImage] = useState();\r\n  const [count, setCount] = useState(0);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const classes = useStyles();\r\n  const [isExperience, setIsExperience] = useState(true);\r\n  const [switchState, setSwitchState] = useState(true);\r\n  const handleSwitchChange = () => {\r\n    if (switchState) {\r\n      userService.unpriveCv(currentUserId).then(\r\n        (res) => {\r\n          setSwitchState(!switchState);\r\n        },\r\n        (err) => {\r\n          console.log(err);\r\n        }\r\n      );\r\n    } else {\r\n      userService.priveCv(currentUserId).then((res) => {\r\n        setSwitchState(!switchState);\r\n      });\r\n    }\r\n  };\r\n\r\n  const connectTo = async () => {\r\n    try {\r\n      const resp = await userService.connectTo(id);\r\n      setCount(count + 1);\r\n    } catch (err) {\r\n      // Handle Error Here\r\n      console.error(err);\r\n    }\r\n  };\r\n  const disconnect = async () => {\r\n    try {\r\n      await userService.disconnect(id).then((response) => {\r\n        setCount(count + 1);\r\n        window.location.reload();\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  const handleMessage = () => {\r\n    history.push(`/Messages/${id}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function getUserById() {\r\n      await userService.getUserById(id).then((response) => {\r\n        setCv(response?.data?.cv);\r\n        if (response?.data?.cv?.experiences.length === 0) {\r\n          setIsExperience(false);\r\n        }\r\n        setData(response?.data);\r\n        setSwitchState(response?.data?.cv?.prive);\r\n        setCompany(response?.data?.company);\r\n        setEmail(response?.data?.email);\r\n        setRole(response?.data?.roles[0]?.id);\r\n        if (response?.data?.roles[0]?.id === 1) {\r\n          setImage(\r\n            userService.imageLink + response?.data?.cv?.image\r\n          );\r\n        }\r\n        if (response?.data?.roles[0]?.id === 3) {\r\n          setImage(\r\n            userService.imageLink + response?.data?.company?.companyImage\r\n          );\r\n        }\r\n        setFlag(response?.data?.cv?.flag || response?.data?.company?.flag);\r\n        setToggle(false);\r\n      });\r\n    }\r\n    getUserById();\r\n    async function getUserData() {\r\n      await userService.getUserData().then((response) => {\r\n        setCurrentUserId(response?.data?.id);\r\n        setCurrentUser(response?.data);\r\n        response?.data?.friendshipSended.forEach((friendship) => {\r\n          if (friendship.id.receiverId == id) {\r\n            if (friendship.status === false) {\r\n              setIsFriend(0);\r\n            } else {\r\n              setIsFriend(1);\r\n            }\r\n          }\r\n        });\r\n        response?.data?.friendshipReceived.forEach((friendship) => {\r\n          if (friendship.id.senderId == id) {\r\n            if (friendship.status === false) {\r\n              setIsFriend(0);\r\n            } else {\r\n              setIsFriend(1);\r\n            }\r\n          }\r\n        });\r\n      });\r\n    }\r\n    getUserData();\r\n  }, [count, currentUserId, toggle]);\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size={role === 1 ? \"xl\" : \"lg\"}\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Editing Profile\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className={classes.root}>\r\n            <Accordion>\r\n              <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n                className=\"bg-dark text-white\"\r\n              >\r\n                <Typography className={classes.heading}>Edit Image</Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <EditImage\r\n                  data={data}\r\n                  role={data?.roles[0]?.id}\r\n                  toggle={toggle}\r\n                  onChange={(value) => {\r\n                    setToggle(value);\r\n                    setModalShow(false);\r\n                  }}\r\n                />\r\n              </AccordionDetails>\r\n            </Accordion>\r\n            <Accordion>\r\n              <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n                className=\"bg-dark text-white\"\r\n              >\r\n                <Typography className={classes.heading}>\r\n                  Edit About Section\r\n                </Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                {role === 1 && (\r\n                  <EditAbout\r\n                    data={data?.cv?.about}\r\n                    id={id}\r\n                    toggle={toggle}\r\n                    onChange={(value) => {\r\n                      setToggle(value);\r\n                      setModalShow(false);\r\n                    }}\r\n                  />\r\n                )}\r\n                {role === 3 && (\r\n                  <EditAboutCompany\r\n                    data={data?.company?.aboutCompany}\r\n                    id={data?.id}\r\n                    toggle={toggle}\r\n                    onChange={(value) => {\r\n                      setToggle(value);\r\n                      setModalShow(false);\r\n                    }}\r\n                  />\r\n                )}\r\n              </AccordionDetails>\r\n            </Accordion>\r\n            {role === 1 && (\r\n              <>\r\n                <Accordion>\r\n                  <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    className=\"bg-dark text-white\"\r\n                  >\r\n                    <Typography className={classes.heading}>\r\n                      Edit Experience Section\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <EditExperience\r\n                      data={data}\r\n                      id={id}\r\n                      toggle={toggle}\r\n                      onChange={(value) => {\r\n                        setToggle(value);\r\n                        setModalShow(false);\r\n                      }}\r\n                    />\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n                <Accordion>\r\n                  <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    className=\"bg-dark text-white\"\r\n                  >\r\n                    <Typography className={classes.heading}>\r\n                      Edit Education Section\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <EditEducation\r\n                      toggle={toggle}\r\n                      onChange={(value) => {\r\n                        setToggle(value);\r\n                        setModalShow(false);\r\n                      }}\r\n                    />\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n                <Accordion>\r\n                  <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    className=\"bg-dark text-white\"\r\n                  >\r\n                    <Typography className={classes.heading}>\r\n                      Edit Skills Section\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <BootAccordion\r\n                      defaultActiveKey=\"0\"\r\n                      className=\"w-100 align-items-center\"\r\n                    >\r\n                      <BootAccordion.Toggle\r\n                        as={Button}\r\n                        variant=\"link\"\r\n                        eventKey=\"0\"\r\n                      >\r\n                        Dev Languages\r\n                      </BootAccordion.Toggle>\r\n                      <BootAccordion.Toggle\r\n                        as={Button}\r\n                        variant=\"link\"\r\n                        eventKey=\"1\"\r\n                      >\r\n                        Language\r\n                      </BootAccordion.Toggle>\r\n                      <BootAccordion.Toggle\r\n                        as={Button}\r\n                        variant=\"link\"\r\n                        eventKey=\"2\"\r\n                      >\r\n                        Softwares\r\n                      </BootAccordion.Toggle>\r\n                      <BootAccordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n                          <EditDevLanguages\r\n                            toggle={toggle}\r\n                            onChange={(value) => {\r\n                              setToggle(value);\r\n                              setModalShow(false);\r\n                            }}\r\n                          />\r\n                        </Card.Body>\r\n                      </BootAccordion.Collapse>\r\n\r\n                      <BootAccordion.Collapse eventKey=\"1\">\r\n                        <Card.Body>\r\n                          <EditNormalLanguages\r\n                            toggle={toggle}\r\n                            onChange={(value) => {\r\n                              setToggle(value);\r\n                              setModalShow(false);\r\n                            }}\r\n                          />\r\n                        </Card.Body>\r\n                      </BootAccordion.Collapse>\r\n\r\n                      <BootAccordion.Collapse eventKey=\"2\">\r\n                        <Card.Body>\r\n                          <EditSoftware\r\n                            toggle={toggle}\r\n                            onChange={(value) => {\r\n                              setToggle(value);\r\n                              setModalShow(false);\r\n                            }}\r\n                          />\r\n                        </Card.Body>\r\n                      </BootAccordion.Collapse>\r\n                    </BootAccordion>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n                <Accordion>\r\n                  <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    className=\"bg-dark text-white\"\r\n                  >\r\n                    <Typography className={classes.heading}>\r\n                      Edit Awards Section\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <EditAwards data={data} />\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n              </>\r\n            )}\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {flag && (\r\n        <div className=\"cv_body\">\r\n          <MyVerticallyCenteredModal\r\n            show={modalShow}\r\n            onHide={() => {\r\n              setModalShow(false);\r\n              setToggle(!toggle);\r\n            }}\r\n          />\r\n          {role === 1 && (\r\n            <div id=\"page-top\">\r\n              <Navbar image={image} isExperience={isExperience} />\r\n              {/* Page Content*/}\r\n              <div className=\"container-fluid p-0\">\r\n                <hr className=\"m-0 pt-5 mr-3\" />\r\n                {/* {props.id === currentUserId && <Edit data={data} />} */}\r\n                <div className=\"d-flex flex-row-reverse mr-5\">\r\n                  {currentUserId == id ? (\r\n                    <>\r\n                      <Button\r\n                        onClick={() => setModalShow(true)}\r\n                        variant=\"contained\"\r\n                        size=\"medium\"\r\n                        style={{\r\n                          position: \"fixed\",\r\n                          top: \"18vh\",\r\n                          right: \"2vw\",\r\n                        }}\r\n                        startIcon={\r\n                          <EditIcon\r\n                            style={{\r\n                              maxWidth: \"30px\",\r\n                              maxHeight: \"30px\",\r\n                              minWidth: \"30px\",\r\n                              minHeight: \"30px\",\r\n                            }}\r\n                          />\r\n                        }\r\n                      >\r\n                        Edit Your Profile\r\n                      </Button>\r\n                      <Tooltip title=\"En mode privé, vos informations et vos postes ne sont pas visibles aux étudiants inconnus\">\r\n                        <FormControlLabel\r\n                          style={{\r\n                            position: \"fixed\",\r\n                            top: \"28vh\",\r\n                            right: \"5vw\",\r\n                          }}\r\n                          control={\r\n                            <Switch\r\n                              checked={switchState}\r\n                              onChange={handleSwitchChange}\r\n                              color=\"primary\"\r\n                            />\r\n                          }\r\n                          label=\"Mode privé\"\r\n                        />\r\n                      </Tooltip>\r\n                    </>\r\n                  ) : (\r\n                    <div\r\n                      className=\"buttons d-flex\"\r\n                      style={{ position: \"fixed\", top: \"18vh\", right: \"2vw\" }}\r\n                    >\r\n                      {isFriend === 1 && (\r\n                        <>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"danger\"\r\n                            className={classes.button}\r\n                            onClick={disconnect}\r\n                          >\r\n                            Disconnect\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleMessage}\r\n                            className={classes.button}\r\n                            endIcon={<SendIcon />}\r\n                          >\r\n                            Message\r\n                          </Button>\r\n                        </>\r\n                      )}\r\n                      {isFriend === 0 && (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disabled\r\n                          className={classes.button}\r\n                        >\r\n                          Sent\r\n                        </Button>\r\n                      )}\r\n                      {isFriend === -1 && (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          className={classes.button}\r\n                          onClick={connectTo}\r\n                        >\r\n                          Connect\r\n                        </Button>\r\n                      )}\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        endIcon={<MoreHorizIcon />}\r\n                      >\r\n                        More\r\n                      </Button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                {/* About*/}\r\n\r\n                {currentUserId != id && switchState && currentUser?.roles[0]?.id == 1 && isFriend != 1 ? (\r\n                  <h2>Cet utilisateur a un profil privé</h2>\r\n                ): (\r\n                  <>\r\n                    {\" \"}\r\n                    <About data={cv?.about} email={email} />\r\n                    {isExperience && (\r\n                      <>\r\n                        <hr className=\"m-0\" />\r\n                        {/* Experience*/}\r\n                        <Experience data={cv?.experiences} />\r\n                      </>\r\n                    )}\r\n                    <hr className=\"m-0\" />\r\n                    {/* Education*/}\r\n                    <Education data={cv?.educations} />\r\n                    <hr className=\"m-0\" />\r\n                    {/* Skills*/}\r\n                    <Skill\r\n                      dev={cv?.devLanguages}\r\n                      normal={cv?.normalLanguages}\r\n                      software={cv?.softwares}\r\n                    />\r\n                    <hr className=\"m-0\" />\r\n                    {/* Interests*/}\r\n                    <Interests data={cv?.about?.interests} />\r\n                    <hr className=\"m-0\" />\r\n                    {/* Awards*/}\r\n                    {cv?.awards.length !== 0 && <Award data={cv?.awards} />}\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {role === 3 && (\r\n            <div id=\"page-top\">\r\n              {currentUserId == id ? (\r\n                <Button\r\n                  onClick={() => setModalShow(true)}\r\n                  variant=\"contained\"\r\n                  size=\"medium\"\r\n                  style={{ position: \"fixed\", top: \"18vh\", right: \"2vw\" }}\r\n                  startIcon={\r\n                    <EditIcon\r\n                      style={{\r\n                        maxWidth: \"30px\",\r\n                        maxHeight: \"30px\",\r\n                        minWidth: \"30px\",\r\n                        minHeight: \"30px\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  Edit Your Profile\r\n                </Button>\r\n              ) : (\r\n                <div\r\n                  className=\"buttons d-flex\"\r\n                  style={{ position: \"fixed\", top: \"18vh\", right: \"2vw\" }}\r\n                >\r\n                  {isFriend === 1 && (\r\n                    <>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"danger\"\r\n                        className={classes.button}\r\n                        onClick={disconnect}\r\n                      >\r\n                        Disconnect\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        endIcon={<SendIcon />}\r\n                        onClick={handleMessage}\r\n                      >\r\n                        Message\r\n                      </Button>\r\n                    </>\r\n                  )}\r\n                  {isFriend === 0 && (\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      disabled\r\n                      className={classes.button}\r\n                      onClick={connectTo}\r\n                    >\r\n                      Sent\r\n                    </Button>\r\n                  )}\r\n                  {isFriend === -1 && (\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      onClick={connectTo}\r\n                    >\r\n                      Connect\r\n                    </Button>\r\n                  )}\r\n\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    endIcon={<MoreHorizIcon />}\r\n                  >\r\n                    More\r\n                  </Button>\r\n                </div>\r\n              )}\r\n              <Nav id={id} image={image} />\r\n              <AboutCompany data={company?.aboutCompany} email={email} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Cv;","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\services\\authService.js",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\Feed.jsx",["428","429","430","431","432","433","434","435","436","437","438","439"],"import React, { useState, useEffect, initialState, useRef } from \"react\";\r\nimport \"./Feed.css\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport InputOption from \"./InputOption/InputOption\";\r\nimport PhotoIcon from \"@material-ui/icons/Photo\";\r\nimport PostAddIcon from \"@material-ui/icons/PostAdd\";\r\nimport Post from \"./Post/Post\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../services/authHeader\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Shimmer from \"react-shimmer-effect\";\r\nimport userService from \"../../../services/userService\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  button: {\r\n    border: \"none\",\r\n    outline: \"none\",\r\n  },\r\n  container: {\r\n    border: \"0px solid rgba(255, 255, 255, 1)\",\r\n    boxShadow: \"0px 0px 20px rgba(0, 0, 0, .1)\",\r\n    borderRadius: \"4px\",\r\n    backgroundColor: \"white\",\r\n    display: \"flex\",\r\n    padding: \"16px\",\r\n    width: \"100%\",\r\n    marginBottom: \"20px\",\r\n  },\r\n  circle: {\r\n    height: \"56px\",\r\n    width: \"56px\",\r\n    borderRadius: \"50%\",\r\n  },\r\n  line: {\r\n    width: \"15%\",\r\n    height: \"8px\",\r\n    alignSelf: \"center\",\r\n    marginLeft: \"16px\",\r\n    borderRadius: \"8px\",\r\n  },\r\n  longline: {\r\n    width: \"60%\",\r\n    height: \"8px\",\r\n    alignSelf: \"center\",\r\n    marginLeft: \"16px\",\r\n    borderRadius: \"8px\",\r\n  },\r\n  break: {\r\n    flexBasis: \"100%\",\r\n    width: \"0px\",\r\n    height: \"0px\",\r\n    overflow: \"hidden\",\r\n  },\r\n  content: {\r\n    width: \"100%\",\r\n    height: \"8px\",\r\n    alignSelf: \"center\",\r\n    marginLeft: \"16px\",\r\n    borderRadius: \"8px\",\r\n  },\r\n}));\r\n\r\nconst postsPerPage = 10;\r\nlet arrayForHoldingPosts = [];\r\n\r\nfunction Feed(props) {\r\n  const [input, setInput] = useState(\"\");\r\n  const [posts, setPosts] = useState([]);\r\n  const [res, setRes] = useState([]);\r\n  const user = props?.user;\r\n  const image = props?.image;\r\n\r\n  const [message, setMessage] = useState(initialState);\r\n  const [successful, setSuccessful] = useState(initialState);\r\n  const [refresh, setRefresh] = useState(false);\r\n  //const [loaded, setLoaded] = useState(false); // bash toggle shimmer\r\n\r\n  //if < 10 posts makibansh l button\r\n  const [toggleLoadMore, setToggleLoadMore] = useState(false);\r\n\r\n  const [childLoaderRefresh, setChildLoaderRefresh] = useState(false);\r\n\r\n  const [postsToShow, setPostsToShow] = useState([]);\r\n  const [count, setCount] = useState(1);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  //start img\r\n\r\n  const fileInputRef = useRef(null);\r\n  const uploadRef = useRef(null);\r\n  const [newImage, setNewImage] = useState(null);\r\n  const [fileType, setFileType] = useState(initialState);\r\n  const [fileContent, setFileContent] = useState([]);\r\n\r\n  const onChange = (e) => {\r\n    setFileContent(e.target.files[0]);\r\n    setFileType(e.target.files[0].type.split(\"/\")[1]);\r\n    // if (e.target.files && e.target.files[0]) {\r\n    //   let img = e.target.files[0];\r\n    //   setNewImage(URL.createObjectURL(img));\r\n    // }\r\n    setNewImage(URL.createObjectURL(e.target.files[0]));\r\n  };\r\n  const fileUpload = async (imageNameCounter) => {\r\n    const url = userService.uploadImageUrl;\r\n    const formData = new FormData();\r\n    const myRenamedFile = new File(\r\n      [fileContent],\r\n      \"post\" + imageNameCounter + \".\" + fileType\r\n    );\r\n    formData.append(\"file\", myRenamedFile);\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${authHeader()}`,\r\n        \"content-type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n    return axios.post(url, formData, config);\r\n  };\r\n  const handleClick = (e) => {\r\n    fileUpload();\r\n  };\r\n  const triggerInputFile = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n  const clearImage = () => {\r\n    setFileContent(null);\r\n    setFileType(null);\r\n    setNewImage(null);\r\n  };\r\n\r\n  const loadingSpinner = async () => {\r\n    setLoading(true);\r\n    setRefresh(!refresh);\r\n    clearImage();\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1500);\r\n  };\r\n\r\n  // fin img\r\n\r\n  //traitement showing posts\r\n  const loopThroughPosts = (count) => {\r\n    for (\r\n      let i = count * postsPerPage - postsPerPage;\r\n      i < postsPerPage * count;\r\n      i++\r\n    ) {\r\n      if (posts[i] !== undefined) {\r\n        arrayForHoldingPosts.push(posts[i]);\r\n      }\r\n    }\r\n    setPostsToShow(arrayForHoldingPosts);\r\n  };\r\n  useEffect(() => {\r\n    setCount((prevCount) => prevCount + 1);\r\n    loopThroughPosts(count);\r\n  }, []);\r\n\r\n  const handleShowMorePosts = () => {\r\n    setCount((prevCount) => prevCount + 1);\r\n    loopThroughPosts(count);\r\n  };\r\n\r\n  //snackbar\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    const keyCode = e.which || e.keyCode;\r\n    if (keyCode === 13 && !e.shiftKey) {\r\n      e.preventDefault();\r\n      uploadPost();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getPosts = async () => {\r\n      let result;\r\n      if (user?.roles[0]?.id == 1) {\r\n        result = await userService.getNonPrivatePosts();\r\n      } else {\r\n        result = await userService.getPosts();\r\n      }\r\n      setRes(result?.data);\r\n      setTimeout(() => {\r\n        // setLoaded(true);\r\n        if (result?.data?.length > 10) {\r\n          setToggleLoadMore(true);\r\n        }\r\n      }, 500);\r\n\r\n      arrayForHoldingPosts = result?.data?.slice(0, 10);\r\n      setPostsToShow(res?.slice(0, 10));\r\n    };\r\n    getPosts();\r\n  }, [refresh]);\r\n\r\n  useEffect(() => {\r\n    setPosts(res);\r\n    setPostsToShow(res?.slice(0, 10));\r\n  }, [res]);\r\n\r\n  useEffect(() => {\r\n    loadingSpinner();\r\n  }, [childLoaderRefresh]);\r\n\r\n  const uploadPost = () => {\r\n    const errors = [];\r\n    if (input.length === 0) errors.push(\"Message cannot be empty.\\n\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setSuccessful(false);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    let post = {\r\n      message: input,\r\n      role: user?.roles[0]?.id,\r\n      domaine: user?.cv?.about?.domaine,\r\n    };\r\n    if (newImage) {\r\n      post.imageType = fileType;\r\n    }\r\n\r\n    if (user?.roles[0]?.id === 1) {\r\n      userService.uploadStudentPost(post)\r\n        .then(\r\n          (response) => {\r\n            if (newImage) {\r\n              fileUpload(response?.data);\r\n            }\r\n            setSuccessful(true);\r\n            setMessage(\"Message uploaded!\");\r\n            setOpen(true);\r\n            loadingSpinner();\r\n            // window.location.reload();\r\n            setInput(\"\");\r\n          },\r\n          (error) => {\r\n            setSuccessful(false);\r\n            setMessage(\"Couldn't upload message\");\r\n            setOpen(true);\r\n          }\r\n        );\r\n    } else if (user?.roles[0]?.id === 3) {\r\n      userService.uploadCompanyPost(post)\r\n        .then(\r\n          (response) => {\r\n            if (newImage) {\r\n              fileUpload(response?.data);\r\n            }\r\n            setSuccessful(true);\r\n            setMessage(\"Message uploaded!\");\r\n            setOpen(true);\r\n            loadingSpinner();\r\n            // window.location.reload();\r\n            setInput(\"\");\r\n          },\r\n          (error) => {\r\n            setSuccessful(false);\r\n            setMessage(\"Couldn't upload message\");\r\n            setOpen(true);\r\n          }\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"feed\">\r\n      {loading && (\r\n        <Loader\r\n          type=\"Oval\"\r\n          // color=\"rgb(63, 63, 63)\"\r\n          color=\"#6573c3\"\r\n          height={30}\r\n          width={30}\r\n          timeout={1500}\r\n          className=\"loading_spinner\"\r\n        />\r\n      )}\r\n      {!loading && (\r\n        <div className=\"feed\">\r\n          <div className=\"feed_inputContainer\">\r\n            <div className=\"feed_input\">\r\n              <CreateIcon />\r\n              <form>\r\n                <input\r\n                  type=\"text\"\r\n                  value={input}\r\n                  onChange={(e) => setInput(e.target.value)}\r\n                  style={{ cursor: \"text\", fontSize: \"18px\" }}\r\n                  placeholder=\"What do you want to talk about?\"\r\n                  onKeyDown={handleKeyDown}\r\n                />\r\n              </form>\r\n            </div>\r\n            {newImage && (\r\n              <div>\r\n                <img\r\n                  className=\"mx-auto d-block rounded border border-dark\"\r\n                  src={newImage}\r\n                  style={{\r\n                    maxHeight: \"90%\",\r\n                    maxWidth: \"90%\",\r\n                    margin: \"10px 10px\",\r\n                  }}\r\n                  alt=\"a\"\r\n                />\r\n              </div>\r\n            )}\r\n            <div className=\"feed_inputOptions\">\r\n              <InputOption\r\n                Icon={PhotoIcon}\r\n                title=\"Photo\"\r\n                color=\"#7085F9\"\r\n                onClick={triggerInputFile}\r\n              />\r\n              <div class=\"form-group mb-2 d-none\">\r\n                <label for=\"file-upload\" className=\"btn btn-outline-dark mt-2 \">\r\n                  <i class=\"fas fa-upload\"></i>Choose File\r\n                </label>\r\n                <input\r\n                  type=\"file\"\r\n                  id=\"file-upload\"\r\n                  className=\"d-none\"\r\n                  accept=\".jpeg,.png,.jpg,.tif,.svg,.jfif\"\r\n                  ref={fileInputRef}\r\n                  onChange={onChange}\r\n                />\r\n                <Button\r\n                  className=\"MuiButton-sizeSmall MuiButton-textPrimary mt-2\"\r\n                  variant=\"outlined\"\r\n                  ref={uploadRef}\r\n                  onClick={(e) => {\r\n                    handleClick(e);\r\n                  }}\r\n                >\r\n                  UPLOAD\r\n                </Button>\r\n              </div>\r\n              {newImage && (\r\n                <IconButton\r\n                  aria-label=\"delete\"\r\n                  className={classes.margin}\r\n                  onClick={clearImage}\r\n                >\r\n                  <CloseIcon backgroundColor=\"gray\" fontSize=\"large\" />\r\n                </IconButton>\r\n              )}\r\n              <InputOption\r\n                Icon={PostAddIcon}\r\n                title=\"Post\"\r\n                color=\"green\"\r\n                onClick={uploadPost}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"feed_PostContainer\">\r\n            {/* {!loaded && ( // shimmer part\r\n              <>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                    <div className={classes.longline} />\r\n                  </Shimmer>\r\n                </div>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                    <div className={classes.longline} />\r\n                  </Shimmer>\r\n                </div>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                    <div className={classes.longline} />\r\n                  </Shimmer>\r\n                </div>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                    <div className={classes.longline} />\r\n                  </Shimmer>\r\n                </div>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                    <div className={classes.longline} />\r\n                  </Shimmer>\r\n                </div>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                    <div className={classes.longline} />\r\n                  </Shimmer>\r\n                </div>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                  </Shimmer>\r\n                </div>\r\n              </>\r\n            )} */}\r\n            {/* {loaded && */}\r\n            {postsToShow?.map((e, key) => (\r\n              <Post\r\n                key={key}\r\n                user={user}\r\n                postId={e?.id}\r\n                message={e?.message}\r\n                timestamp={e?.updatedAt.substring(0, 10)}\r\n                username={e?.ownerUsername}\r\n                name={e?.ownerName}\r\n                role={e?.role}\r\n                ownerId={e?.ownersId}\r\n                refresh={refresh}\r\n                currentUserId={user?.id}\r\n                ownerImage={image}\r\n                imageType={e?.imageType}\r\n                onChange={(value) => setChildLoaderRefresh(value)}\r\n              />\r\n            ))}\r\n          </div>\r\n          {toggleLoadMore && postsToShow.length != res.length && (\r\n            <Button\r\n              size=\"small\"\r\n              variant=\"contained\"\r\n              onClick={handleShowMorePosts}\r\n            >\r\n              Load more\r\n            </Button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\StudentProfile.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\CompanyProfile.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Statistics.jsx",["440","441","442","443"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TrendingDownIcon from \"@material-ui/icons/TrendingDown\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Title2 from \"./Title\";\r\nimport { Avatar } from \"@material-ui/core\";\r\n\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {\r\n  Chart,\r\n  BarSeries,\r\n  Title,\r\n  ArgumentAxis,\r\n  ValueAxis,\r\n} from \"@devexpress/dx-react-chart-material-ui\";\r\nimport authHeader from \"../../services/authHeader\";\r\n\r\nimport { Animation } from \"@devexpress/dx-react-chart\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../services/userService\";\r\n\r\nfunction preventDefault(event) {\r\n  event.preventDefault();\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  root: {\r\n    width: \"20vw\",\r\n    minWidth: \"400px\",\r\n    margin: \"1vh 0vw\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  cardcontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    maxWidth: \"500px\",\r\n  },\r\n  chartcontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    maxWidth: \"1000px\",\r\n    maxHeight: \"500px\",\r\n    marginRight: \"2vw\",\r\n  },\r\n  chartpaper: {\r\n    minWidth: \"700px\",\r\n    width: \"1000px\",\r\n  },\r\n  maincontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  maincontainer2: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    marginTop: \"2vh\",\r\n  },\r\n  flexing: {\r\n    display: \"flex\",\r\n  },\r\n  tablee: {\r\n    maxWidth: \"1000px\",\r\n  },\r\n}));\r\n\r\nconst data = [\r\n  { day: \"12/04\", visitors: 80 },\r\n  { day: \"13/04\", visitors: 120 },\r\n  { day: \"14/04\", visitors: 135 },\r\n  { day: \"15/04\", visitors: 126 },\r\n  { day: \"16/04\", visitors: 179 },\r\n  { day: \"17/04\", visitors: 207 },\r\n];\r\n\r\nexport default function ListUsers({ user }) {\r\n  const classes = useStyles();\r\n  const [accounts, setAccounts] = useState();\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    async function getAll() {\r\n      await axios\r\n        .get(\"http://localhost:5000/api/profile/getall\", {\r\n          headers: authHeader(),\r\n        })\r\n        .then((response) => {\r\n          console.table(response?.data);\r\n          setAccounts(response?.data);\r\n        });\r\n    }\r\n    getAll();\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.maincontainer}>\r\n        <div className={classes.flexing}>\r\n          <div className={classes.chartcontainer}>\r\n            <Paper className={classes.chartpaper}>\r\n              <Chart data={data}>\r\n                <ArgumentAxis />\r\n                <ValueAxis max={7} />\r\n                <BarSeries valueField=\"visitors\" argumentField=\"day\" />\r\n                <Title text=\"Daily Visitors\" />\r\n                <Animation />\r\n              </Chart>\r\n            </Paper>\r\n          </div>\r\n          <div className={classes.cardcontainer}>\r\n            <Card className={classes.root} variant=\"outlined\">\r\n              <CardContent>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  Visitors\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                  Today\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"p\">\r\n                  {Math.ceil(Math.random() * 300)}{\" \"}\r\n                  <TrendingUpIcon\r\n                    style={{ color: \"#4caf50\" }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                  <span\r\n                    style={{\r\n                      color: \"#4caf50\",\r\n                      fontSize: \"18px\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    5.5%\r\n                  </span>\r\n                  <br />\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  Last 7 days: 74{\" \"}\r\n                  <ArrowUpwardIcon\r\n                    style={{ color: \"#4caf50\" }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button size=\"small\" variant=\"contained\" color=\"secondary\">\r\n                  Learn More\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n            <Card className={classes.root} variant=\"outlined\">\r\n              <CardContent>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  Visitors\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                  Today\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"p\">\r\n                  {Math.ceil(Math.random() * 300)}{\" \"}\r\n                  <TrendingDownIcon\r\n                    style={{ color: \"#d50000\" }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                  <span\r\n                    style={{\r\n                      color: \"#d50000\",\r\n                      fontSize: \"18px\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    5.5%\r\n                  </span>\r\n                  <br />\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  Last 7 days: -20{\" \"}\r\n                  <ArrowDownwardIcon\r\n                    style={{ color: \"#d50000\" }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button size=\"small\" variant=\"contained\" color=\"secondary\">\r\n                  Learn More\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={classes.maincontainer2}>\r\n        <div className={classes.flexing}>\r\n          <div className={classes.chartcontainer}>\r\n            <Paper className={classes.chartpaper}>\r\n              <Title2>&nbsp; Logged In Users</Title2>\r\n              <Card className={classes.tablee}>\r\n                <Table size=\"small\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Id</TableCell>\r\n                      <TableCell>Image</TableCell>\r\n                      <TableCell>Full Name</TableCell>\r\n                      <TableCell>Username</TableCell>\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell>Role</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {accounts?.slice(0, 5).map(\r\n                      (account) =>\r\n                        account.id != user.id && (\r\n                          <TableRow key={account.id}>\r\n                            <TableCell>{account.id}</TableCell>\r\n                            <TableCell>\r\n                              {account.roles[0].id === 1 && (\r\n                                <Avatar\r\n                                  src={\r\n                                    userService.imageLink +\r\n                                    account.cv.image\r\n                                  }\r\n                                />\r\n                              )}\r\n                              {account.roles[0].id === 2 && (\r\n                                <Avatar\r\n                                  src={\r\n                                    userService.imageLink + \"admin.jpg\"\r\n                                  }\r\n                                />\r\n                              )}\r\n                              {account.roles[0].id === 3 && (\r\n                                <Avatar\r\n                                  src={\r\n                                    \"http://localhost:5000/upload/static/images/\" +\r\n                                    account.company.companyImage\r\n                                  }\r\n                                />\r\n                              )}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                              {account.name\r\n                                .split(\" \")\r\n                                .map(\r\n                                  (e) => e.charAt(0).toUpperCase() + e.slice(1)\r\n                                )\r\n                                .join(\" \")}\r\n                            </TableCell>\r\n                            <TableCell>{account.username}</TableCell>\r\n                            <TableCell>{account.email}</TableCell>\r\n                            <TableCell>\r\n                              {account.roles[0].id === 1 && \"Student\"}\r\n                              {account.roles[0].id === 2 && \"Admin\"}\r\n                              {account.roles[0].id === 3 && \"Manager\"}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </Card>\r\n            </Paper>\r\n          </div>\r\n          <div className={classes.cardcontainer}>\r\n            <Card className={classes.root} variant=\"outlined\">\r\n              <CardContent>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  Visitors\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                  Today\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"p\">\r\n                  {Math.ceil(Math.random() * 300)}{\" \"}\r\n                  <TrendingDownIcon\r\n                    style={{ color: \"#d50000\" }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                  <span\r\n                    style={{\r\n                      color: \"#d50000\",\r\n                      fontSize: \"18px\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    5.5%\r\n                  </span>\r\n                  <br />\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  Last 7 days: -20{\" \"}\r\n                  <ArrowDownwardIcon\r\n                    style={{ color: \"#d50000\" }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button size=\"small\" variant=\"contained\" color=\"secondary\">\r\n                  Learn More\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Messages.jsx",["444","445"],"import React, { useEffect, useState } from \"react\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Title from \"./Title\";\r\nimport axios from \"axios\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    seeMore: {\r\n        marginTop: theme.spacing(3),\r\n    },\r\n}));\r\n\r\n\r\nexport default function Messages() {\r\n    const [loading, setLoading] = useState(false)\r\n    const [messages, setMessages] = useState();\r\n    const [count, setCount] = useState(0)\r\n    const handleDelete = async (id) => {\r\n        setLoading(true)\r\n        await axios.delete(`http://localhost:5000/contact/message/${id}`).then((response) => {\r\n            setCount(count + 1)\r\n        })\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function getAll() {\r\n            await axios\r\n                .get(\"http://localhost:5000/contact/messages\")\r\n                .then((response) => {\r\n                    setMessages(response?.data);\r\n                });\r\n        }\r\n        getAll();\r\n    }, [count]);\r\n    return (\r\n        <React.Fragment>\r\n            <Title>All Messages</Title>\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Id</TableCell>\r\n                        <TableCell>Name</TableCell>\r\n                        <TableCell>Email</TableCell>\r\n                        <TableCell>Message</TableCell>\r\n                        <TableCell align=\"center\">Delete</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {messages?.map(\r\n                        (message) =>\r\n                        (\r\n                            <TableRow key={message.id}>\r\n                                <TableCell>{message.id}</TableCell>\r\n                                <TableCell>\r\n                                    {message.name}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {message.email}\r\n                                </TableCell>\r\n                                <TableCell>{message.message}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <Button disabled={loading} onClick={() => {\r\n                                        handleDelete(message.id)\r\n                                    }}>\r\n                                        <CloseIcon\r\n                                            color=\"secondary\"\r\n                                        />\r\n                                    </Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    )}\r\n                </TableBody>\r\n            </Table>\r\n\r\n            {/* <div className={classes.seeMore}>\r\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\r\n          See more\r\n        </Link>\r\n      </div> */}\r\n        </React.Fragment>\r\n    );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Charts.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Enable.jsx",["446"],"import React, { useEffect, useState, initialState } from \"react\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Title from \"./Title\";\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../services/userService\";\r\n\r\nfunction preventDefault(event) {\r\n  event.preventDefault();\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function ListUsers({ refresh, onChange }) {\r\n  const classes = useStyles();\r\n  const [count, setCount] = useState(0);\r\n  const [accounts, setAccounts] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    userService.getUnenabledManagers().then((response) => {\r\n      setAccounts(response?.data)\r\n      console.log(response?.data)\r\n    })\r\n  }, [])\r\n\r\n  const enableManager = (id) => {\r\n    function enabling() {\r\n      userService.enable(id)\r\n        .then((response) => {\r\n          onChange(!refresh);\r\n          setCount(count + 1);\r\n        });\r\n    }\r\n    enabling();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Title>Unenabled Managers</Title>\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Id</TableCell>\r\n            <TableCell>Image</TableCell>\r\n            <TableCell>Full Name</TableCell>\r\n            <TableCell>Username</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Type</TableCell>\r\n            <TableCell>Enable</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {accounts?.map(\r\n            (account) =>\r\n              account.roles[0].id === 3 &&\r\n              !account.enabled && (\r\n                <TableRow key={account.id}>\r\n                  <TableCell>{account.id}</TableCell>\r\n                  <TableCell>\r\n                    {account.roles[0].id === 1 && (\r\n                      <Avatar\r\n                        src={\r\n                          userService.imageLink +\r\n                          account.cv.image\r\n                        }\r\n                      />\r\n                    )}\r\n                    {account.roles[0].id === 3 && (\r\n                      <Avatar\r\n                        src={\r\n                          userService.imageLink +\r\n                          account.company.companyImage\r\n                        }\r\n                      />\r\n                    )}\r\n                  </TableCell>\r\n\r\n                  <TableCell>\r\n                    {account.name\r\n                      .split(\" \")\r\n                      .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                      .join(\" \")}\r\n                  </TableCell>\r\n                  <TableCell>{account.username}</TableCell>\r\n                  <TableCell>{account.email}</TableCell>\r\n                  <TableCell>Manager</TableCell>\r\n                  <TableCell>\r\n                    <Button\r\n                      onClick={() => {\r\n                        enableManager(account.id);\r\n                      }}\r\n                    >\r\n                      <CheckIcon style={{ color: \"green\" }} />\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n      <div className={classes.seeMore}>\r\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\r\n          See more\r\n        </Link>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\ListUsers.jsx",["447","448","449","450","451","452","453"],"import React, { useEffect, useState } from \"react\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Title from \"./Title\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../services/authHeader\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { Close } from \"@material-ui/icons\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport authService from \"../../services/authService\";\r\nimport userService from \"../../services/userService\";\r\n\r\nfunction preventDefault(event) {\r\n  event.preventDefault();\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\n\r\nexport default function ListUsers({ user }) {\r\n  const classes = useStyles();\r\n  const [accounts, setAccounts] = useState();\r\n  const [loading, setLoading] = useState(false)\r\n  const [count, setCount] = useState(0)\r\n  const handleDelete = async (id) => {\r\n    setLoading(true)\r\n    await authService.deleteUser(id).then((response) => {\r\n      setCount(count + 1)\r\n    })\r\n    setLoading(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    function getAll() {\r\n      userService.getAll()\r\n        .then((response) => {\r\n          setAccounts(response?.data);\r\n        });\r\n    }\r\n    getAll();\r\n  }, [count]);\r\n  return (\r\n    <React.Fragment>\r\n      <Title>All Users</Title>\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Id</TableCell>\r\n            <TableCell>Image</TableCell>\r\n            <TableCell>Full Name</TableCell>\r\n            <TableCell>Username</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Role</TableCell>\r\n            <TableCell align=\"center\">Enabled</TableCell>\r\n            <TableCell align=\"center\">Delete</TableCell>\r\n            {/* <TableCell align=\"right\">Sale Amount</TableCell> */}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {accounts?.map(\r\n            (account) =>\r\n              account.id != user.id && (\r\n                <TableRow key={account.id}>\r\n                  <TableCell>{account.id}</TableCell>\r\n                  <TableCell>\r\n                    {account.roles[0].id === 1 && (\r\n                      <Avatar\r\n                        src={\r\n                          userService.imageLink +\r\n                          account.cv.image\r\n                        }\r\n                      />\r\n                    )}\r\n                    {account.roles[0].id === 2 && (\r\n                      <Avatar\r\n                        src={\r\n                          userService.imageLink + \"admin.jpg\"\r\n                        }\r\n                      />\r\n                    )}\r\n                    {account.roles[0].id === 3 && (\r\n                      <Avatar\r\n                        src={\r\n                          \"http://localhost:5000/upload/static/images/\" +\r\n                          account.company.companyImage\r\n                        }\r\n                      />\r\n                    )}\r\n                  </TableCell>\r\n\r\n                  <TableCell>\r\n                    {account.name\r\n                      .split(\" \")\r\n                      .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                      .join(\" \")}\r\n                  </TableCell>\r\n                  <TableCell>{account.username}</TableCell>\r\n                  <TableCell>{account.email}</TableCell>\r\n                  <TableCell>\r\n                    {account.roles[0].id === 1 && \"Student\"}\r\n                    {account.roles[0].id === 2 && \"Admin\"}\r\n                    {account.roles[0].id === 3 && \"Manager\"}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    {account.enabled && (\r\n                      <span className=\"text-success\">Yes</span>\r\n                    )}\r\n                    {!account.enabled && (\r\n                      <span className=\"text-danger\">No</span>\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Button disabled={loading} onClick={() => {\r\n                      handleDelete(account.id)\r\n                    }}>\r\n                      <CloseIcon\r\n                        color=\"secondary\"\r\n                      />\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n\r\n      {/* <div className={classes.seeMore}>\r\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\r\n          See more\r\n        </Link>\r\n      </div> */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation Children\\Team.jsx",["454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478"],"import React, { useEffect } from \"react\";\r\nimport img1 from \"./img/aniss-moumen.jpeg\";\r\nimport img2 from \"./img/hassan-berragragui.jpeg\";\r\nimport img3 from \"./img/safouane.jpeg\";\r\nimport img4 from \"./img/abdo.jpeg\";\r\nimport img5 from \"./img/saad.jpg\";\r\nimport img6 from \"./img/tm1.jpg\";\r\nimport \"./team.css\";\r\nimport Aos from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\nimport FooterPage from \"../../../Components/Footer/FooterPage\";\r\n\r\nexport default function Team() {\r\n  useEffect(() => {\r\n    Aos.init({ duration: 2000 });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <section id=\"team\" class=\"team section-bg\">\r\n        <div class=\"container mt-4 mb-4\" data-aos=\"fade-up\">\r\n\r\n          <div class=\"row mb-5\">\r\n\r\n            <div class=\"col-lg-6 \">\r\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"100\">\r\n                <div class=\"pic\"><img src={img1} class=\"img-fluid\" alt=\"\" /></div>\r\n                <div class=\"member-info\">\r\n                  <h4>Aniss Moumen</h4>\r\n                  <span>Encadrant</span>\r\n                  <p>Explicabo voluptatem mollitia et repellat qui dolorum quasi</p>\r\n                  <div class=\"social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter fa-xs\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f fa-xs\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram fa-xs\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in fa-xs\" style={{ color: \"#000\" }}></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-lg-6 mt-4 mt-lg-0\">\r\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"200\">\r\n                <div class=\"pic\"><img src={img6} class=\"img-fluid\" alt=\"\" /></div>\r\n                <div class=\"member-info\">\r\n                  <h4>Aymane El Mouhtarim</h4>\r\n                  <span>Fullstack Developer</span>\r\n                  <p>Aut maiores voluptates amet et quis praesentium qui senda para</p>\r\n                  <div class=\"social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter fa-sm\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f fa-sm\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram fa-sm\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in fa-sm\" style={{ color: \"#000\" }}></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-6 \">\r\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"100\">\r\n                <div class=\"pic\"><img src={img5} class=\"img-fluid\" alt=\"\" /></div>\r\n                <div class=\"member-info\">\r\n                  <h4>Saad Errazgouni</h4>\r\n                  <span>Fullstack Developer</span>\r\n                  <p>Explicabo voluptatem mollitia et repellat qui dolorum quasi</p>\r\n                  <div class=\"social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\" style={{ color: \"#000\" }}></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-lg-6 mt-4 mt-lg-0\">\r\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"200\">\r\n                <div class=\"pic\"><img src={img2} class=\"img-fluid\" alt=\"\" /></div>\r\n                <div class=\"member-info\">\r\n                  <h4>Hassan berragragui</h4>\r\n                  <span>Fullstack Developer</span>\r\n                  <p>Aut maiores voluptates amet et quis praesentium qui senda para</p>\r\n                  <div class=\"social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\" style={{ color: \"#000\" }}></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-lg-6 mt-4\">\r\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"300\">\r\n                <div class=\"pic\"><img src={img3} class=\"img-fluid\" alt=\"\" /></div>\r\n                <div class=\"member-info\">\r\n                  <h4>Safouane Lammari</h4>\r\n                  <span>Fullstack Developer</span>\r\n                  <p>Quisquam facilis cum velit laborum corrupti fuga rerum quia</p>\r\n                  <div class=\"social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\" style={{ color: \"#000\" }}></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-lg-6 mt-4\">\r\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"300\">\r\n                <div class=\"pic\"><img src={img4} class=\"img-fluid\" alt=\"\" /></div>\r\n                <div class=\"member-info\">\r\n                  <h4>Abdelkhalek Faik</h4>\r\n                  <span>Mobile Developer</span>\r\n                  <p>Quisquam facilis cum velit laborum corrupti fuga rerum quia</p>\r\n                  <div class=\"social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram\" style={{ color: \"#000\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\" style={{ color: \"#000\" }}></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </section>\r\n    </div>\r\n\r\n\r\n\r\n\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Sidebarl\\Sidebarl.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Sidebar\\Sidebar.jsx",["479","480"],"import { Avatar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport userService from \"../../../services/userService\";\r\nimport \"./Sidebar.css\";\r\n\r\nfunction Sidebar({ image, user }) {\r\n  const recentItem = (topic) => (\r\n    <div className=\"sidebar_recentItem\">\r\n      <div className=\"sidebar_hash\">#</div>\r\n      <p>{topic}</p>\r\n    </div>\r\n  );\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar_top\">\r\n        <img src=\"https://picsum.photos/seed/picsum/400/200\" alt=\"\" />\r\n        {user?.roles[0]?.id === 1 ? (\r\n          <Avatar\r\n            src={\r\n              userService.imageLink + user?.cv?.image\r\n            }\r\n            className=\"sidebar_avatar\"\r\n            alt={`Image of ${user?.name}`}\r\n          />\r\n        ) : (\r\n          <Avatar\r\n            src={\r\n              userService.imageLink +\r\n              user?.company?.companyImage\r\n            }\r\n            className=\"sidebar_avatar\"\r\n            variant=\"square\"\r\n            alt={`Image of ${user?.name}`}\r\n          />\r\n        )}\r\n        <h2>\r\n          {user?.roles[0]?.id === 1 &&\r\n            user?.cv?.about?.firstName + \" \" + user?.cv?.about?.lastName}\r\n          {user?.roles[0]?.id === 3 &&\r\n            user?.name\r\n              .split(\" \")\r\n              .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n              .join(\" \") +\r\n            \" - \" +\r\n            user?.company?.aboutCompany?.name}\r\n        </h2>\r\n        <h5>{user?.email}</h5>\r\n      </div>\r\n      <div className=\"sidebar_stats\">\r\n        <div className=\"sidebar_stat\">\r\n          <p>Connections</p>\r\n          <p className=\"sidebar_statNumber\">0</p>\r\n        </div>\r\n        <div className=\"sidebar_stat\">\r\n          <p>Profile's views</p>\r\n          <p className=\"sidebar_statNumber\">1223</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar_bottom\">\r\n        <p>Recent</p>\r\n        {user?.roles[0]?.id === 1 &&\r\n          user?.cv?.devLanguages\r\n            .slice(0, Math.floor(user?.cv?.devLanguages?.length / 2))\r\n            .map((e) => recentItem(e.name))}\r\n        {user?.roles[0]?.id === 3 && recentItem(user.companyName)}\r\n        {recentItem(\"Programming\")}\r\n        {recentItem(\"SoftwareEngineering\")}\r\n        {recentItem(\"Design\")}\r\n        {recentItem(\"Developer\")}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Sidebar\\Sidebar.jsx",["481","482"],"import React, { useState, useEffect } from 'react'\r\nimport styles from './Sidebar.module.css'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport MessageConversation from './MessageConversation/MessageConversation';\r\nimport userService from \"../../../services/userService\"\r\nfunction Sidebar({ forceId, data, setActive, NewConversation }) {\r\n    const [activeId, setActiveId] = useState(\"\")\r\n    useEffect(() => {\r\n        if (forceId) {\r\n            console.log(\"ok\")\r\n            setActiveId(forceId)\r\n\r\n        }\r\n    }, [activeId])\r\n    const handleClick = (id) => {\r\n        setActiveId(id)\r\n        const current = data.find(conversation => { return (conversation.id == id) })\r\n        setActive(id, current?.username, current?.date, current?.img)\r\n    }\r\n    const NewConversationx = () => {\r\n        NewConversation()\r\n        setActiveId(0)\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.sidebarNav}>\r\n                <h3>Messaging</h3>\r\n                <div className={styles.actions}>\r\n                    <IconButton onClick={NewConversationx} aria-label=\"New\" >\r\n                        <BorderColorIcon />\r\n                    </IconButton>\r\n                    <IconButton aria-label=\"More\" >\r\n                        <MoreHorizIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            {\r\n                data.map((conversation, index) => {\r\n                    const date = new Date(conversation.date)\r\n                    const dt = date.toLocaleDateString()\r\n                    return (\r\n                        <MessageConversation id={conversation.id} onClick={() => { handleClick(conversation.id) }} isActive={activeId === conversation.id} name={conversation.username} message={conversation.lastMessage.message} lastDate={dt} image={userService.imageLink + conversation.img} />\r\n                    )\r\n                })\r\n            }\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Feed\\Feed.jsx",["483","484","485","486","487"],"import React, { useMemo, useState, useEffect, useRef, initialValue } from 'react'\r\nimport styles from './Feed.module.css'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport userService from '../../../services/userService';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport Button from '@material-ui/core/Button';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport GifIcon from '@material-ui/icons/Gif';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport VideoCallIcon from '@material-ui/icons/VideoCall';\r\nimport authHeader from '../../../services/authHeader';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nfunction Feed({ id, isNew, name, date, img, user }) {\r\n    const [input, setInput] = useState(\"\")\r\n    const [profiles, setProfiles] = useState(\"\")\r\n    const [flag, setFlag] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [loading1, setLoading1] = useState(false)\r\n    const [loading2, setLoading2] = useState(false)\r\n    const [open, setOpen] = useState(false)\r\n    const [messagex, setMessage] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n    const [count, setCount] = useState(0)\r\n    const [top, setTop] = useState(false)\r\n    const feed = useRef(initialValue)\r\n    const handleClose = (e) => {\r\n        setOpen(!open);\r\n        setProfiles([]);\r\n        setInput(\"\");\r\n        setFlag(false);\r\n    };\r\n    const handleChange = (e) => {\r\n        const message = e.target.value\r\n        setMessage(message)\r\n    }\r\n    const sendMessage = async () => {\r\n        const messagePayload = {\r\n            jwt: authHeader().Authorization,\r\n            message: messagex,\r\n            receiverId: id\r\n        }\r\n        setLoading2(true)\r\n        await userService.sendMessage(messagePayload).then((response) => {\r\n            setTimeout(() => {\r\n                setMessage(\"\")\r\n                setLoading2(false)\r\n                setCount(count + 1)\r\n            }, 200);\r\n        })\r\n        // clientRef.sendMessage(\"/app/chat.sendMessage\", JSON.stringify(messagePayload))\r\n    }\r\n    // setInterval(() => {\r\n    //     setCount(count + 1)\r\n    // }, 10000);\r\n    useMemo(() => {\r\n    }, [id, isNew, name, date, img]);\r\n    useEffect(() => {\r\n        const getMessages = async () => {\r\n            setLoading1(true)\r\n            console.log(id)\r\n            await userService.getMessages(id).then((response) => {\r\n                console.log(response.data)\r\n                setMessages(response.data)\r\n                setLoading1(false)\r\n            },\r\n                (error) => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n        getMessages();\r\n        console.log(\"ok\")\r\n    }, [id, count]);\r\n    const handleSearchChange = (e) => {\r\n        const inputx = e.target.value;\r\n        setInput(inputx);\r\n        if (inputx) {\r\n            setOpen(true)\r\n            setLoading(true)\r\n            userService.getUsersLike(inputx).then((response) => {\r\n                setProfiles(response.data);\r\n                setFlag(true);\r\n            });\r\n            setLoading(false)\r\n        } else {\r\n            setProfiles([]);\r\n        }\r\n    }\r\n    const handleMessageReceived = (msg) => {\r\n        console.log(msg)\r\n        setMessages([...messages, msg])\r\n    }\r\n    const handleScroll = (e) => {\r\n        console.log(top)\r\n        if (e.target.scrollTop < 50) {\r\n            setTop(false)\r\n        }\r\n        else {\r\n            setTop(true)\r\n        }\r\n    }\r\n    const handleTop = () => {\r\n        feed.current.scroll({ top: 0, left: 0, behavior: 'smooth' })\r\n    }\r\n    const deleteMessage = async (id) => {\r\n        console.log(id)\r\n        userService.deleteMesssage(id).then((response) => console.log(response))\r\n        setCount(count + 1)\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            {isNew ? (<>\r\n                <div className={styles.sidebarNav}>\r\n                    <div className={styles.infos}>\r\n                        <h4>New Message</h4>\r\n                    </div>\r\n                    <div className={styles.actions}>\r\n                        <IconButton aria-label=\"More\" >\r\n                            <MoreHorizIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.searchBar}>\r\n                    <input type=\"text\" className={styles.search} value={input} onChange={handleSearchChange} placeholder=\"Type a name or multiple name\" />\r\n                    {open && <CloseIcon className={styles.close} onClick={handleClose} />}\r\n                </div>\r\n                <div className={styles.output}>\r\n                    {flag ? (\r\n                        <>\r\n                            {profiles?.length !== 0 ? (\r\n                                profiles?.map((profile) =>\r\n                                    profile.roles[0].id === 1 && profile.enabled ? (\r\n                                        <ProfileInfo\r\n                                            id={profile?.id}\r\n                                            name={profile?.name}\r\n                                            company={profile?.companyName}\r\n                                            role={profile?.roles[0]?.id}\r\n                                            image={\r\n                                                userService.imageLink +\r\n                                                profile?.cv?.image\r\n                                            }\r\n                                        />\r\n                                    ) : (\r\n                                        profile.roles[0].id === 3 &&\r\n                                        profile.enabled && (\r\n                                            <ProfileInfo\r\n                                                id={profile?.id}\r\n                                                name={profile?.name}\r\n                                                company={profile?.companyName}\r\n                                                role={profile?.roles[0]?.id}\r\n                                                image={\r\n                                                    userService.imageLink +\r\n                                                    profile?.company?.companyImage\r\n                                                }\r\n                                            />\r\n                                        )\r\n                                    )\r\n                                )\r\n                            ) : (\r\n                                <h1>No Result</h1>\r\n                            )}\r\n                        </>) : loading && (<CircularProgress />)}\r\n                </div>\r\n            </>) : (\r\n                <>\r\n                    <div className={styles.sidebarNav}>\r\n                        <div className={styles.infos}>\r\n                            <h4>{name}</h4>\r\n                            <h6>Mobile • 3h ago</h6>\r\n                        </div>\r\n                        <div className={styles.actions}>\r\n                            <IconButton aria-label=\"Delete\" color=\"secondary\" >\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                            <IconButton aria-label=\"More\" >\r\n                                <MoreHorizIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.infos1}>\r\n                        <Avatar alt={name} className={styles.avatar} src={userService.imageLink + img} />\r\n                        <h2>{name} <span> · {id}st</span></h2>\r\n                        <h6>DevOps Engineer at AB Conseils</h6>\r\n                    </div>\r\n                    <div className={styles.separator}>{date}</div>\r\n                    <div className={styles.feed} ref={feed} onScroll={handleScroll}>\r\n                        {\r\n                            top && (<IconButton className={styles.top} onClick={handleTop} aria-label=\"delete\">\r\n                                <ArrowUpwardIcon size=\"medium\" />\r\n                            </IconButton>)\r\n                        }\r\n\r\n                        {messages != \"Friendship not found\" && messages?.map((message) => {\r\n                            return message.senderId == id ? (<div className={styles.singleMessage}>\r\n                                <Avatar alt={name} className={styles.avatar} src={userService.imageLink + img} />\r\n                                <h6>{message.message}</h6>\r\n                                <IconButton aria-label=\"More\" >\r\n                                    <MoreHorizIcon />\r\n                                </IconButton>\r\n                            </div>) : (\r\n                                <div className={`${styles.singleMessage} ${styles.mine}`}>\r\n                                    <IconButton onClick={() => { deleteMessage(message.id) }} aria-label=\"Delete\" color=\"secondary\" >\r\n                                        <DeleteIcon />\r\n                                    </IconButton>\r\n                                    <IconButton aria-label=\"More\" >\r\n                                        <MoreHorizIcon />\r\n                                    </IconButton>\r\n                                    <h6>{message.message}</h6>\r\n                                </div>\r\n                            )\r\n\r\n                        })}\r\n                    </div>\r\n                    <div className={styles.message}>\r\n                        <TextareaAutosize placeholder=\"Write a message\" onKeyPress={(e) => e.key === 'Enter' && sendMessage()} value={messagex} onChange={handleChange} rowsMin=\"2\" rowsMax=\"2\" />\r\n                        <div className={styles.footer}>\r\n                            <div className={styles.types}>\r\n                                <IconButton aria-label=\"File\" >\r\n                                    <AttachFileIcon />\r\n                                </IconButton>\r\n                                <IconButton aria-label=\"Image\" >\r\n                                    <ImageIcon />\r\n                                </IconButton>\r\n                                <IconButton aria-label=\"Gif\" >\r\n                                    <GifIcon />\r\n                                </IconButton>\r\n                                <IconButton aria-label=\"Gif\" >\r\n                                    <EmojiEmotionsIcon />\r\n                                </IconButton>\r\n                                <IconButton aria-label=\"Videos\" >\r\n                                    <VideoCallIcon />\r\n                                </IconButton>\r\n                            </div>\r\n                            <div className={styles.actions1}>\r\n                                <Button\r\n                                    onClick={sendMessage}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled={loading2}\r\n                                    endIcon={<SendIcon />}\r\n                                >\r\n                                    Send\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </>)}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feed\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\src\\components\\Home\\welcome\\ContactUs.jsx",["488","489","490","491"],"import React, { useState, initialstate } from \"react\";\r\n\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport stylecontact from \"./stylecontact.module.css\"\r\nimport messageimg from \"./img/letter.svg\"\r\nimport contact from \"./contact.module.css\"\r\nimport userService from \"../../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\nfunction validateEmail(email) {\r\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\nexport default function ContactUs() {\r\n  const [nameSend, setNameSend] = useState(\"\");\r\n  const [emailSend, setEmailSend] = useState(\"\");\r\n  const [telSend, setTelSend] = useState(\"\");\r\n  const [messageSend, setMessageSend] = useState(\"\");\r\n  const [successful, setSuccessful] = useState(initialstate);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const sendForm = async () => {\r\n\r\n    const contact = {\r\n      name: nameSend,\r\n      email: emailSend,\r\n      telephone: telSend,\r\n      message: messageSend,\r\n    }\r\n    if (nameSend == \"\") {\r\n      setOpen(true);\r\n      setMessage(\"Name should not be blank\");\r\n      setSuccessful(false)\r\n    }\r\n    else if (emailSend == \"\") {\r\n      setOpen(true);\r\n      setMessage(\"Email should not be blank\");\r\n      setSuccessful(false)\r\n    }\r\n    else if (telSend == \"\") {\r\n      setOpen(true);\r\n      setMessage(\"Telephone should not be blank\");\r\n      setSuccessful(false)\r\n    }\r\n    else if (messageSend == \"\") {\r\n      setOpen(true);\r\n      setMessage(\"Message should not be blank\");\r\n      setSuccessful(false)\r\n    }\r\n    else {\r\n      if (!validateEmail(emailSend)) {\r\n        setOpen(true);\r\n        setMessage(\"Email format not valid\");\r\n        setSuccessful(false)\r\n      }\r\n      else {\r\n        await userService.contactUs(contact).then(\r\n          (response) => {\r\n            setOpen(true);\r\n            setMessage(\"Sent\")\r\n            setSuccessful(true)\r\n          },\r\n          (error) => {\r\n            alert('A name was submitted: ' + nameSend);\r\n            setOpen(true);\r\n            setMessage(\"Error While sending the message\");\r\n            setSuccessful(false)\r\n          }\r\n        );\r\n      }\r\n\r\n\r\n    }\r\n\r\n  };\r\n  return (\r\n    <div classNameName={stylecontact.head}>\r\n\r\n      <div className={contact.contact1} data-aos=\"fade-up \" data-aos-duration=\"1000\">\r\n        <div className={contact.container1contact1}>\r\n          <div className={contact.contact11pic} data1tilt>\r\n            <img src={messageimg} alt=\"IMG\" />\r\n          </div>\r\n\r\n          <div className={contact.divv}>\r\n            <span className={contact.contact11form1title}>\r\n              Contactez-nous\r\n            </span>\r\n\r\n            <div className={contact.wrap1input1} data1validate=\"Name is required\">\r\n              <input className={contact.input1} type=\"text\" name=\"name\" value={nameSend} placeholder=\"Name\"\r\n                onChange={(e) => setNameSend(e.target.value)}\r\n              />\r\n              <span className={contact.shadow1input1}></span>\r\n            </div>\r\n\r\n            <div className={contact.wrap1input1} data1validate=\"Valid email is required: ex@abc.xyz\">\r\n              <input className={contact.input1} type=\"text\" name=\"email\" value={emailSend} placeholder=\"Email\"\r\n                onChange={(e) => setEmailSend(e.target.value)}\r\n              />\r\n              <span className={contact.shadow1input1}></span>\r\n            </div>\r\n\r\n            <div className={contact.wrap1input1} data1validate=\"numero de telephone is required\">\r\n              <input className={contact.input1} type=\"text\" name=\"tel\" value={telSend} placeholder=\"numero de telephone\"\r\n                onChange={(e) => setTelSend(e.target.value)}\r\n              />\r\n              <span className={contact.shadow1input1}></span>\r\n            </div>\r\n\r\n            <div className={contact.wrap1input1} data1validate=\"Message is required\">\r\n              <textarea className={contact.input1} name=\"message\" value={messageSend} placeholder=\"Message\"\r\n                onChange={(e) => setMessageSend(e.target.value)}\r\n              ></textarea>\r\n              <span className={contact.shadow1input1}></span>\r\n            </div>\r\n\r\n            <div className={contact.container1contact11form1btn}>\r\n              <button\r\n                className={contact.contact11form1btn}\r\n                onClick={() => {\r\n                  sendForm();\r\n                }}\r\n              >\r\n                <span>\r\n                  Send\r\n                </span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\r\n        <Alert\r\n          onClose={handleClose}\r\n          severity={successful ? \"success\" : \"error\"}\r\n        >\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\src\\components\\Home\\welcome\\sponsor.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\src\\components\\Home\\welcome\\welcome.jsx",["492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport img2 from \"./assets/img/clients/client-2.png\";\r\nimport img3 from \"./assets/img/clients/client-3.png\";\r\nimport img4 from \"./assets/img/clients/client-4.png\";\r\nimport img5 from \"./assets/img/clients/client-5.png\";\r\nimport img6 from \"./assets/img/clients/client-6.png\";\r\nimport img7 from \"./assets/img/clients/client-7.png\";\r\nimport img8 from \"./assets/img/clients/client-8.png\";\r\n\r\nimport imgbanner from \"./img/banner.jpeg\";\r\nimport imgvideo from \"./assets1/img/about.jpg\";\r\nimport Slider from \"react-slick\";\r\nimport welcomecss from \"./welcome.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport FooterPage from \"../../../../../Footer/FooterPage\";\r\nimport \"./welcome.css\";\r\nimport headpng from \"./assets/img/head.png\";\r\n//import \"./assets1/js/main.js\";\r\n//import \"./assets/css/style.css\";  \r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\r\nimport Aos from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\";\r\nimport authHeader from \"../../../../../../services/authHeader\";\r\n\r\nexport default function Welcome() {\r\n  const settings = {\r\n    slidesToShow: 4,\r\n    slideToScroll: 1,\r\n    autoplay: true,\r\n    autoplaySpeed: 1500,\r\n    arrows: false,\r\n    dots: false,\r\n    pauseOnHover: false,\r\n    responsive: [\r\n      {\r\n        breakpoint: 768,\r\n        settings: {\r\n          slidesToShow: 4,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 520,\r\n        settings: {\r\n          slidesToShow: 2,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  useEffect(() => {\r\n    Aos.init({ duration: 2000 });\r\n  }, []);\r\n\r\n  const [timerDays, setTimerDays] = useState(\"00\");\r\n  const [timerHours, setTimerHours] = useState(\"00\");\r\n  const [timerMinutes, setTimerMinutes] = useState(\"00\");\r\n  const [timerSeconds, setTimerSeconds] = useState(\"00\");\r\n\r\n  let interval = useRef();\r\n  const startTimer = () => {\r\n    const countdownDate = new Date(\"May 30 2021 00:00:00\").getTime();\r\n    interval = setInterval(() => {\r\n      const now = new Date().getTime();\r\n      const distance = countdownDate - now;\r\n\r\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n      const hours = Math.floor(\r\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      );\r\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n      if (distance < 0) {\r\n        //stop timer\r\n        clearInterval(interval.current);\r\n      } else {\r\n        //update timer\r\n        setTimerDays(days);\r\n        setTimerHours(hours);\r\n        setTimerMinutes(minutes);\r\n        setTimerSeconds(seconds);\r\n      }\r\n    }, 1000);\r\n  };\r\n  // componentDidMount\r\n  useEffect(() => {\r\n    startTimer();\r\n    return () => {\r\n      clearInterval(interval.current);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"landing\">\r\n        <div className={welcomecss.s1}>\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-6 d-flex flex-column justify-content-center pt-4 pt-lg-0 order-2 order-lg-1\">\r\n                <div className={welcomecss.s10}>\r\n                  <h1>La <span>1<span>ère</span></span> Edition du Forum Virtuel de L’Université Ibn Tofail</h1>\r\n                  <h5>Sous le thème</h5>\r\n                  <h2>Le rôle du digitale à l’université pour une meilleur ouverture des lauréats & étudiants</h2>\r\n                  <div className={welcomecss.dlgflex}>\r\n                    <a href=\"#about\" className={welcomecss.btngetstarted}>Plus de détails</a>\r\n                    <a href=\"https://www.youtube.com/watch?v=jDDaplaOz7Q\" className={welcomecss.btnwatchvideo} data-vbtype=\"video\" data-autoplay=\"true\"> Regarder la vidéo <i className=\"far fa-play-circle\"></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-lg-6 order-1 order-lg-2 gtco-feature\">\r\n                <div className=\"container-fluid gtco-feature\">\r\n                  <div className={welcomecss.cover}>\r\n                    <div className={welcomecss.card}>\r\n\r\n\r\n                      <svg className={welcomecss.backbg} width=\"100%\" viewBox=\"0 0 900 700\">\r\n                        <defs>\r\n                          <linearGradient id=\"PSgrad_01\" x1=\"64.279%\" x2=\"0%\" y1=\"76.604%\" y2=\"0%\">\r\n                            <stop offset=\"0%\" stop-color=\"rgb(250,236,246)\" stop-opacity=\"1\" />\r\n                            <stop offset=\"100%\" stop-color=\"rgb(250,236,246)\" stop-opacity=\"1\" />\r\n                          </linearGradient>\r\n                        </defs>\r\n                        <path fill-rule=\"evenodd\" opacity=\"0.102\" fill=\"url(#PSgrad_01)\"\r\n                          d=\"M616.656,2.494 L89.351,98.948 C19.867,111.658 -16.508,176.639 7.408,240.130 L122.755,546.348 C141.761,596.806 203.597,623.407 259.843,609.597 L697.535,502.126 C748.221,489.680 783.967,441.432 777.751,392.742 L739.837,95.775 C732.096,35.145 677.715,-8.675 616.656,2.494 Z\" />\r\n                      </svg>\r\n\r\n                      <svg className=\"svg2\" width=\"100%\" viewBox=\"0 0 700 500\">\r\n                        <clipPath id=\"clip-path\">\r\n                          <path d=\"M89.479,0.180 L512.635,25.932 C568.395,29.326 603.115,76.927 590.357,129.078 L528.827,380.603 C518.688,422.048 472.661,448.814 427.190,443.300 L73.350,400.391 C32.374,395.422 -0.267,360.907 -0.002,322.064 L1.609,85.154 C1.938,36.786 40.481,-2.801 89.479,0.180 Z\"></path>\r\n                        </clipPath>\r\n\r\n                        <image clip-path=\"url(#clip-path)\" href={imgbanner} width=\"100%\"\r\n                          height=\"465\" class=\"svg__image\"></image>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <section id=\"cliens\" className=\"cliens\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-12 col-md-14 col-16 d-flex align-items-center justify-content-center\">\r\n                <img src={headpng} class=\"img-fluid\" alt=\"\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section id=\"about1\" className=\"about\">\r\n          <div className=\"container\" data-aos=\"fade-up\">\r\n            <div className=\"section-titleleft\">\r\n              <h2>L'université en chiffre</h2>\r\n            </div>\r\n            <div className=\"row justify-content-end\">\r\n              <div className=\"col-lg-11\">\r\n                <div className=\"row justify-content-end\">\r\n                  <div className=\"col-lg-3 col-md-5 col-6 d-md-flex align-items-md-stretch\">\r\n                    <div className=\"count-box py-5\">\r\n                      <i className=\"icony icofont-university\"><AccountBalanceIcon /></i>\r\n                      <span data-toggle=\"counter-up\">11</span>\r\n                      <p>Etablissements</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-3 col-md-5 col-6 d-md-flex align-items-md-stretch\">\r\n                    <div className=\"count-box py-5\">\r\n                      <i className=\"icony icofont-building-alt\"><i class=\"far fa-building\"></i></i>\r\n                      <span data-toggle=\"counter-up\">8</span>\r\n                      <p>Centres</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-3 col-md-5 col-6 d-md-flex align-items-md-stretch\">\r\n                    <div className=\"count-box pb-5 pt-0 pt-lg-5\">\r\n                      <i className=\"icony icofont-teacher\"><i class=\"fas fa-user-tie\"></i></i>\r\n                      <span data-toggle=\"counter-up\">620</span>\r\n                      <p>Engeignants</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-3 col-md-5 col-6 d-md-flex align-items-md-stretch\">\r\n                    <div className=\"count-box pb-5 pt-0 pt-lg-5\">\r\n                      <i className=\"icony icofont-group\"> <GroupIcon /></i>\r\n\r\n                      <span data-toggle=\"counter-up\">63458</span>\r\n                      <p>Etudiants</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n\r\n              <div className=\"col-lg-6 video-box align-self-baseline\">\r\n                <img src={imgvideo} className=\"img-fluid\" alt=\"\" />\r\n                <a href=\"https://www.youtube.com/watch?v=jDDaplaOz7Q\" className=\"venobox play-btn mb-4\" data-vbtype=\"video\" data-autoplay=\"true\"></a>\r\n              </div>\r\n\r\n              <div className=\"col-lg-6 pt-3 pt-lg-0 content\">\r\n                <div className=\"section-title\">\r\n                  <h2>Présentation</h2>\r\n                </div>\r\n                <p>La première édition du Forum Virtuel de l’Université Ibn Tofail est l’occasion de rapprocher le monde académique au monde professionnel, ainsi contribuer à renforcer le rôle de l’université dans son environnement.</p>\r\n                <p>Cette organisation en mode virtuel, est un témoignage de l’adoption de l’université des moyens digital pour à la fois faciliter aux entreprises et l’étudiant cette rencontre, qui pourrait être une préparation aux versions présentielles organisées par les\r\n                  différents établissements de l’Université Ibn Tofail.</p>\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </section>\r\n        <section id=\"our-values\" className=\"our-values\">\r\n          <div className=\"container\">\r\n            <div className=\"section-title\">\r\n              <h2>Espaces </h2>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6 d-flex align-items-stretch\">\r\n                <div className=\"card\" >\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title\"><a href=\"\">E-Entreprise</a></h5>\r\n                    <p className=\"card-text\">Lorem ipsum dolor sit amet, consectetur elit, sed do eiusmod tempor ut labore et dolore magna aliqua.</p>\r\n                    <a className=\"cta-btn\" href=\"#\">Se connecter</a><br />\r\n                    <a className=\"cta-btn2\" href=\"#\">S'inscrire</a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6 d-flex align-items-stretch mt-4 mt-md-0\">\r\n                <div className=\"card1\"  >\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title\"><a href=\"\">E-Etudiant</a></h5>\r\n                    <p className=\"card-text\">Sed ut perspiciatis unde omnis iste natus error sit voluptatem doloremque laudantium, totam rem.</p>\r\n                    <a className=\"cta-btn\" href=\"#\">Se connecter</a><br />\r\n                    <a className=\"cta-btn2\" href=\"#\">S'inscrire</a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section id=\"clients\" className=\"wow fadeInUp\">\r\n          <div className=\"container\">\r\n            <div className=\"section-header\">\r\n              <h2>Partenaires académiques</h2>\r\n            </div>\r\n\r\n            <Slider {...settings}>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img2} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img3} alt=\"\" />\r\n\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img4} alt=\"\" />\r\n\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img5} alt=\"\" />\r\n\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img6} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img7} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img8} alt=\"\" />\r\n\r\n              </div>\r\n\r\n            </Slider>\r\n\r\n          </div>\r\n        </section>\r\n\r\n\r\n        <section id=\"clients\" className=\"wow fadeInUp\">\r\n          <div className=\"container\">\r\n            <div className=\"section-header\">\r\n              <h2>Partenaires Professionnels</h2>\r\n            </div>\r\n\r\n            <Slider {...settings}>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img2} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img3} alt=\"\" />\r\n\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img4} alt=\"\" />\r\n\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img5} alt=\"\" />\r\n\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img6} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img7} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img8} alt=\"\" />\r\n\r\n              </div>\r\n\r\n            </Slider>\r\n            <div className=\"owl-carousel clients-carousel\">\r\n              <img src=\"assets/img/clients/client-1.png\" alt=\"\" />\r\n              <img src=\"assets/img/clients/client-2.png\" alt=\"\" />\r\n              <img src=\"assets/img/clients/client-3.png\" alt=\"\" />\r\n              <img src=\"assets/img/clients/client-4.png\" alt=\"\" />\r\n              <img src=\"assets/img/clients/client-5.png\" alt=\"\" />\r\n              <img src=\"assets/img/clients/client-6.png\" alt=\"\" />\r\n              <img src=\"assets/img/clients/client-7.png\" alt=\"\" />\r\n              <img src=\"assets/img/clients/client-8.png\" alt=\"\" />\r\n            </div>\r\n\r\n          </div>\r\n        </section>\r\n        <div className=\"parallax\">\r\n          <div className=\"parallax_box\">\r\n            <div\r\n              className=\"parallax_timer\"\r\n              data-aos=\"fade-up\"\r\n              data-aos-duration=\"1000\"\r\n            >\r\n              <p className=\"number\">{timerDays}</p>\r\n              <p className=\"text\">day</p>\r\n            </div>\r\n            <div\r\n              className=\"parallax_timer\"\r\n              data-aos=\"fade-up\"\r\n              data-aos-duration=\"1300\"\r\n            >\r\n              <p className=\"number\">{timerHours}</p>\r\n              <p className=\"text\">hour</p>\r\n            </div>\r\n            <div\r\n              className=\"parallax_timer\"\r\n              data-aos=\"fade-up\"\r\n              data-aos-duration=\"1600\"\r\n            >\r\n              <p className=\"number\">{timerMinutes}</p>\r\n              <p className=\"text\">minute</p>\r\n            </div>\r\n            <div\r\n              className=\"parallax_timer\"\r\n              data-aos=\"fade-up\"\r\n              data-aos-duration=\"1900\"\r\n            >\r\n              <p className=\"number\">{timerSeconds}</p>\r\n              <p className=\"text\">seconde</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"footer\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6 col-lg-3\">\r\n                <div className=\"footer-contact\">\r\n                  <h2>HNA LOGO</h2>\r\n                  <hr />\r\n                  <p className=\"pp\">Le Forum Annuel Virtuel De L’Université Ibn Tofail est d’une part un moment d’échange et d’ouverture de l’université sur son environnement régional et national, puis d’autre part, c’est un moment ou le lauréat et étudiant se positionne et se projette.</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-3\">\r\n                <div className=\"footer-link\">\r\n                  <h2>Allez </h2>\r\n                  <a href=\"\"><i class=\"fas fa-caret-right\"></i>Accueil</a>\r\n                  <a href=\"\"><i class=\"fas fa-caret-right\"></i>A propos</a>\r\n                  <a href=\"\"><i class=\"fas fa-caret-right\"></i>Partenaires</a>\r\n                  <a href=\"\"><i class=\"fas fa-caret-right\"></i>Contactez-nous</a>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-3\">\r\n                <div className=\"footer-link\">\r\n                  <h2>Liens utiles</h2>\r\n                  <a href=\"\"><i class=\"fas fa-caret-right\"></i>Université IBN tofail </a>\r\n                  <a href=\"\"><i class=\"fas fa-caret-right\"></i>ENSA- KENITRA</a>\r\n                  <a href=\"\"><i class=\"fas fa-caret-right\"></i>ENCG- KENITRA</a>\r\n                  <a href=\"\"><i class=\"fas fa-caret-right\"></i>FSJES- KENITRA</a>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-3\">\r\n                <div className=\"footer-contact\">\r\n                  <h2>Nous contacter</h2>\r\n                  <p><i className=\"fa fa-map-marker-alt\"></i>&nbsp;Campus universitaire, B.P 241, Kénitra - 14 000 - Maroc</p>\r\n                  <p><i className=\"fa fa-phone-alt\"></i>&nbsp;+212 6 29 10 21 64</p>\r\n                  <p><i className=\"fa fa-envelope\"></i>&nbsp;info@example.com</p>\r\n\r\n                  <h2 className=\"hh\">Nous suivre</h2>\r\n                  <div className=\"footer-social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter\"></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f\"></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-youtube\"></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram\"></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\"></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"container footer-menu\">\r\n            <div className=\"f-menu\">\r\n              <a href=\"\">E-ENTREPRISE</a>\r\n              <a href=\"\">E-ETUDIANT</a>\r\n            </div>\r\n          </div>\r\n          <div className=\"container copyright\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <p>&copy; <a href=\"#\">2021 FORUM Université IBN TOFAIL</a>. Tous droits réservés</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Title.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCv.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\SetCompany.jsx",["520"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Stepper from \"@material-ui/core/Stepper\";\r\nimport Step from \"@material-ui/core/Step\";\r\nimport StepLabel from \"@material-ui/core/StepLabel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Link } from \"react-router-dom\";\r\n//CHILDREN\r\nimport CompanyImage from \"./AddCompany Components/CompanyImage\";\r\nimport AboutCompany from \"./AddCompany Components/AboutCompany\";\r\n\r\n// import \"../css/cv.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n  },\r\n  layout: {\r\n    width: \"90% !important\",\r\n    marginLeft: theme.spacing(2),\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n      width: 600,\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\",\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    width: \"auto\",\r\n    marginBottom: theme.spacing(3),\r\n    padding: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n      marginTop: theme.spacing(6),\r\n      marginBottom: theme.spacing(6),\r\n      padding: theme.spacing(3),\r\n    },\r\n  },\r\n  stepper: {\r\n    padding: theme.spacing(3, 0, 5),\r\n  },\r\n  buttons: {\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(3),\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n}));\r\nconst steps = [\"Photo\", \"Company Info\"];\r\n\r\nexport default function SetCompany(props) {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = useState(0);\r\n\r\n  const user = props?.user;\r\n\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  const handleNext = () => {\r\n    setActiveStep(activeStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep(activeStep - 1);\r\n  };\r\n\r\n  function getStepContent(step) {\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <CompanyImage\r\n            onChange={(value) => {\r\n              setToggle(value);\r\n            }}\r\n            id={user?.id}\r\n          />\r\n        );\r\n      case 1:\r\n        return (\r\n          <AboutCompany\r\n            user={user}\r\n            onChange={(value) => {\r\n              setToggle(value);\r\n            }}\r\n          />\r\n        );\r\n      default:\r\n        throw new Error(\"Unknown step\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          {/* <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n            Title\r\n          </Typography> */}\r\n          <div className=\"d-flex flex-wrap\">\r\n            <Stepper\r\n              activeStep={activeStep}\r\n              orientation=\"vertical\"\r\n              className={classes.stepper}\r\n            >\r\n              {steps.map((label) => (\r\n                <Step key={label}>\r\n                  <StepLabel>{label}</StepLabel>\r\n                </Step>\r\n              ))}\r\n            </Stepper>\r\n            <React.Fragment>\r\n              {activeStep === steps.length ? (\r\n                <React.Fragment>\r\n                  <div className=\"flex-fill mt-4 ml-4\">\r\n                    <Typography variant=\"h5\" gutterBottom>\r\n                      Thank you for your Time.\r\n                    </Typography>\r\n                  </div>\r\n\r\n                  <Typography variant=\"subtitle1\" decor>\r\n                    The info you have input is now visible to everyone\r\n                  </Typography>\r\n                  <div className={classes.buttons}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      onClick={() => window.location.reload()}\r\n                    >\r\n                      View your Profile\r\n                    </Button>\r\n                  </div>\r\n                </React.Fragment>\r\n              ) : (\r\n                <React.Fragment>\r\n                  <div className=\"flex-fill mt-4  d-flex justify-content-center\">\r\n                    {getStepContent(activeStep)}\r\n                  </div>\r\n                  <div className={classes.buttons}>\r\n                    {activeStep !== 0 && (\r\n                      <Button\r\n                        onClick={() => {\r\n                          handleBack();\r\n                          setToggle(true);\r\n                        }}\r\n                        className={classes.button}\r\n                      >\r\n                        Back\r\n                      </Button>\r\n                    )}\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      disabled={!toggle}\r\n                      onClick={() => {\r\n                        handleNext();\r\n                        setToggle(false);\r\n                      }}\r\n                      className={classes.button}\r\n                    >\r\n                      {activeStep === steps.length - 1 ? \"Confirm\" : \"Next\"}\r\n                    </Button>\r\n                  </div>\r\n                </React.Fragment>\r\n              )}\r\n            </React.Fragment>\r\n          </div>\r\n        </Paper>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Feed\\ProfileInfo\\ProfileInfo.jsx",["521","522"],"import React from \"react\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction ProfileInfo({ id, name, company, role, image }) {\r\n  const history = useHistory();\r\n  const handleClick = () => {\r\n  };\r\n  function capitalizeTheFirstLetterOfEachWord(words) {\r\n    var separateWord = words?.toLowerCase().split(\" \");\r\n    for (var i = 0; i < separateWord?.length; i++) {\r\n      separateWord[i] =\r\n        separateWord[i]?.charAt(0).toUpperCase() +\r\n        separateWord[i]?.substring(1);\r\n    }\r\n    return separateWord?.join(\" \");\r\n  }\r\n\r\n  return (\r\n    <div className={styles.profile_info} onClick={handleClick}>\r\n      {role == 1 ? (\r\n        <Avatar className={styles.image} src={image} />\r\n      ) : (\r\n        <Avatar className={`${styles.image} ${styles.square}`} src={image} />\r\n      )}\r\n\r\n      {role === 1 && (\r\n        <h5>\r\n          {capitalizeTheFirstLetterOfEachWord(name)} - <span>Etudiant</span>\r\n        </h5>\r\n      )}\r\n      {role === 3 && (\r\n        <h5>\r\n          {capitalizeTheFirstLetterOfEachWord(company)} -{\" \"}\r\n          <span>Entreprise</span>\r\n        </h5>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileInfo;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Sidebar\\MessageConversation\\MessageConversation.jsx",["523"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport styles from './MessageConversation.module.css'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nfunction MessageConversation({ isActive, name, image, message, lastDate, onClick }) {\r\n    const [active, setActive] = useState(false)\r\n    useMemo(() => {\r\n        setActive(isActive ? styles.active : \"\")\r\n    }, [isActive]);\r\n    return (\r\n        <div onClick={onClick} className={`${styles.container} ${active}`}>\r\n            <Avatar className={styles.avatar} alt={name} src={image} />\r\n            <div className={styles.infos}>\r\n                <h4>{name}</h4>\r\n                <h6>{message}</h6>\r\n                <div className={styles.date}>{lastDate}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageConversation\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Footer\\FooterPage.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\AddCompany Components\\CompanyImage.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\AddCompany Components\\AboutCompany.jsx",["524","525"],"import React, { useState, initialState, useEffect } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// import \"../../css/cv.css\";\r\nimport Input from \"react-phone-number-input/input\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport CompanySocials from \"./CompanySocials\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../../services/authHeader\";\r\nimport userService from \"../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  route: {\r\n    width: \"55%\",\r\n  },\r\n}));\r\n\r\nconst About = (props) => {\r\n  // MATERIAL UI STYLING AL3ABD\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClick = (e) => {\r\n    const errors1 = [];\r\n    if (address.length === 0 || city.length === 0)\r\n      errors1.push(\"Adrress cannot be empty\");\r\n    if (!number) errors1.push(\"Number cannot be empty\");\r\n    if (number?.length < 11)\r\n      errors1.push(\"Your number should be like 0663-123123\");\r\n    if (bio?.length === 0) errors1.push(\"Bio must not be empty\");\r\n    if (errors1.length > 0) {\r\n      setMessage(errors1);\r\n      setTimeout(setOpen(true), 500);\r\n      return 0;\r\n    }\r\n    upload(e);\r\n    setTimeout(setOpen(true), 500);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n    setSuccessful(false);\r\n  };\r\n\r\n  const [bio, setBio] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const [social, setSocials] = useState({});\r\n\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(initialState);\r\n\r\n  const [flag, setFlag] = useState(initialState);\r\n  const [id, setId] = useState();\r\n\r\n  useEffect(() => {\r\n    async function getUserData() {\r\n      await userService.getUserData().then((response) => {\r\n        setFlag(response?.data?.cv?.flag);\r\n        setId(response?.data?.id);\r\n      });\r\n    }\r\n    getUserData();\r\n  }, []);\r\n\r\n  const handleAddressChange = (e) => {\r\n    const value = e.target.value;\r\n    setAddress(value);\r\n  };\r\n\r\n  const handleCityChange = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (e) => {\r\n    const value = e;\r\n    setNumber(value);\r\n  };\r\n\r\n  const handleBioChange = (e) => {\r\n    setBio(e.target.value);\r\n  };\r\n\r\n  const upload = (e) => {\r\n    const socials = JSON.stringify(social);\r\n    userService.uploadAboutCompany(\r\n      address,\r\n      city,\r\n      number,\r\n      bio,\r\n      socials).then(\r\n        (response) => {\r\n          if (!flag) {\r\n            userService.flagCompany(id)\r\n          }\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    <div className={classes.route}>\r\n      <form>\r\n        <div className=\"form-group row\">\r\n          <label for=\"number\" className=\"col-sm-2 col-form-label\">\r\n            Enterprise location:\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            {\" \"}\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"Address\"\r\n              value={address}\r\n              onChange={handleAddressChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-sm-2\">\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"City\"\r\n              value={city}\r\n              onChange={handleCityChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row\">\r\n          <label for=\"example-tel-input\" class=\"col-sm-2 col-form-label\">\r\n            Telephone :\r\n          </label>\r\n          <div className=\"col-sm-5\">\r\n            <Input\r\n              className=\"form-control mt-2\"\r\n              country=\"MA\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              value={number}\r\n              placeholder=\"Number\"\r\n              onChange={handleNumberChange}\r\n              id=\"example-tel-input\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"bio\" class=\"col-sm-2 col-form-label\">\r\n            Enterprise Bio:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            className=\"inputs form-control col-sm-12 mt-2\"\r\n            rows=\"4\"\r\n            name=\"bio\"\r\n            id=\"comment\"\r\n            maxLength=\"400\"\r\n            placeholder=\"Bio\"\r\n            style={{\r\n              backgroundColor: \"#f3f2ef\",\r\n              resize: \"none\",\r\n            }}\r\n            value={bio}\r\n            onChange={handleBioChange}\r\n          ></textarea>\r\n        </div>\r\n        <CompanySocials onChange={(value) => setSocials(value)} />\r\n        <div className={classes.root + \" btnholder\"}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={(e) => {\r\n              props.onChange(true);\r\n              handleClick();\r\n            }}\r\n          >\r\n            UPLOAD\r\n          </Button>\r\n          <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert\r\n              onClose={handleClose}\r\n              severity={successful ? \"success\" : \"error\"}\r\n            >\r\n              {typeof message == \"string\"\r\n                ? message\r\n                : message?.map((message1) => (\r\n                  <span>\r\n                    -{message1}\r\n                    <br />\r\n                  </span>\r\n                ))}\r\n            </Alert>\r\n          </Snackbar>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default About;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\AddCompany Components\\CompanySocials.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Award.jsx",["526","527","528"],"import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../../services/authHeader\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport userService from \"../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  textfield: {\r\n    marginTop: \"10px\",\r\n    marginRight: \"1vw\",\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: \"40vw\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(20),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  button: {\r\n    margin: \"1vw 1vh\",\r\n    justifyContent: \"center\",\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst Award = (props) => {\r\n  //POST STATES\r\n  const [organizer, setOrganizer] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [position, setPosition] = useState(\"\");\r\n\r\n  // STYLE STATES\r\n  const [open, setOpen] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  // RESPONSE STATES\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [data, setData] = useState();\r\n\r\n  //MAKESTYLES\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getAward();\r\n      setData(result.data);\r\n    };\r\n    props.onChange(true);\r\n    fetchData();\r\n  }, [successful]);\r\n\r\n  const handleOrganizer = (e) => {\r\n    setOrganizer(e.target.value);\r\n  };\r\n  const handleName = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n  const handlePosition = (e) => {\r\n    setPosition(e.target.value);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  const upload = () => {\r\n    const errors = [];\r\n    if (organizer.length === 0) errors.push(\"Fields must not be empty.\\n\");\r\n    if (name.length === 0) errors.push(\"Fields must not be empty.\\n\");\r\n    if (!position.match(\"^[0-9]+$\")) errors.push(\"Position must be a number.\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    setModalShow(false);\r\n    userService.uploadAward(organizer, name, position)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setOrganizer(\"\");\r\n    setName(\"\");\r\n    setPosition(\"\");\r\n  };\r\n\r\n  const deleteById = (id) => {\r\n    userService.deleteAward(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Button\r\n          onClick={() => setModalShow(true)}\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          size=\"medium\"\r\n          startIcon={\r\n            <AddCircleOutlinedIcon\r\n              style={{\r\n                maxWidth: \"30px\",\r\n                maxHeight: \"30px\",\r\n                minWidth: \"30px\",\r\n                minHeight: \"30px\",\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Modal\r\n          show={modalShow}\r\n          color=\"primary\"\r\n          onHide={() => setModalShow(false)}\r\n          size=\"md\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"center\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Organizer\"\r\n                    value={organizer}\r\n                    onChange={handleOrganizer}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Name\"\r\n                    value={name}\r\n                    onChange={handleName}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Position\"\r\n                    value={position}\r\n                    onChange={handlePosition}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert severity=\"error\">{message}</Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                upload();\r\n                setSuccessful(false);\r\n              }}\r\n            >\r\n              Upload\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"simple table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Organizer</TableCell>\r\n                <TableCell>Competition Name</TableCell>\r\n                <TableCell>Position</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data?.map((obj) => (\r\n                <TableRow key={obj}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {obj.organizer}\r\n                  </TableCell>\r\n                  <TableCell>{obj.name}</TableCell>\r\n                  <TableCell>{obj.position}</TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <DeleteIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setTimeout(deleteById(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Award;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Education.jsx",["529","530","531","532"],"import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../../services/authHeader\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport userService from \"../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  textfield: {\r\n    marginTop: \"10px\",\r\n    marginRight: \"1vw\",\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: \"60vw\",\r\n  },\r\n  dates: {\r\n    paddingTop: \"10px\",\r\n    marginLeft: \"2vw\",\r\n    width: \"60%\",\r\n    outline: \"none\",\r\n  },\r\n  checkbox: {\r\n    paddingTop: \"40px\",\r\n    marginLeft: \"5px\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(20),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  button: {\r\n    margin: \"1vw 1vh\",\r\n    justifyContent: \"center\",\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst FormModal = (props) => {\r\n  //POST STATES\r\n  let [dateStart, setStartDate] = useState(new Date());\r\n  let [dateEnd, setEndDate] = useState(new Date());\r\n  const [school, setSchool] = useState(\"\");\r\n  const [diploma, setDiploma] = useState(\"\");\r\n  const [field, setField] = useState(\"\");\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  // STYLE STATES\r\n  const [open, setOpen] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  // RESPONSE STATES\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [data, setData] = useState();\r\n\r\n  //MAKESTYLES\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getEducation();\r\n      if (result.data.length != 0) {\r\n        props.onChange(true);\r\n      }\r\n      setData(result.data);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n\r\n  const handleStart = (date) => {\r\n    setStartDate(date);\r\n  };\r\n  const handleChecked = (e) => {\r\n    setChecked(!checked);\r\n  };\r\n  const handleEnd = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  const handleSchool = (e) => {\r\n    setSchool(e.target.value);\r\n  };\r\n  const handleDiploma = (e) => {\r\n    setDiploma(e.target.value);\r\n  };\r\n  const handleField = (e) => {\r\n    setField(e.target.value);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  const upload = () => {\r\n    const errors = [];\r\n    if (school.length === 0) errors.push(\"School must not be empty\");\r\n\r\n    if (dateEnd <= dateStart && !checked) {\r\n      errors.push(\"End date can't be inferior or equal to start date!\");\r\n    }\r\n    if (diploma.length === 0) errors.push(\"Diploma must not be empty\");\r\n    if (field.length === 0) errors.push(\"field must not be emepty\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    setModalShow(false);\r\n    dateStart = dateStart.toString().substring(4, 15);\r\n    if (checked) {\r\n      dateEnd = \"Present\";\r\n    } else {\r\n      dateEnd = dateEnd.toString().substring(4, 15);\r\n    }\r\n    console.log(dateEnd);\r\n    setChecked(false);\r\n\r\n    userService\r\n      .uploadEducation(school, diploma, dateStart, dateEnd, field)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setSchool(\"\");\r\n    setDiploma(\"\");\r\n    setField(\"\");\r\n    setStartDate(new Date());\r\n    setEndDate(new Date());\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteEducation(id).then((response) => {\r\n      setSuccessful(true);\r\n      setSuccessful(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Button\r\n          onClick={() => setModalShow(true)}\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          size=\"medium\"\r\n          style={{ marginBottom: \"10px\" }}\r\n          startIcon={\r\n            <AddCircleOutlinedIcon\r\n              style={{\r\n                maxWidth: \"30px\",\r\n                maxHeight: \"30px\",\r\n                minWidth: \"30px\",\r\n                minHeight: \"30px\",\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Modal\r\n          show={modalShow}\r\n          color=\"primary\"\r\n          onHide={() => setModalShow(false)}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"space-between\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"School\"\r\n                    value={school}\r\n                    onChange={handleSchool}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Diploma\"\r\n                    value={diploma}\r\n                    onChange={handleDiploma}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Field\"\r\n                    value={field}\r\n                    onChange={handleField}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"Start Date\"\r\n                      value={dateStart}\r\n                      onChange={handleStart}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                      disabled={checked ? true : false}\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"End Date\"\r\n                      value={dateEnd}\r\n                      onChange={handleEnd}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <FormControlLabel\r\n                      className={classes.checkbox}\r\n                      value=\"end\"\r\n                      control={\r\n                        <Checkbox\r\n                          checked={checked}\r\n                          onChange={handleChecked}\r\n                          color=\"primary\"\r\n                        />\r\n                      }\r\n                      label=\"Present\"\r\n                      labelPlacement=\"end\"\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert\r\n                onClose={handleClose}\r\n                severity={successful ? \"success\" : \"error\"}\r\n              >\r\n                {typeof message == \"string\"\r\n                  ? message\r\n                  : message?.map((message1) => (\r\n                      <span>\r\n                        -{message1}\r\n                        <br />\r\n                      </span>\r\n                    ))}\r\n              </Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                upload();\r\n                setSuccessful(false);\r\n              }}\r\n            >\r\n              Upload\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n        {data && (\r\n          <TableContainer component={Paper}>\r\n            <Table\r\n              className={classes.table}\r\n              size=\"small\"\r\n              aria-label=\"simple table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>School</TableCell>\r\n                  <TableCell>Diploma</TableCell>\r\n                  <TableCell>Start Date</TableCell>\r\n                  <TableCell>End Date</TableCell>\r\n                  <TableCell>Field</TableCell>\r\n                  <TableCell>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {data?.map((obj) => (\r\n                  <TableRow key={obj}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {obj.school}\r\n                    </TableCell>\r\n                    <TableCell>{obj.diploma}</TableCell>\r\n                    <TableCell>{obj.dateStart}</TableCell>\r\n                    <TableCell>{obj.dateEnd}</TableCell>\r\n                    <TableCell>{obj.field}</TableCell>\r\n\r\n                    <TableCell>\r\n                      <IconButton aria-label=\"delete\">\r\n                        <DeleteIcon\r\n                          style={{ color: \"#df4759\" }}\r\n                          onClick={() => {\r\n                            setTimeout(deleteById(obj.id), 500);\r\n                          }}\r\n                        />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default FormModal;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Experience.jsx",["533"],"import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport userService from \"../../../../../services/userService\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  textfield: {\r\n    marginTop: \"25px\",\r\n    marginRight: \"1vw\",\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: \"60vw\",\r\n  },\r\n  dates: {\r\n    paddingTop: \"10px\",\r\n    marginLeft: \"2vw\",\r\n    width: \"60%\",\r\n    outline: \"none\",\r\n  },\r\n  checkbox: {\r\n    paddingTop: \"40px\",\r\n    marginLeft: \"5px\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(20),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  button: {\r\n    margin: \"1vw 1vh\",\r\n    justifyContent: \"center\",\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst FormModal = (props) => {\r\n  //POST STATES\r\n  let [dateStart, setStartDate] = useState(new Date());\r\n  let [dateEnd, setEndDate] = useState(new Date());\r\n  const [occupation, setOccupaton] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n  const [checked, setChecked] = useState(false);\r\n  const [isProject, setIsProject] = useState(false);\r\n\r\n  // STYLE STATES\r\n  const [open, setOpen] = useState(false);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [modal2Show, setModal2Show] = useState(false);\r\n\r\n  // RESPONSE STATES\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [data, setData] = useState();\r\n\r\n  //MAKESTYLES\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getExperience();\r\n      setData(result.data);\r\n    };\r\n    fetchData();\r\n    props.onChange(true);\r\n  }, [successful]);\r\n\r\n  const handleStart = (date) => {\r\n    setStartDate(date);\r\n  };\r\n  const handleChecked = (e) => {\r\n    setChecked(!checked);\r\n  };\r\n\r\n  const handleEnd = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  const handleOccupation = (e) => {\r\n    setOccupaton(e.target.value);\r\n  };\r\n  const handleCompany = (e) => {\r\n    setCompany(e.target.value);\r\n  };\r\n  const handleDescription = (e) => {\r\n    setDescription(e.target.value);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  const upload = () => {\r\n    const errors = [];\r\n    if (occupation.length === 0) errors.push(\"Occupation must not be empty\");\r\n\r\n    if (dateEnd <= dateStart && !checked) {\r\n      errors.push(\"End date can't be inferior or equal to start date!\");\r\n    }\r\n    if (company.length === 0) errors.push(\"Company must not be empty\");\r\n    if (description.length === 0) errors.push(\"Description must not be emepty\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    setModalShow(false);\r\n    dateStart = dateStart.toString().substring(4, 15);\r\n    if (checked) {\r\n      dateEnd = \"Present\";\r\n    } else {\r\n      dateEnd = dateEnd.toString().substring(4, 15);\r\n    }\r\n    setChecked(false);\r\n    userService\r\n      .uploadExperience(\r\n        occupation,\r\n        company,\r\n        dateStart,\r\n        dateEnd,\r\n        description,\r\n        isProject\r\n      )\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setCompany(\"\");\r\n    setOccupaton(\"\");\r\n    setDescription(\"\");\r\n    setStartDate(new Date());\r\n    setEndDate(new Date());\r\n  };\r\n\r\n  const deleteById = (id) => {\r\n    userService.deleteExperience(id).then((response) => {\r\n      setSuccessful(true);\r\n      setSuccessful(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <ButtonGroup\r\n          color=\"primary\"\r\n          aria-label=\"contained  primary button group\"\r\n          style={{ marginBottom: \"10px\" }}\r\n        >\r\n          <Button\r\n            onClick={() => {\r\n              setModalShow(true);\r\n              setIsProject(false);\r\n            }}\r\n            startIcon={\r\n              <AddCircleOutlinedIcon\r\n                style={{\r\n                  maxWidth: \"30px\",\r\n                  maxHeight: \"30px\",\r\n                  minWidth: \"30px\",\r\n                  minHeight: \"30px\",\r\n                }}\r\n              />\r\n            }\r\n          >\r\n            Ajoutez une experience\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setModal2Show(true);\r\n              setIsProject(true);\r\n              setCompany(\" \");\r\n            }}\r\n          >\r\n            Ou un projet que vous avez réalisé\r\n          </Button>\r\n        </ButtonGroup>\r\n        <Modal\r\n          show={modalShow}\r\n          color=\"primary\"\r\n          onHide={() => setModalShow(false)}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"space-between\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Company\"\r\n                    value={company}\r\n                    onChange={handleCompany}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Occupation\"\r\n                    value={occupation}\r\n                    onChange={handleOccupation}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Description\"\r\n                    value={description}\r\n                    onChange={handleDescription}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"Start Date\"\r\n                      value={dateStart}\r\n                      onChange={handleStart}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                      disabled={checked ? true : false}\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"End Date\"\r\n                      value={dateEnd}\r\n                      onChange={handleEnd}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <FormControlLabel\r\n                      className={classes.checkbox}\r\n                      value=\"end\"\r\n                      control={\r\n                        <Checkbox\r\n                          checked={checked}\r\n                          onChange={handleChecked}\r\n                          color=\"primary\"\r\n                        />\r\n                      }\r\n                      label=\"Present\"\r\n                      labelPlacement=\"end\"\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert\r\n                onClose={handleClose}\r\n                severity={successful ? \"success\" : \"error\"}\r\n              >\r\n                {typeof message == \"string\"\r\n                  ? message\r\n                  : message?.map((message1) => (\r\n                      <span>\r\n                        -{message1}\r\n                        <br />\r\n                      </span>\r\n                    ))}\r\n              </Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                upload();\r\n                setSuccessful(false);\r\n              }}\r\n            >\r\n              Upload\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Modal\r\n          show={modal2Show}\r\n          color=\"primary\"\r\n          onHide={() => setModal2Show(false)}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"space-between\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Titre\"\r\n                    value={occupation}\r\n                    onChange={handleOccupation}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Description\"\r\n                    value={description}\r\n                    onChange={handleDescription}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"Start Date\"\r\n                      value={dateStart}\r\n                      onChange={handleStart}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                      disabled={checked ? true : false}\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"End Date\"\r\n                      value={dateEnd}\r\n                      onChange={handleEnd}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert\r\n                onClose={handleClose}\r\n                severity={successful ? \"success\" : \"error\"}\r\n              >\r\n                {typeof message == \"string\"\r\n                  ? message\r\n                  : message?.map((message1) => (\r\n                      <span>\r\n                        -{message1}\r\n                        <br />\r\n                      </span>\r\n                    ))}\r\n              </Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                upload();\r\n                setSuccessful(false);\r\n                setModal2Show(false);\r\n              }}\r\n            >\r\n              Upload\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"simple table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Company</TableCell>\r\n                <TableCell>Occupation (Titre)</TableCell>\r\n                <TableCell>Start Date</TableCell>\r\n                <TableCell>End Date</TableCell>\r\n                <TableCell>Description</TableCell>\r\n                <TableCell>Action</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data?.map((obj) => (\r\n                <TableRow key={obj}>\r\n                  <TableCell>{obj.company}</TableCell>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {obj.occupation}\r\n                  </TableCell>\r\n                  <TableCell>{obj.dateStart}</TableCell>\r\n                  <TableCell>{obj.dateEnd}</TableCell>\r\n                  <TableCell>{obj.description}</TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <DeleteIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setTimeout(deleteById(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default FormModal;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\About.jsx",["534","535","536"],"import React, { useState, initialState, useEffect } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Input from \"react-phone-number-input/input\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport Socials from \"./Socials\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../../services/authHeader\";\r\nimport \"../SetCv.css\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport userService from \"../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  route: {\r\n    width: \"55%\",\r\n  },\r\n}));\r\n\r\nconst About = (props) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  // const [fullAbout, setFullAbout] = useState();\r\n\r\n  const handleClick = (e) => {\r\n    const errors1 = [];\r\n    if (firstName.length === 0 || lastName.length === 0)\r\n      errors1.push(\"Name cannot be empty\");\r\n    if (address.length === 0 || city.length === 0)\r\n      errors1.push(\"Adrress cannot be empty\");\r\n    if (!number) errors1.push(\"Number cannot be empty\");\r\n    if (number?.length < 11)\r\n      errors1.push(\"Your number should be like 0663-123123\");\r\n    if (bio?.length === 0) errors1.push(\"Bio must not be empty\");\r\n    if (interests?.length === 0) errors1.push(\"Interests must not be empty\");\r\n    if (errors1.length > 0) {\r\n      setMessage(errors1);\r\n      setTimeout(setOpen(true), 500);\r\n      return 0;\r\n    }\r\n    upload(e);\r\n    setTimeout(setOpen(true), 500);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n    setSuccessful(false);\r\n  };\r\n\r\n  // DATA TO UPLOAD AL3ABD\r\n  const [bio, setBio] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const [social, setSocials] = useState({});\r\n  const [interests, setInterests] = useState(\"\");\r\n  const [domaine, setDomaine] = useState(\"\");\r\n  const [gottenName, setGottenName] = useState(\"\");\r\n\r\n  // RESPONSE MESSAGE AL3ABD\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(initialState);\r\n\r\n  const handleFirstNameChange = (e) => {\r\n    const value = e.target.value;\r\n    setFirstName(value);\r\n  };\r\n\r\n  const handleLastNameChange = (e) => {\r\n    const value = e.target.value;\r\n    setLastName(value);\r\n  };\r\n\r\n  const handleAddressChange = (e) => {\r\n    const value = e.target.value;\r\n    setAddress(value);\r\n  };\r\n\r\n  const handleCityChange = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (e) => {\r\n    const value = e;\r\n    setNumber(value);\r\n  };\r\n\r\n  const handleBioChange = (e) => {\r\n    setBio(e.target.value);\r\n  };\r\n\r\n  const handleInterestsChange = (e) => {\r\n    const value = e.target.value;\r\n    setInterests(value);\r\n  };\r\n\r\n  const handleDomaineChange = (e) => {\r\n    setDomaine(e.target.value);\r\n  };\r\n\r\n  const upload = (e) => {\r\n    const socials = JSON.stringify(social);\r\n    userService\r\n      .uploadAbout(\r\n        firstName,\r\n        lastName,\r\n        address,\r\n        city,\r\n        number,\r\n        bio,\r\n        socials,\r\n        interests,\r\n        domaine\r\n      )\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          props.onChange(true);\r\n          setSuccessful(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n\r\n  useEffect(() => {\r\n    // userService.getAbout().then((response) => {\r\n    //   setFullAbout(response?.data?.cv);\r\n    //   console.log(\"hh\");\r\n    //   console.log(response?.data?.cv);\r\n    // });\r\n    userService.getUserData().then((res) => {\r\n      setGottenName(res?.data?.name);\r\n      setFirstName(\r\n        res?.data?.name\r\n          ?.split(\" \")\r\n          .slice(0, 1)\r\n          ?.map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n          .join(\" \")\r\n      );\r\n      setLastName(\r\n        res?.data?.name\r\n          ?.split(\" \")\r\n          ?.slice(1)\r\n          ?.map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n          .join(\" \")\r\n      );\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.route}>\r\n      <form>\r\n        <div className=\"form-group row align-items-center\">\r\n          <label for=\"number\" className=\"col-sm-2  col-form-label\">\r\n            Full Name:\r\n          </label>\r\n          <div className=\"col-sm-5 mt-2 \">\r\n            <input\r\n              className=\"form-control mr-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"First Name\"\r\n              defaultValue={firstName}\r\n              value={firstName\r\n                .split(\" \")\r\n                .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                .join(\" \")}\r\n              onChange={handleFirstNameChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-sm-5 mt-2\">\r\n            <input\r\n              className=\"form-control mr-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              id=\"number\"\r\n              placeholder=\"Last Name\"\r\n              defaultValue={lastName}\r\n              value={lastName\r\n                .split(\" \")\r\n                .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                .join(\" \")}\r\n              onChange={handleLastNameChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row align-items-center\">\r\n          <label for=\"number\" className=\"col-sm-2 col-form-label\">\r\n            Address:\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            {\" \"}\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"Address\"\r\n              value={address}\r\n              onChange={handleAddressChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-sm-2\">\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"City\"\r\n              value={city}\r\n              onChange={handleCityChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group row align-items-center\">\r\n          <label for=\"example-tel-input\" class=\"col-sm-2 col-form-label\">\r\n            Telephone :\r\n          </label>\r\n          <div className=\"col-sm-5\">\r\n            <Input\r\n              className=\"form-control mt-2\"\r\n              country=\"MA\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              value={number}\r\n              placeholder=\"Number\"\r\n              onChange={handleNumberChange}\r\n              id=\"example-tel-input\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row align-items-center\">\r\n          <label for=\"example-tel-input\" class=\"col-sm-2 col-form-label\">\r\n            Votre domaine d'étude :\r\n          </label>\r\n          <div className=\"col-sm-5\">\r\n            <Form.Control as=\"select\" onChange={handleDomaineChange}>\r\n              <option value=\"Informatique\">Informatique</option>\r\n              <option value=\"Electrique\">Electrique</option>\r\n              <option value=\"Mécanique\">Mécanique</option>\r\n              <option value=\"Economie\">Economie</option>\r\n            </Form.Control>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"bio\" class=\"col-sm-2 col-form-label\">\r\n            Bio:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            className=\"inputs form-control col-sm-12 mt-2\"\r\n            rows=\"4\"\r\n            name=\"bio\"\r\n            id=\"comment\"\r\n            maxLength=\"400\"\r\n            placeholder=\"Bio\"\r\n            style={{\r\n              backgroundColor: \"#f3f2ef\",\r\n              resize: \"none\",\r\n            }}\r\n            value={bio}\r\n            onChange={handleBioChange}\r\n          ></textarea>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"interests\" class=\"col-sm-2 col-form-label\">\r\n            Interests:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            className=\"inputs form-control col-sm-12\"\r\n            rows=\"4\"\r\n            name=\"interests\"\r\n            id=\"comment\"\r\n            maxLength=\"400\"\r\n            placeholder=\"What interests you?\"\r\n            style={{\r\n              backgroundColor: \"#f3f2ef\",\r\n              resize: \"none\",\r\n            }}\r\n            value={interests}\r\n            onChange={handleInterestsChange}\r\n          ></textarea>\r\n        </div>\r\n        <Socials onChange={(value) => setSocials(value)} />\r\n        <div className={classes.root + \" btnholder\"}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={(e) => {\r\n              handleClick();\r\n            }}\r\n          >\r\n            UPLOAD\r\n          </Button>\r\n          <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert\r\n              onClose={handleClose}\r\n              severity={successful ? \"success\" : \"error\"}\r\n            >\r\n              {typeof message == \"string\"\r\n                ? message\r\n                : message?.map((message1) => (\r\n                    <span>\r\n                      -{message1}\r\n                      <br />\r\n                    </span>\r\n                  ))}\r\n            </Alert>\r\n          </Snackbar>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default About;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Image.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\Other.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Socials.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\NormalLanguage.jsx",["537","538","539"],"import React, { useState, useEffect } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"react-select\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport authHeader from \"../../../../../../services/authHeader\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst statusOptions = [\r\n  { value: \"French\", label: \"French\" },\r\n  { value: \"English\", label: \"English\" },\r\n  { value: \"Arabic\", label: \"Arabic\" },\r\n  { value: \"Spanish\", label: \"Spanish\" },\r\n  { value: \"Autre\", label: \"Autre\" }\r\n];\r\n\r\nconst marks = [\r\n  {\r\n    value: 1,\r\n    label: \"1\",\r\n  },\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n];\r\n\r\nconst SkillForm = (props) => {\r\n  //skill comp\r\n  const [data, setData] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [name, setName] = useState(\"French\");\r\n  const [skillValue, setSkillValue] = useState();\r\n  const [isOther, setIsOther] = useState(false)\r\n  let selected = [];\r\n  const [disabled, setDisabled] = useState(false);\r\n\r\n  //snackbar\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getNormalLang();\r\n      setData(result.data);\r\n      setSuccessful(false);\r\n      console.log(result);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n  const handleChange = (e) => {\r\n    const value = e.target.value\r\n    setName(value)\r\n    setDisabled(false)\r\n  }\r\n  const upload = () => {\r\n    const value = skillValue;\r\n    userService.uploadNormalLang(name, value)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setMessage(\"Added\");\r\n          handleClick();\r\n          setDisabled(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteNormalLang(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setMessage(\"Deleted!\");\r\n        handleClick();\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const skillPicker = (e) => {\r\n    if (e.value == \"Autre\") {\r\n      setIsOther(true)\r\n    }\r\n    else {\r\n      setIsOther(false);\r\n      setName(e.value);\r\n      setDisabled(false);\r\n    }\r\n  };\r\n\r\n  const skValue = (value) => {\r\n    setSkillValue(value);\r\n  };\r\n\r\n  const singleOption = ({ data }) => (\r\n    <div className=\"input-select\">\r\n      <div className=\"input-select__single-value d-flex justify-content-center\">\r\n        <span style={{ fontSize: \"18px\" }}>&nbsp;{data.label}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container d-flex flex-row\">\r\n      <FormControl className=\"col-5\">\r\n        <div className=\"form\">\r\n          <div className=\"form-group col-md-10 \">\r\n            <label>Languages :</label>\r\n            <Select\r\n              defaultValue={statusOptions[0]}\r\n              options={statusOptions}\r\n              onChange={skillPicker}\r\n              components={{ SingleValue: singleOption }}\r\n              isOptionDisabled={(option) =>\r\n                selected.indexOf(option.value) !== -1\r\n              }\r\n            />\r\n          </div>\r\n          {isOther &&\r\n            <div className=\"col-md-10 mb-3\">\r\n              <TextField id=\"standard-basic\" label=\"Your Other Skill\" required onChange={handleChange} />\r\n            </div>\r\n          }\r\n          <div className=\"col-md-10\">\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Proficiency:\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={5}\r\n              getAriaValueText={skValue}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks={marks}\r\n              min={1}\r\n              max={10}\r\n            />\r\n          </div>\r\n          <div className=\"row col-md-10 justify-content-around\">\r\n            <div className=\"col-3\">\r\n              <Button\r\n                onClick={upload}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                disabled={disabled}\r\n                startIcon={\r\n                  <AddCircleOutlinedIcon\r\n                    style={{\r\n                      maxWidth: \"30px\",\r\n                      maxHeight: \"30px\",\r\n                      minWidth: \"30px\",\r\n                      minHeight: \"30px\",\r\n                    }}\r\n                  />\r\n                }\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </FormControl>\r\n      <div className=\"responsive-table flex-fill\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <th>Skill</th>\r\n            <th>Proficiency</th>\r\n            <th>Delete</th>\r\n          </thead>\r\n          <tbody>\r\n            {data?.map((lng) => (\r\n              <tr className=\"mt-10\">\r\n                <td>{lng.name}</td>\r\n                <td>{lng.value}</td>\r\n                <td>\r\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\r\n                    <DeleteIcon\r\n                      style={{ color: \"#df4759\" }}\r\n                      className=\"pt-0\"\r\n                      onClick={() => {\r\n                        setTimeout(deleteById(lng.id), 500);\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillForm;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\Software.jsx",["540","541","542"],"import React, { useState, useEffect } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"react-select\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport authHeader from \"../../../../../../services/authHeader\";\r\nimport axios from \"axios\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport userService from \"../../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst statusOptions = [\r\n  { value: \"Photoshop\", label: \"Photoshop\", icon: \"fab fa-fonticons\" },\r\n  { value: \"Git\", label: \"Git\", icon: \"fab fa-git-alt\" },\r\n  { value: \"Wordpress\", label: \"Wordpress\", icon: \"fab fa-wordpress\" },\r\n  {\r\n    value: \"Autre\",\r\n    label: \"Autre\",\r\n    icon: \"\",\r\n  },\r\n];\r\n\r\nconst marks = [\r\n  {\r\n    value: 1,\r\n    label: \"1\",\r\n  },\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n];\r\n\r\nconst SkillForm = (props) => {\r\n  //skill comp\r\n  // const classes = useStyles();\r\n  const [data, setData] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [name, setName] = useState(\"Photoshop\");\r\n  const [skillValue, setSkillValue] = useState();\r\n  const [icon, setIcon] = useState(\"fab fa-fonticons fa-2x\");\r\n  let selected = [];\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [isOther, setIsOther] = useState(false)\r\n\r\n  //snackbar\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleChange = (e) => {\r\n    const value = e.target.value\r\n    setName(value)\r\n    setIcon(' ')\r\n    setDisabled(false)\r\n  }\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getSoftware();\r\n      setData(result.data);\r\n      setSuccessful(false);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n  const upload = () => {\r\n    const value = skillValue;\r\n    userService.uploadSoftware(name, value, icon)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setMessage(\"Added\");\r\n          handleClick();\r\n          setDisabled(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteSoftware(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setMessage(\"Deleted!\");\r\n        handleClick();\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const skillPicker = (e) => {\r\n    if (e.value == \"Autre\") {\r\n      setIsOther(true);\r\n    }\r\n    else {\r\n      setIsOther(false)\r\n      setName(e.value);\r\n      setIcon(e.icon);\r\n      setDisabled(false);\r\n    }\r\n\r\n  };\r\n  // const deleteByType = (type) => {\r\n  //   setSkills(skills.filter((skill) => skill.type !== type));\r\n  //   setSelected(selected.filter((select) => select !== type));\r\n  //   setDisabled(!disabled);\r\n  // };\r\n  const skValue = (value) => {\r\n    setSkillValue(value);\r\n  };\r\n  const singleOption = ({ data }) => (\r\n    <div className=\"input-select\">\r\n      <div className=\"input-select__single-value d-flex justify-content-center\">\r\n        <i className={data.icon} />\r\n        &nbsp; &nbsp;\r\n        <span style={{ fontSize: \"18px\" }}>&nbsp;{data.label}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container d-flex flex-row\">\r\n      <FormControl className=\"col-5\">\r\n        <div className=\"form\">\r\n          <div className=\"form-group col-md-10 \">\r\n            <label>Software :</label>\r\n            <Select\r\n              defaultValue={statusOptions[0]}\r\n              options={statusOptions}\r\n              onChange={skillPicker}\r\n              components={{ SingleValue: singleOption }}\r\n              isOptionDisabled={(option) =>\r\n                selected.indexOf(option.value) !== -1\r\n              }\r\n            />\r\n          </div>\r\n          {isOther &&\r\n            <div className=\"col-md-10 mb-3\">\r\n              <TextField id=\"standard-basic\" label=\"Your Other Skill\" required onChange={handleChange} />\r\n            </div>\r\n          }\r\n          <div className=\"col-md-10\">\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Proficiency:\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={5}\r\n              getAriaValueText={skValue}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks={marks}\r\n              min={1}\r\n              max={10}\r\n            />\r\n          </div>\r\n          <div className=\"row col-md-10 justify-content-around\">\r\n            <div className=\"col-3\">\r\n              <Button\r\n                onClick={() => {\r\n                  upload();\r\n                }}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                disabled={disabled}\r\n                startIcon={\r\n                  <AddCircleOutlinedIcon\r\n                    style={{\r\n                      maxWidth: \"30px\",\r\n                      maxHeight: \"30px\",\r\n                      minWidth: \"30px\",\r\n                      minHeight: \"30px\",\r\n                    }}\r\n                  />\r\n                }\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </FormControl>\r\n      <div className=\"responsive-table flex-fill\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <th>Skill / Software</th>\r\n            <th>Proficiency</th>\r\n            <th>Delete</th>\r\n          </thead>\r\n          <tbody>\r\n            {data?.map((dev) => (\r\n              <tr className=\"mt-10\">\r\n                <td>\r\n                  <i class={dev.icon} />{\" \"}\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.name}</span>\r\n                </td>\r\n                <td>\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.value}</span>\r\n                </td>\r\n                <td>\r\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\r\n                    <DeleteIcon\r\n                      className=\"pt-0\"\r\n                      style={{ color: \"#df4759\" }}\r\n                      onClick={() => {\r\n                        setTimeout(deleteById(dev.id), 500);\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillForm;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\DevLanguage.jsx",["543","544","545","546"],"import React, { useState, useEffect, initialState } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"react-select\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport authHeader from \"../../../../../../services/authHeader\";\r\nimport axios from \"axios\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport userService from \"../../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst statusOptions = [\r\n  { value: \"HTML5\", label: \"HTML5\", icon: \"fab fa-html5\" },\r\n  { value: \"CSS3\", label: \"CSS3\", icon: \"fab fa-css3-alt\" },\r\n  { value: \"Java\", label: \"Java\", icon: \"fab fa-java\" },\r\n  { value: \"JavaScript\", label: \"JavaScript\", icon: \"fab fa-js-square\" },\r\n  { value: \"PHP\", label: \"PHP\", icon: \"fab fa-php\" },\r\n  { value: \"Laravel\", label: \"Laravel\", icon: \"fab fa-laravel\" },\r\n  { value: \"Python\", label: \"Python\", icon: \"fab fa-python\" },\r\n  { value: \"Angular\", label: \"Angular\", icon: \"fab fa-angular\" },\r\n  { value: \"ReactJS\", label: \"ReactJS\", icon: \"fab fa-react\" },\r\n  { value: \"Autre\", label: \"Autre\" }\r\n];\r\n\r\nconst marks = [\r\n  {\r\n    value: 1,\r\n    label: \"1\",\r\n  },\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n];\r\n\r\nconst SkillForm = (props) => {\r\n  const [data, setData] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [name, setName] = useState(\"HTML5\");\r\n  const [skillValue, setSkillValue] = useState();\r\n  const [isOther, setIsOther] = useState(false)\r\n  const [icon, setIcon] = useState(\"fab fa-html5 fa-2x\");\r\n  let selected = [];\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [flag, setFlag] = useState(initialState);\r\n  const [id, setId] = useState();\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getDevLang();\r\n      setData(result.data);\r\n      setSuccessful(false);\r\n      console.log(result);\r\n    };\r\n    fetchData();\r\n    async function getUserData() {\r\n      await userService.getUserData().then((response) => {\r\n        setFlag(response?.data?.cv?.flag);\r\n        setId(response?.data?.id);\r\n      });\r\n    }\r\n    getUserData();\r\n  }, [successful]);\r\n\r\n  const upload = () => {\r\n    if (!flag) {\r\n      userService.flagStudent(id)\r\n    }\r\n    const value = skillValue;\r\n    userService.uploadDevLang(name, value, icon)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setMessage(\"Added\");\r\n          handleClick();\r\n          setDisabled(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteDevLang(id).then((response) => {\r\n      setSuccessful(true);\r\n      setMessage(\"Deleted!\");\r\n      handleClick();\r\n      setSuccessful(false);\r\n    });\r\n  };\r\n  const handleChange = (e) => {\r\n    const value = e.target.value\r\n    setName(value)\r\n    setIcon(' ')\r\n    setDisabled(false)\r\n  }\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const skillPicker = (e) => {\r\n    if (e.value == \"Autre\") {\r\n      setIsOther(true);\r\n    }\r\n    else {\r\n      setIsOther(false);\r\n      setName(e.value);\r\n      setIcon(e.icon);\r\n      setDisabled(false);\r\n    }\r\n\r\n  };\r\n\r\n  const skValue = (value) => {\r\n    setSkillValue(value);\r\n  };\r\n  const singleOption = ({ data }) => (\r\n    <div className=\"input-select\">\r\n      <div className=\"input-select__single-value d-flex justify-content-center\">\r\n        <i className={data.icon + \" fa-2x\"} />\r\n        &nbsp; &nbsp;\r\n        <span style={{ fontSize: \"18px\" }}>&nbsp;{data.label}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container d-flex flex-row\">\r\n      <FormControl className=\"col-5\">\r\n        <div className=\"form\">\r\n          <div className=\"form-group col-md-10 \">\r\n            <label>Developing Skills :</label>\r\n            <Select\r\n              defaultValue={statusOptions[0]}\r\n              options={statusOptions}\r\n              onChange={skillPicker}\r\n              components={{ SingleValue: singleOption }}\r\n              isOptionDisabled={(option) =>\r\n                selected.indexOf(option.value) !== -1\r\n              }\r\n            />\r\n          </div>\r\n          {isOther &&\r\n            <div className=\"col-md-10 mb-3\">\r\n              <TextField id=\"standard-basic\" label=\"Your Other Skill\" required onChange={handleChange} />\r\n            </div>\r\n          }\r\n          <div className=\"col-md-10\">\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Proficiency:\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={5}\r\n              getAriaValueText={skValue}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks={marks}\r\n              min={1}\r\n              max={10}\r\n            />\r\n          </div>\r\n          <div className=\"row col-md-10 justify-content-around\">\r\n            <div className=\"col-3\">\r\n              <Button\r\n                onClick={() => {\r\n                  upload();\r\n                }}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                disabled={disabled}\r\n                startIcon={\r\n                  <AddCircleOutlinedIcon\r\n                    style={{\r\n                      maxWidth: \"30px\",\r\n                      maxHeight: \"30px\",\r\n                      minWidth: \"30px\",\r\n                      minHeight: \"30px\",\r\n                    }}\r\n                  />\r\n                }\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </FormControl>\r\n      <div className=\"responsive-table flex-fill\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <th>Language</th>\r\n            <th>Proficiency</th>\r\n            <th>Delete</th>\r\n          </thead>\r\n          <tbody>\r\n            {data?.map((dev) => (\r\n              <tr className=\"mt-10\">\r\n                <td>\r\n                  {\r\n                    dev.icon == ' ' ? (<><i class={`${dev.icon} fa-x`} />{\" \"}</>) : (<><i class={`${dev.icon} fa-2x`} />{\" \"}</>)\r\n                  }\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.name}</span>\r\n                </td>\r\n                <td>\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.value}</span>\r\n                </td>\r\n                <td>\r\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\r\n                    <DeleteIcon\r\n                      className=\"pt-0\"\r\n                      style={{ color: \"#df4759\" }}\r\n                      onClick={() => {\r\n                        setTimeout(deleteById(dev.id), 500);\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillForm;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\Post\\Post.jsx",["547","548","549","550","551","552","553","554"],"import { Avatar } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport React, { useEffect, useState, initialState, useRef } from \"react\";\r\nimport \"./Post.scss\";\r\nimport PublicIcon from \"@material-ui/icons/Public\";\r\nimport InputOption from \"../InputOption/InputOption\";\r\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport userService from \"../../../../services/userService\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport axios from \"axios\";\r\nimport DeleteTwoToneIcon from \"@material-ui/icons/DeleteTwoTone\";\r\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport Comment from \"./Comments/Comment/Comment\";\r\nimport \"./Comments/AddComment/AddComment.scss\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport ThumbUpAltOutlinedIcon from \"@material-ui/icons/ThumbUpAltOutlined\";\r\nimport ModalB from \"react-bootstrap/Modal\";\r\nimport ModalImage from \"react-modal-image\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  small: {\r\n    width: theme.spacing(3),\r\n    height: theme.spacing(3),\r\n  },\r\n  large: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: \"70vw\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction Post({\r\n  user,\r\n  postId,\r\n  message,\r\n  timestamp,\r\n  ownerId,\r\n  role,\r\n  username,\r\n  currentUserId,\r\n  ownerImage,\r\n  imageType,\r\n  onChange,\r\n}) {\r\n  const [input, setInput] = useState(message);\r\n  const [owner, setOwner] = useState();\r\n  const [commentInput, setCommentInput] = useState(\"\");\r\n  const classes = useStyles();\r\n  const [comments, setComments] = useState([]);\r\n\r\n  const [successful, setSuccessful] = useState(true);\r\n  const [uploadMessage, setUploadMessage] = useState(\"\");\r\n\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [toggleComment, setToggleComment] = useState(false);\r\n\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [toggleLike, setToggleLike] = useState(false);\r\n  const [shownLikes, setShownLikes] = useState(initialState);\r\n  const [likes, setLikes] = useState(initialState);\r\n  const [snackOpen, setSnackOpen] = useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  const handleSnackClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setSnackOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   const getPosts = async () => {\r\n  //     const result = await axios.get(\"http://localhost:5000/api/cv/getPosts\");\r\n  //     setRes(result?.data);\r\n  //     arrayForHoldingPosts = result?.data?.slice(0, 10);\r\n  //     setPostsToShow(res?.slice(0, 10));\r\n  //   };\r\n  //   getPosts();\r\n  // }, [refresh]);\r\n\r\n  useEffect(() => {\r\n    userService.getUserById(ownerId).then((response) => {\r\n      setOwner(response?.data);\r\n    });\r\n    async function bzaf() {\r\n      const result = await userService.getLikesByPost(postId);\r\n      setLikes(result?.data);\r\n      setShownLikes(result?.data?.length);\r\n      setRefresh(true);\r\n      for (let i = 0; i < result?.data?.length; i++) {\r\n        if (user?.id === result?.data[i]?.likerId) {\r\n          setToggleLike(true);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    bzaf();\r\n    userService.getPostComments(postId)\r\n      .then((response) => {\r\n        setComments(response?.data);\r\n        setToggleComment(!toggleComment);\r\n      });\r\n    setToggleComment(!toggleComment); //problem here\r\n  }, [refresh]);\r\n\r\n  const body = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <h2 id=\"simple-modal-title\">Edit your Post</h2>\r\n      <p id=\"simple-modal-description\">\r\n        <textarea\r\n          className=\"inputs form-control col-sm-12 mt-2\"\r\n          rows=\"4\"\r\n          maxLength=\"1000\"\r\n          placeholder=\"Post\"\r\n          style={{\r\n            backgroundColor: \"#f3f2ef\",\r\n            resize: \"none\",\r\n          }}\r\n          defaultValue={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n        ></textarea>\r\n        <Button\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            updatePost(postId);\r\n          }}\r\n        >\r\n          Update\r\n        </Button>\r\n      </p>\r\n      {/* <SimpleModal /> */}\r\n    </div>\r\n  );\r\n\r\n  //modalconst [modalShow, setModalShow] = useState(false);\r\n\r\n  // useEffect(() => {\r\n  //   async function getImageById() {\r\n  //     if (role === 1)\r\n  //       await userService.getImageById(ownerId).then((response) => {\r\n  //         setImaage(`data:image/png;base64,${response?.data}`);\r\n  //       });\r\n  //     else if (role === 3)\r\n  //       await userService.getCompanyImageById(ownerId).then((response) => {\r\n  //         setImaage(`data:image/png;base64,${response?.data}`);\r\n  //       });\r\n  //   }\r\n  //   getImageById();\r\n  // }, []);\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <ModalB\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        dialogClassName=\"image_modal\"\r\n      >\r\n        <ModalB.Body className=\"image_modal_body\">\r\n          <img\r\n            className=\"post_image\"\r\n            onClick={() => setModalShow(true)}\r\n            src={\r\n              userService.imageLink +\r\n              postId +\r\n              \".\" +\r\n              imageType\r\n            }\r\n          />\r\n        </ModalB.Body>\r\n      </ModalB>\r\n    );\r\n  }\r\n  const deleteById = (id) => {\r\n    userService.deletePostById(id).then((res) => {\r\n      // window.location.reload();\r\n      onChange(true);\r\n      onChange(false);\r\n    });\r\n  };\r\n\r\n  const updatePost = (id) => {\r\n    const post = {\r\n      message: input,\r\n      role: user?.roles[0]?.id,\r\n    };\r\n    if (user?.roles[0]?.id === 1) {\r\n      userService.updateStudentPost(id, post).then(\r\n        (response) => {\r\n          setSuccessful(true);\r\n          setSnackOpen(true);\r\n          setUploadMessage(\"Post Updated!\");\r\n          onChange(true);\r\n          onChange(false);\r\n          setOpen(false);\r\n        },\r\n        (error) => {\r\n          setSuccessful(false);\r\n          setSnackOpen(true);\r\n          setUploadMessage(\"Could not update post!\");\r\n        }\r\n      );\r\n    } else if (user?.roles[0]?.id === 3) {\r\n      userService.updateCompanyPost(id, post).then(\r\n        (response) => {\r\n          setSuccessful(true);\r\n          setSnackOpen(true);\r\n          setUploadMessage(\"Post Updated!\");\r\n          onChange(true);\r\n          onChange(false);\r\n          setOpen(false);\r\n        },\r\n        (error) => {\r\n          setSuccessful(false);\r\n          setSnackOpen(true);\r\n          setUploadMessage(\"Could not update post!\");\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const uploadComment = () => {\r\n    const errors = [];\r\n    if (commentInput.length === 0) errors.push(\"Comment cannot be empty.\\n\");\r\n    if (errors.length !== 0) {\r\n      setUploadMessage(errors);\r\n      setSuccessful(false);\r\n      setSnackOpen(true);\r\n      return 0;\r\n    }\r\n\r\n    if (user?.roles[0]?.id === 1) {\r\n      let comment = {\r\n        message: commentInput,\r\n        role: 1,\r\n      }\r\n      userService.uploadStudentComment(postId, comment)\r\n        .then(\r\n          (response) => {\r\n            setRefresh(!refresh);\r\n            setSnackOpen(true);\r\n            setSuccessful(true);\r\n            setCommentInput(\"\");\r\n            setUploadMessage(\"Comment uploaded!\");\r\n          },\r\n          (error) => {\r\n            setSuccessful(false);\r\n            setSnackOpen(true);\r\n            setUploadMessage(\"Could not upload comment!\");\r\n          }\r\n        );\r\n    } else if (user?.roles[0]?.id === 3) {\r\n      let comment = {\r\n        message: commentInput,\r\n        role: 3,\r\n      }\r\n      userService.uploadCompanyComment\r\n        .then((response) => {\r\n          // window.location.reload();\r\n          setRefresh(!refresh);\r\n          setSnackOpen(true);\r\n          setSuccessful(true);\r\n          setCommentInput(\"\");\r\n          setUploadMessage(\"Message uploaded!\");\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    const keyCode = e.which || e.keyCode;\r\n    if (keyCode === 13 && !e.shiftKey) {\r\n      e.preventDefault();\r\n      uploadComment(postId);\r\n    }\r\n  };\r\n\r\n  const likePost = (postId) => {\r\n    userService.likePost(postId, user?.id)\r\n      .then(\r\n        (response) => {\r\n          setToggleLike(true);\r\n          setShownLikes(shownLikes + 1);\r\n          // onChange(true);\r\n          // onChange(false);\r\n        },\r\n        (error) => {\r\n          setSuccessful(false);\r\n          setUploadMessage(\"Couldn't like post!\");\r\n          setSnackOpen(true);\r\n        }\r\n      );\r\n  };\r\n  const unlikePost = (postId) => {\r\n    userService.unlikePost(postId)\r\n      .then(\r\n        (response) => {\r\n          setShownLikes(shownLikes - 1);\r\n          setToggleLike(false);\r\n        },\r\n        (error) => {\r\n          setSuccessful(false);\r\n          setUploadMessage(\"404 Couldn't unlike post!\");\r\n          setSnackOpen(true);\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    // <div className=\"post_and_comment\">\r\n    <div className=\"post\">\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        {body}\r\n      </Modal>\r\n\r\n      <div className=\"post_header\">\r\n        <Link to={`/view/${ownerId}`} style={{ textDecoration: \"none\" }}>\r\n          {role === 1 && (\r\n            <Avatar\r\n              src={\r\n                userService.imageLink + owner?.cv?.image\r\n              }\r\n              className={classes.large}\r\n            />\r\n          )}\r\n          {role === 3 && (\r\n            <Avatar\r\n              variant=\"square\"\r\n              src={\r\n                userService.imageLink +\r\n                owner?.company?.companyImage\r\n              }\r\n              className={classes.large}\r\n            />\r\n          )}\r\n          {/* <Avatar src={imaage} className={classes.large} /> */}\r\n        </Link>\r\n        <div className=\"post_info\">\r\n          <h2 style={{ display: \"flex\" }}>\r\n            {role === 1 &&\r\n              owner?.cv?.about?.firstName + \" \" + owner?.cv?.about?.lastName}\r\n            {role === 3 && owner?.company?.aboutCompany?.name}\r\n          </h2>\r\n          <p>{`@${username}  - ${role === 1 ? \"Student\" : \"Enterprise\"}`}</p>\r\n          <span></span>\r\n          <div className=\"post_date\">\r\n            <h6 style={{ color: \"#000\" }}>{timestamp} &nbsp;</h6>\r\n            <PublicIcon className=\"global\" style={{ color: \"#000\" }} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n      <div className=\"post_body\">\r\n        <div className=\"post_message\">{message}</div>\r\n\r\n        {imageType && (\r\n          <ModalImage\r\n            className=\"post_image\"\r\n            small={\r\n              userService.imageLink + \"post\" +\r\n              postId +\r\n              \".\" +\r\n              imageType\r\n            }\r\n            large={\r\n              userService.imageLink + \"post\" +\r\n              postId +\r\n              \".\" +\r\n              imageType\r\n            }\r\n            alt=\"\"\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"post_stats\">\r\n        <p style={{ fontSize: \"13px\" }}>\r\n          {shownLikes} likes&nbsp;&nbsp;-&nbsp;&nbsp;\r\n          {comments?.length} comments\r\n        </p>\r\n      </div>\r\n      <div className=\"post_buttons\">\r\n        {toggleLike && (\r\n          <InputOption\r\n            Icon={ThumbUpIcon}\r\n            title=\"Like\"\r\n            color=\"blue\"\r\n            onClick={() => unlikePost(postId)}\r\n          />\r\n        )}{\" \"}\r\n        {/* dislike */}\r\n        {!toggleLike && (\r\n          <InputOption\r\n            Icon={ThumbUpAltOutlinedIcon}\r\n            title=\"Like\"\r\n            color=\"blue\"\r\n            onClick={() => likePost(postId)}\r\n          />\r\n        )}\r\n        {/* like */}\r\n        <InputOption\r\n          Icon={CommentIcon}\r\n          title=\"Comment\"\r\n          color=\"green\"\r\n          onClick={() => setToggleComment(!toggleComment)}\r\n        />\r\n        {/* {currentUserId !== ownerId && (\r\n            <InputOption Icon={ShareIcon} title=\"Share\" color=\"purple\" />\r\n          )} */}\r\n        {currentUserId === ownerId && (\r\n          <>\r\n            <InputOption\r\n              Icon={EditTwoToneIcon}\r\n              title=\"Edit\"\r\n              color=\"purple\"\r\n              onClick={handleOpen}\r\n            />\r\n            <InputOption\r\n              Icon={DeleteTwoToneIcon}\r\n              title=\"Delete\"\r\n              color=\"red\"\r\n              onClick={() => {\r\n                deleteById(postId);\r\n              }}\r\n            />\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {toggleComment && (\r\n        <>\r\n          {comments.length !== 0 && (\r\n            <div className=\"comments-header\">\r\n              <h4>Comments</h4>\r\n            </div>\r\n          )}\r\n          <div className=\"add-comment\">\r\n            <Avatar\r\n              src={\r\n                role === 1\r\n                  ? userService.imageLink + ownerImage\r\n                  : userService.imageLink + ownerImage\r\n              }\r\n              className={classes.large}\r\n            />\r\n            <textarea\r\n              rows=\"2\"\r\n              className=\"add-text-area\"\r\n              placeholder=\"Add a comment\"\r\n              value={commentInput}\r\n              onChange={(e) => setCommentInput(e.target.value)}\r\n              onKeyDown={handleKeyDown}\r\n            />\r\n\r\n            {/* <input\r\n            type=\"text\"\r\n            // rows=\"4\"\r\n            className=\"add-text-area\"\r\n            placeholder=\"Add a comment\"\r\n            value={commentInput}\r\n            onChange={(e) => setCommentInput(e.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n          /> */}\r\n          </div>\r\n          {commentInput && (\r\n            <Button\r\n              color=\"blue\"\r\n              variant=\"contained\"\r\n              className=\"toggleCommentButton\"\r\n              style={{ marginBottom: \"10px\" }}\r\n              onClick={() => uploadComment(postId)}\r\n            >\r\n              Publier {<SendIcon />}\r\n            </Button>\r\n          )}\r\n        </>\r\n      )}\r\n      {toggleComment &&\r\n        comments?.map((e, key) => (\r\n          <Comment\r\n            key={key}\r\n            onChange={() => {\r\n              setRefresh(!refresh);\r\n            }}\r\n            refresh={refresh}\r\n            user={user}\r\n            commentId={e?.id}\r\n            message={e?.message}\r\n            timestamp={e?.updatedAt.substring(0, 10)}\r\n            username={e?.ownerUsername}\r\n            firstName={e?.ownerFirstName}\r\n            lastName={e?.ownerLastName}\r\n            companyName={e?.companyName}\r\n            role={e?.role}\r\n            ownerId={e?.ownersId}\r\n            currentUserId={user?.id}\r\n            likes={e?.likes}\r\n            onChange={(value) => setRefresh(value)}\r\n          />\r\n        ))}\r\n      <Snackbar\r\n        open={snackOpen}\r\n        autoHideDuration={1500}\r\n        onClose={handleSnackClose}\r\n      >\r\n        <Alert\r\n          onClose={handleClose}\r\n          severity={successful ? \"success\" : \"error\"}\r\n        >\r\n          {uploadMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n      {toggleComment && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\",\r\n          }}\r\n        >\r\n          <Button\r\n            color=\"default\"\r\n            variant=\"outlined\"\r\n            className=\"toggleCommentButton\"\r\n            onClick={() => setToggleComment(!toggleComment)}\r\n          >\r\n            {<ExpandLessIcon />} Close\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\InputOption\\InputOption.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditImage.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCompany\\EditAboutCompany.jsx",["555"],"import React, { useState, initialState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// import \"../../css/cv.css\";\r\nimport Input from \"react-phone-number-input/input\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    fontSize: \"30\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  route: {\r\n    width: \"85%\",\r\n  },\r\n}));\r\n\r\nconst About = (props) => {\r\n  // MATERIAL UI STYLING AL3ABD\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClick = (e) => {\r\n    const errors1 = [];\r\n    if (address.length === 0 || city.length === 0)\r\n      errors1.push(\"Adrress cannot be empty\");\r\n    if (!number) errors1.push(\"Number cannot be empty\");\r\n    if (number?.length < 11)\r\n      errors1.push(\"Your number should be like 0663-123123\");\r\n    if (bio?.length === 0) errors1.push(\"Bio must not be empty\");\r\n    if (errors1.length > 0) {\r\n      setMessage(errors1);\r\n      setTimeout(setOpen(true), 500);\r\n      return 0;\r\n    }\r\n    update(e);\r\n    setTimeout(setOpen(true), 500);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n    setSuccessful(false);\r\n  };\r\n\r\n  const [bio, setBio] = useState(props?.data?.bio);\r\n  const [address, setAddress] = useState(props?.data?.address);\r\n  const [city, setCity] = useState(props?.data?.city);\r\n  const [number, setNumber] = useState(props?.data?.number);\r\n\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(initialState);\r\n\r\n  const handleAddressChange = (e) => {\r\n    const value = e.target.value;\r\n    setAddress(value);\r\n  };\r\n\r\n  const handleCityChange = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (e) => {\r\n    const value = e;\r\n    setNumber(value);\r\n  };\r\n\r\n  const handleBioChange = (e) => {\r\n    setBio(e.target.value);\r\n  };\r\n\r\n  const update = (e) => {\r\n    let about = {\r\n      address: address,\r\n      city: city,\r\n      number: number,\r\n      bio: bio,\r\n    };\r\n    userService.updateAboutCompany(props?.id, about)\r\n  };\r\n\r\n  return (\r\n    <div className={classes.route}>\r\n      <form>\r\n        <div className=\"form-group row  align-items-center\">\r\n          <label for=\"number\" className=\"col-1 col-form-label\">\r\n            Enterprise location:\r\n          </label>\r\n          <div className=\"col-7 mr-2\">\r\n            {\" \"}\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"Address\"\r\n              value={address}\r\n              onChange={handleAddressChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-2\">\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"City\"\r\n              value={city}\r\n              onChange={handleCityChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row  align-items-center\">\r\n          <label for=\"example-tel-input\" class=\"col-2 col-form-label\">\r\n            Telephone :\r\n          </label>\r\n          <div className=\"col-6\">\r\n            <Input\r\n              className=\"form-control mt-2\"\r\n              country=\"MA\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              value={number}\r\n              placeholder=\"Number\"\r\n              onChange={handleNumberChange}\r\n              id=\"example-tel-input\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group row  align-items-center\">\r\n          <label for=\"bio\" class=\"col-2 col-form-label\">\r\n            Enterprise Bio:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            className=\"inputs form-control col-sm-12 mt-2\"\r\n            rows=\"4\"\r\n            name=\"bio\"\r\n            id=\"comment\"\r\n            maxLength=\"400\"\r\n            placeholder=\"Bio\"\r\n            style={{\r\n              backgroundColor: \"#f3f2ef\",\r\n              resize: \"none\",\r\n            }}\r\n            value={bio}\r\n            onChange={handleBioChange}\r\n          ></textarea>\r\n        </div>\r\n        <div className={classes.root + \" btnholder\"}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={(e) => {\r\n              props.onChange(true);\r\n              handleClick();\r\n            }}\r\n          >\r\n            Edit\r\n          </Button>\r\n          <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert\r\n              onClose={handleClose}\r\n              severity={successful ? \"success\" : \"error\"}\r\n            >\r\n              {typeof message == \"string\"\r\n                ? message\r\n                : message?.map((message1) => (\r\n                  <span>\r\n                    -{message1}\r\n                    <br />\r\n                  </span>\r\n                ))}\r\n            </Alert>\r\n          </Snackbar>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default About;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\js\\cv.js",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditAwards.jsx",["556","557"],"import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  textfield: {\r\n    marginTop: \"10px\",\r\n    marginRight: \"1vw\",\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: \"39vw\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(20),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  button: {\r\n    margin: \"1vw 1vh\",\r\n    justifyContent: \"center\",\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst Award = (props) => {\r\n  //POST STATES\r\n  const [organizer, setOrganizer] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [position, setPosition] = useState(\"\");\r\n\r\n  // STYLE STATES\r\n  const [open, setOpen] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  // RESPONSE STATES\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [data, setData] = useState();\r\n\r\n  //MAKESTYLES\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getAward();\r\n      setData(result.data);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n\r\n  const handleOrganizer = (e) => {\r\n    setOrganizer(e.target.value);\r\n  };\r\n  const handleName = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n  const handlePosition = (e) => {\r\n    setPosition(e.target.value);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  const upload = () => {\r\n    const errors = [];\r\n    if (organizer.length === 0) errors.push(\"Fields must not be empty.\\n\");\r\n    if (name.length === 0) errors.push(\"Fields must not be empty.\\n\");\r\n    if (!position.match(\"^[0-9]+$\")) errors.push(\"Position must be a number.\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    // console.log(typeof parseInt(position));\r\n    setModalShow(false);\r\n    userService.uploadAward(organizer, name, position)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setOrganizer(\"\");\r\n    setName(\"\");\r\n    setPosition(\"\");\r\n  };\r\n\r\n  const deleteById = (id) => {\r\n    userService.deleteAward(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Button\r\n          onClick={() => setModalShow(true)}\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          size=\"medium\"\r\n          startIcon={\r\n            <AddCircleOutlinedIcon\r\n              style={{\r\n                maxWidth: \"30px\",\r\n                maxHeight: \"30px\",\r\n                minWidth: \"30px\",\r\n                minHeight: \"30px\",\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Modal\r\n          show={modalShow}\r\n          color=\"primary\"\r\n          onHide={() => setModalShow(false)}\r\n          size=\"md\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"center\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Organizer\"\r\n                    value={organizer}\r\n                    onChange={handleOrganizer}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Name\"\r\n                    value={name}\r\n                    onChange={handleName}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Position\"\r\n                    value={position}\r\n                    onChange={handlePosition}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert severity=\"error\">{message}</Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                upload();\r\n                setSuccessful(false);\r\n              }}\r\n            >\r\n              Upload\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"simple table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Organizer</TableCell>\r\n                <TableCell>Competition Name</TableCell>\r\n                <TableCell>Position</TableCell>\r\n                <TableCell>Delete</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data?.map((obj) => (\r\n                <TableRow key={obj}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {obj.organizer}\r\n                  </TableCell>\r\n                  <TableCell>{obj.name}</TableCell>\r\n                  <TableCell>{obj.position}</TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <DeleteIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setTimeout(deleteById(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Award;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditEducation.jsx",["558","559"],"import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  textfield: {\r\n    marginTop: \"10px\",\r\n    marginRight: \"1vw\",\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: \"54vw\",\r\n  },\r\n  dates: {\r\n    paddingTop: \"10px\",\r\n    marginLeft: \"5vw\",\r\n    width: \"60%\",\r\n    outline: \"none\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(20),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  button: {\r\n    margin: \"1vw 1vh\",\r\n    justifyContent: \"center\",\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst EditEducation = (props) => {\r\n  //POST STATES\r\n  let [dateStart, setStartDate] = useState(new Date());\r\n  let [dateEnd, setEndDate] = useState(new Date());\r\n  const [school, setSchool] = useState(\"\");\r\n  const [diploma, setDiploma] = useState(\"\");\r\n  const [field, setField] = useState(\"\");\r\n\r\n  // STYLE STATES\r\n  const [open, setOpen] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  // RESPONSE STATES\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // whole profile from parent\r\n  // const data = props.data;\r\n\r\n  //Get data to fill table\r\n  const [getRequest, setGetRequest] = useState();\r\n\r\n  //MAKESTYLES\r\n  const classes = useStyles();\r\n\r\n  //toggle to show update or upload\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  //currently editing education id\r\n  const [editId, setEditId] = useState();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getEducation()\r\n      setGetRequest(result.data);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n\r\n  const handleStart = (date) => {\r\n    setStartDate(date);\r\n  };\r\n\r\n  const handleEnd = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  const handleSchool = (e) => {\r\n    setSchool(e.target.value);\r\n  };\r\n  const handleDiploma = (e) => {\r\n    setDiploma(e.target.value);\r\n  };\r\n  const handleField = (e) => {\r\n    setField(e.target.value);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const upload = () => {\r\n    const errors = [];\r\n    if (school.length === 0) errors.push(\"Fields must not be empty\");\r\n    if (dateEnd <= dateStart) {\r\n      errors.push(\"End date can't be inferior or equal to start date!\");\r\n    }\r\n    if (diploma.length === 0) errors.push(\"Fields must not be empty\");\r\n    if (field.length === 0) errors.push(\"Fields must not be empty\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    setModalShow(false);\r\n    dateStart = dateStart.toString().substring(4, 15);\r\n    dateEnd = dateEnd.toString().substring(4, 15);\r\n    userService.uploadEducation(school, diploma, dateStart, dateEnd, field)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setSchool(\"\");\r\n    setDiploma(\"\");\r\n    setField(\"\");\r\n    setStartDate(new Date());\r\n    setEndDate(new Date());\r\n  };\r\n\r\n  const openUpdate = (id) => {\r\n    const getData = async (id) => {\r\n      const res = await userService.getEducationById(id)\r\n      setSchool(res?.data?.school);\r\n      setDiploma(res?.data?.diploma);\r\n      setField(res?.data?.field);\r\n      setStartDate(res?.data?.dateStart);\r\n      setEndDate(res?.data?.dateEnd);\r\n    };\r\n    getData(id);\r\n    setTimeout(setModalShow(true), 500);\r\n  };\r\n\r\n  const update = (id) => {\r\n    const errors = [];\r\n    if (school.length === 0) errors.push(\"Fields must not be empty\");\r\n    if (dateEnd <= dateStart) {\r\n      errors.push(\"End date can't be inferior or equal to start date!\");\r\n    }\r\n    if (diploma.length === 0) errors.push(\"Fields must not be empty\");\r\n    if (field.length === 0) errors.push(\"Fields must not be emepty\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    dateStart = dateStart.toString().substring(4, 15);\r\n    dateEnd = dateEnd.toString().substring(4, 15);\r\n    const education = {\r\n      school: school,\r\n      diploma: diploma,\r\n      dateStart: dateStart,\r\n      dateEnd: dateEnd,\r\n      field: field,\r\n    };\r\n    userService.editEducation(id, education)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(!props.toggle);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setModalShow(false);\r\n  };\r\n\r\n  const deleteById = (id) => {\r\n    userService.deleteEducation(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Button\r\n          onClick={() => {\r\n            setSchool(\"\");\r\n            setDiploma(\"\");\r\n            setField(\"\");\r\n            setStartDate(new Date());\r\n            setEndDate(new Date());\r\n            setModalShow(true);\r\n            setToggle(false);\r\n          }}\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          size=\"medium\"\r\n          startIcon={\r\n            <AddCircleOutlinedIcon\r\n              style={{\r\n                maxWidth: \"30px\",\r\n                maxHeight: \"30px\",\r\n                minWidth: \"30px\",\r\n                minHeight: \"30px\",\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Modal\r\n          show={modalShow}\r\n          color=\"primary\"\r\n          onHide={() => setModalShow(false)}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"space-between\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"School\"\r\n                    value={school}\r\n                    onChange={handleSchool}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Diploma\"\r\n                    value={diploma}\r\n                    onChange={handleDiploma}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Field\"\r\n                    value={field}\r\n                    onChange={handleField}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"Start Date\"\r\n                      value={dateStart}\r\n                      onChange={handleStart}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"End Date\"\r\n                      value={dateEnd}\r\n                      onChange={handleEnd}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert\r\n                onClose={handleClose}\r\n                severity={successful ? \"success\" : \"error\"}\r\n              >\r\n                {typeof message == \"string\"\r\n                  ? message\r\n                  : message?.map((message1) => (\r\n                    <span>\r\n                      -{message1}\r\n                      <br />\r\n                    </span>\r\n                  ))}\r\n              </Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            {toggle && (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  update(editId);\r\n                  setSuccessful(false);\r\n                }}\r\n              >\r\n                Update\r\n              </Button>\r\n            )}\r\n            {!toggle && (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  upload();\r\n                  setSuccessful(false);\r\n                }}\r\n              >\r\n                Upload\r\n              </Button>\r\n            )}\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"simple table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>School</TableCell>\r\n                <TableCell>Diploma</TableCell>\r\n                <TableCell>Edit</TableCell>\r\n                <TableCell>Delete</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {getRequest?.map((obj) => (\r\n                <TableRow key={obj}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {obj.school}\r\n                  </TableCell>\r\n                  <TableCell>{obj.diploma}</TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <EditIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setToggle(true);\r\n                          setEditId(obj.id);\r\n                          setTimeout(openUpdate(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <DeleteIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setTimeout(deleteById(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default EditEducation;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditNormalLanguages.jsx",["560","561"],"import React, { useState, useEffect } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"react-select\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst statusOptions = [\r\n  { value: \"French\", label: \"French\" },\r\n  { value: \"English\", label: \"English\" },\r\n  { value: \"Arabic\", label: \"Arabic\" },\r\n  { value: \"Spanish\", label: \"Spanish\" },\r\n];\r\n\r\nconst marks = [\r\n  {\r\n    value: 1,\r\n    label: \"1\",\r\n  },\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n];\r\n\r\nconst SkillForm = (props) => {\r\n  //skill comp\r\n  const [data, setData] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [name, setName] = useState(\"French\");\r\n  const [skillValue, setSkillValue] = useState();\r\n  let selected = [];\r\n  const [disabled, setDisabled] = useState(false);\r\n\r\n  //snackbar\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getNormalLang();\r\n      setData(result.data);\r\n      setSuccessful(false);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n  const upload = () => {\r\n    const value = skillValue;\r\n    userService.uploadNormalLang(name, value)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setMessage(\"Added\");\r\n          handleClick();\r\n          setDisabled(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteNormalLang(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setMessage(\"Deleted!\");\r\n        handleClick();\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const skillPicker = (e) => {\r\n    setName(e.value);\r\n    setDisabled(false);\r\n  };\r\n\r\n  const skValue = (value) => {\r\n    setSkillValue(value);\r\n  };\r\n\r\n  const singleOption = ({ data }) => (\r\n    <div className=\"input-select\">\r\n      <div className=\"input-select__single-value d-flex justify-content-center\">\r\n        <span style={{ fontSize: \"1.5vw\" }}>&nbsp;{data.label}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <FormControl>\r\n        <div className=\"form\">\r\n          <div className=\"form-group col-12\">\r\n            <label>Languages :</label>\r\n            <Select\r\n              defaultValue={statusOptions[0]}\r\n              options={statusOptions}\r\n              onChange={skillPicker}\r\n              components={{ SingleValue: singleOption }}\r\n              isOptionDisabled={(option) =>\r\n                selected.indexOf(option.value) !== -1\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"col-10\">\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Proficiency:\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={5}\r\n              getAriaValueText={skValue}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks={marks}\r\n              min={1}\r\n              max={10}\r\n            />\r\n          </div>\r\n          <div className=\"row col-md-10 justify-content-around\">\r\n            <div className=\"col-3\">\r\n              <Button\r\n                onClick={upload}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                disabled={disabled}\r\n                startIcon={\r\n                  <AddCircleOutlinedIcon\r\n                    style={{\r\n                      maxWidth: \"30px\",\r\n                      maxHeight: \"30px\",\r\n                      minWidth: \"30px\",\r\n                      minHeight: \"30px\",\r\n                    }}\r\n                  />\r\n                }\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </FormControl>\r\n      <div className=\"responsive-table flex-fill\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <th>Skill</th>\r\n            <th>Proficiency</th>\r\n            <th>Delete</th>\r\n          </thead>\r\n          <tbody>\r\n            {data?.map((lng) => (\r\n              <tr className=\"mt-10\">\r\n                <td>{lng.name}</td>\r\n                <td>{lng.value}</td>\r\n                <td>\r\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\r\n                    <DeleteIcon\r\n                      style={{ color: \"#df4759\" }}\r\n                      className=\"pt-0\"\r\n                      onClick={() => {\r\n                        setTimeout(deleteById(lng.id), 500);\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillForm;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditDevLanguages.jsx",["562","563"],"import React, { useState, useEffect } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"react-select\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst statusOptions = [\r\n  { value: \"HTML5\", label: \"HTML5\", icon: \"fab fa-html5\" },\r\n  { value: \"CSS3\", label: \"CSS3\", icon: \"fab fa-css3-alt\" },\r\n  { value: \"Java\", label: \"Java\", icon: \"fab fa-java\" },\r\n  { value: \"JavaScript\", label: \"JavaScript\", icon: \"fab fa-js-square\" },\r\n  { value: \"PHP\", label: \"PHP\", icon: \"fab fa-php\" },\r\n  { value: \"Laravel\", label: \"Laravel\", icon: \"fab fa-laravel\" },\r\n  { value: \"Python\", label: \"Python\", icon: \"fab fa-python\" },\r\n  { value: \"Angular\", label: \"Angular\", icon: \"fab fa-angular\" },\r\n  { value: \"ReactJS\", label: \"ReactJS\", icon: \"fab fa-react\" },\r\n];\r\n\r\nconst marks = [\r\n  {\r\n    value: 1,\r\n    label: \"1\",\r\n  },\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n];\r\n\r\nconst SkillForm = (props) => {\r\n  //skill comp\r\n  // const classes = useStyles();\r\n  const [data, setData] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [name, setName] = useState(\"HTML5\");\r\n  const [skillValue, setSkillValue] = useState();\r\n  const [icon, setIcon] = useState(\"fab fa-html5 fa-3x\");\r\n  let selected = [];\r\n  const [disabled, setDisabled] = useState(false);\r\n  //snackbar\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getDevLang()\r\n      setData(result.data);\r\n      setSuccessful(false);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n  const upload = () => {\r\n    const value = skillValue;\r\n    userService.uploadDevLang(name, value, icon)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setMessage(\"Added\");\r\n          handleClick();\r\n          setDisabled(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteDevLang(id).then((response) => {\r\n      setSuccessful(true);\r\n      setMessage(\"Deleted!\");\r\n      handleClick();\r\n      setSuccessful(false);\r\n    });\r\n  };\r\n\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const skillPicker = (e) => {\r\n    setName(e.value);\r\n    setIcon(e.icon);\r\n    setDisabled(false);\r\n  };\r\n\r\n  const skValue = (value) => {\r\n    setSkillValue(value);\r\n  };\r\n  const singleOption = ({ data }) => (\r\n    <div className=\"input-select\">\r\n      <div className=\"input-select__single-value d-flex justify-content-center\">\r\n        <i className={data.icon + \" fa-2x\"} />\r\n        &nbsp; &nbsp;\r\n        <span style={{ fontSize: \"1.5vw\" }}>&nbsp;{data.label}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <FormControl className=\"w-100\">\r\n        <div className=\"form\">\r\n          <div className=\"form-group col-12\">\r\n            <label>Developing Skills :</label>\r\n            <Select\r\n              defaultValue={statusOptions[0]}\r\n              options={statusOptions}\r\n              onChange={skillPicker}\r\n              components={{ SingleValue: singleOption }}\r\n              isOptionDisabled={(option) =>\r\n                selected.indexOf(option.value) !== -1\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12\">\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Proficiency:\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={5}\r\n              getAriaValueText={skValue}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks={marks}\r\n              min={1}\r\n              max={10}\r\n            />\r\n          </div>\r\n          <div className=\"row col-md-10 justify-content-around\">\r\n            <div className=\"col-2 mb-2\">\r\n              <Button\r\n                onClick={() => {\r\n                  upload();\r\n                }}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                disabled={disabled}\r\n                startIcon={\r\n                  <AddCircleOutlinedIcon\r\n                    style={{\r\n                      maxWidth: \"30px\",\r\n                      maxHeight: \"30px\",\r\n                      minWidth: \"30px\",\r\n                      minHeight: \"30px\",\r\n                    }}\r\n                  />\r\n                }\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </FormControl>\r\n      <div className=\"responsive-table flex-fill row\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <th>Language</th>\r\n            <th>Proficiency</th>\r\n            <th>Delete</th>\r\n          </thead>\r\n          <tbody>\r\n            {data?.map((dev) => (\r\n              <tr className=\"mt-10\">\r\n                <td>\r\n                  <i class={`${dev.icon} fa-3x`} />{\" \"}\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.name}</span>\r\n                </td>\r\n                <td>\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.value}</span>\r\n                </td>\r\n                <td>\r\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\r\n                    <DeleteIcon\r\n                      className=\"pt-0\"\r\n                      style={{ color: \"#df4759\" }}\r\n                      onClick={() => {\r\n                        setTimeout(deleteById(dev.id), 500);\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillForm;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditExperience.jsx",["564","565"],"import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  textfield: {\r\n    marginTop: \"10px\",\r\n    marginRight: \"1vw\",\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: \"54vw\",\r\n  },\r\n  dates: {\r\n    paddingTop: \"10px\",\r\n    marginLeft: \"5vw\",\r\n    width: \"60%\",\r\n    outline: \"none\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(20),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  button: {\r\n    margin: \"1vw 1vh\",\r\n    justifyContent: \"center\",\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst EditExperience = (props) => {\r\n  //POST STATES\r\n  let [dateStart, setStartDate] = useState(new Date());\r\n  let [dateEnd, setEndDate] = useState(new Date());\r\n  const [occupation, setOccupaton] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n\r\n  // STYLE STATES\r\n  const [open, setOpen] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  // RESPONSE STATES\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // whole profile from parent\r\n  // const data = props.data;\r\n\r\n  //Get data to fill table\r\n  const [getRequest, setGetRequest] = useState();\r\n\r\n  //MAKESTYLES\r\n  const classes = useStyles();\r\n\r\n  //toggle to show update or upload\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  //currently editing experience id\r\n  const [editId, setEditId] = useState();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getExperience()\r\n      setGetRequest(result.data);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n\r\n  const handleStart = (date) => {\r\n    setStartDate(date);\r\n  };\r\n\r\n  const handleEnd = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  const handleOccupation = (e) => {\r\n    setOccupaton(e.target.value);\r\n  };\r\n  const handleCompany = (e) => {\r\n    setCompany(e.target.value);\r\n  };\r\n  const handleDescription = (e) => {\r\n    setDescription(e.target.value);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const upload = () => {\r\n    const errors = [];\r\n    if (occupation.length === 0) errors.push(\"Occupation must not be empty\");\r\n    if (dateEnd <= dateStart) {\r\n      errors.push(\"End date can't be inferior or equal to start date!\");\r\n    }\r\n    if (company.length === 0) errors.push(\"Company must not be empty\");\r\n    if (description.length === 0) errors.push(\"Description must not be emepty\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    setModalShow(false);\r\n    dateStart = dateStart.toString().substring(4, 15);\r\n    dateEnd = dateEnd.toString().substring(4, 15);\r\n    userService.uploadExperience(occupation, company, dateStart, dateEnd, description)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setCompany(\"\");\r\n    setOccupaton(\"\");\r\n    setDescription(\"\");\r\n    setStartDate(new Date());\r\n    setEndDate(new Date());\r\n  };\r\n\r\n  const openUpdate = (id) => {\r\n    const getData = async (id) => {\r\n      const res = await userService.getExperienceById(id);\r\n      setCompany(res?.data?.company);\r\n      setOccupaton(res?.data?.occupation);\r\n      setDescription(res?.data?.description);\r\n      setStartDate(res?.data?.dateStart);\r\n      setEndDate(res?.data?.dateEnd);\r\n    };\r\n    getData(id);\r\n    setTimeout(setModalShow(true), 500);\r\n  };\r\n\r\n  const update = (id) => {\r\n    const errors = [];\r\n    if (occupation.length === 0) errors.push(\"Occupation must not be empty\");\r\n    if (dateEnd <= dateStart) {\r\n      errors.push(\"End date can't be inferior or equal to start date!\");\r\n    }\r\n    if (company.length === 0) errors.push(\"Company must not be empty\");\r\n    if (description.length === 0) errors.push(\"Description must not be emepty\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n\r\n    dateStart = dateStart.toString().substring(4, 15);\r\n    dateEnd = dateEnd.toString().substring(4, 15);\r\n    const experience = {\r\n      occupation: occupation,\r\n      company: company,\r\n      dateStart: dateStart,\r\n      dateEnd: dateEnd,\r\n      description: description,\r\n    };\r\n    userService.editExperience(id, experience)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(!props.toggle);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setModalShow(false);\r\n  };\r\n\r\n  const deleteById = (id) => {\r\n    userService.deleteExperience(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Button\r\n          onClick={() => {\r\n            setCompany(\"\");\r\n            setOccupaton(\"\");\r\n            setDescription(\"\");\r\n            setStartDate(new Date());\r\n            setEndDate(new Date());\r\n            setModalShow(true);\r\n            setToggle(false);\r\n          }}\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          size=\"medium\"\r\n          startIcon={\r\n            <AddCircleOutlinedIcon\r\n              style={{\r\n                maxWidth: \"30px\",\r\n                maxHeight: \"30px\",\r\n                minWidth: \"30px\",\r\n                minHeight: \"30px\",\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Modal\r\n          show={modalShow}\r\n          color=\"primary\"\r\n          onHide={() => setModalShow(false)}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"space-between\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Company\"\r\n                    value={company}\r\n                    onChange={handleCompany}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Occupation\"\r\n                    value={occupation}\r\n                    onChange={handleOccupation}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Description\"\r\n                    value={description}\r\n                    onChange={handleDescription}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"Start Date\"\r\n                      value={dateStart}\r\n                      onChange={handleStart}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"End Date\"\r\n                      value={dateEnd}\r\n                      onChange={handleEnd}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert\r\n                onClose={handleClose}\r\n                severity={successful ? \"success\" : \"error\"}\r\n              >\r\n                {typeof message == \"string\"\r\n                  ? message\r\n                  : message?.map((message1) => (\r\n                    <span>\r\n                      -{message1}\r\n                      <br />\r\n                    </span>\r\n                  ))}\r\n              </Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            {toggle && (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  update(editId);\r\n                  setSuccessful(false);\r\n                }}\r\n              >\r\n                Update\r\n              </Button>\r\n            )}\r\n            {!toggle && (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  upload();\r\n                  setSuccessful(false);\r\n                }}\r\n              >\r\n                Upload\r\n              </Button>\r\n            )}\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"simple table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Company</TableCell>\r\n                <TableCell>Occupation</TableCell>\r\n                <TableCell>Edit</TableCell>\r\n                <TableCell>Delete</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {getRequest?.map((obj) => (\r\n                <TableRow key={obj}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {obj.company}\r\n                  </TableCell>\r\n                  <TableCell>{obj.occupation}</TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <EditIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setToggle(true);\r\n                          setEditId(obj.id);\r\n                          setTimeout(openUpdate(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <DeleteIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setTimeout(deleteById(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default EditExperience;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditSoftware.jsx",["566","567"],"import React, { useState, useEffect } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"react-select\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst statusOptions = [\r\n  { value: \"Photoshop\", label: \"Photoshop\", icon: \"fab fa-fonticons\" },\r\n  { value: \"Git\", label: \"Git\", icon: \"fab fa-git-alt\" },\r\n  { value: \"Wordpress\", label: \"Wordpress\", icon: \"fab fa-wordpress\" },\r\n  {\r\n    value: \"RasbperryPi\",\r\n    label: \"RasbperryPi\",\r\n    icon: \"fab fa-raspberry-pi\",\r\n  },\r\n];\r\n\r\nconst marks = [\r\n  {\r\n    value: 1,\r\n    label: \"1\",\r\n  },\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n];\r\n\r\nconst SkillForm = (props) => {\r\n  //skill comp\r\n  // const classes = useStyles();\r\n  const [data, setData] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [name, setName] = useState(\"Photoshop\");\r\n  const [skillValue, setSkillValue] = useState();\r\n  const [icon, setIcon] = useState(\"fab fa-fonticons fa-3x\");\r\n  let selected = [];\r\n  const [disabled, setDisabled] = useState(false);\r\n  //snackbar\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getSoftware()\r\n      setData(result.data);\r\n      setSuccessful(false);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n  const upload = () => {\r\n    const value = skillValue;\r\n    userService.uploadSoftware(name, value, icon)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setMessage(\"Added\");\r\n          handleClick();\r\n          setDisabled(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteSoftware(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setMessage(\"Deleted!\");\r\n        handleClick();\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const skillPicker = (e) => {\r\n    setName(e.value);\r\n    setIcon(e.icon);\r\n    setDisabled(false);\r\n  };\r\n  // const deleteByType = (type) => {\r\n  //   setSkills(skills.filter((skill) => skill.type !== type));\r\n  //   setSelected(selected.filter((select) => select !== type));\r\n  //   setDisabled(!disabled);\r\n  // };\r\n  const skValue = (value) => {\r\n    setSkillValue(value);\r\n  };\r\n  const singleOption = ({ data }) => (\r\n    <div className=\"input-select\">\r\n      <div className=\"input-select__single-value d-flex justify-content-center\">\r\n        <i className={data.icon} />\r\n        &nbsp; &nbsp;\r\n        <span style={{ fontSize: \"1.5vw\" }}>&nbsp;{data.label}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <FormControl className=\"col-12\">\r\n        <div className=\"form\">\r\n          <div className=\"form-group col-md-12\">\r\n            <label>Software :</label>\r\n            <Select\r\n              defaultValue={statusOptions[0]}\r\n              options={statusOptions}\r\n              onChange={skillPicker}\r\n              components={{ SingleValue: singleOption }}\r\n              isOptionDisabled={(option) =>\r\n                selected.indexOf(option.value) !== -1\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"col-md-10\">\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Proficiency:\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={5}\r\n              getAriaValueText={skValue}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks={marks}\r\n              min={1}\r\n              max={10}\r\n            />\r\n          </div>\r\n          <div className=\"row col-md-10 justify-content-around\">\r\n            <div className=\"col-3\">\r\n              <Button\r\n                onClick={() => {\r\n                  upload();\r\n                }}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                disabled={disabled}\r\n                startIcon={\r\n                  <AddCircleOutlinedIcon\r\n                    style={{\r\n                      maxWidth: \"30px\",\r\n                      maxHeight: \"30px\",\r\n                      minWidth: \"30px\",\r\n                      minHeight: \"30px\",\r\n                    }}\r\n                  />\r\n                }\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </FormControl>\r\n      <div className=\"responsive-table flex-fill\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <th>Skill / Software</th>\r\n            <th>Proficiency</th>\r\n            <th>Delete</th>\r\n          </thead>\r\n          <tbody>\r\n            {data?.map((dev) => (\r\n              <tr className=\"mt-10\">\r\n                <td>\r\n                  <i class={dev.icon} />{\" \"}\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.name}</span>\r\n                </td>\r\n                <td>\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.value}</span>\r\n                </td>\r\n                <td>\r\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\r\n                    <DeleteIcon\r\n                      className=\"pt-0\"\r\n                      style={{ color: \"#df4759\" }}\r\n                      onClick={() => {\r\n                        setTimeout(deleteById(dev.id), 500);\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillForm;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditAbout.jsx",["568","569","570"],"import React, { useState, initialState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Input from \"react-phone-number-input/input\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport axios from \"axios\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  route: {\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nconst EditAbout = (props) => {\r\n  // MATERIAL UI STYLING AL3ABD\r\n  const classes = useStyles();\r\n  const data = props.data;\r\n\r\n  const handleClick = (e) => {\r\n    const errors1 = [];\r\n    if (firstName.length === 0 || lastName.length === 0)\r\n      errors1.push(\"Name cannot be empty\");\r\n    if (address.length === 0 || city.length === 0)\r\n      errors1.push(\"Adrress cannot be empty\");\r\n    if (!number) errors1.push(\"Number cannot be empty\");\r\n    if (number?.length < 11)\r\n      errors1.push(\"Your number should be like 0663-123123\");\r\n    if (bio?.length === 0) errors1.push(\"Bio must not be empty\");\r\n    if (interests?.length === 0) errors1.push(\"Interests must not be empty\");\r\n    if (errors1.length > 0) {\r\n      setMessage(errors1);\r\n      return 0;\r\n    }\r\n    update(e);\r\n  };\r\n\r\n  const [bio, setBio] = useState(data?.bio);\r\n  const [firstName, setFirstName] = useState(data?.firstName);\r\n  const [lastName, setLastName] = useState(data?.lastName);\r\n  const [address, setAddress] = useState(data?.address);\r\n  const [city, setCity] = useState(data?.city);\r\n  const [number, setNumber] = useState(data?.number);\r\n  const [interests, setInterests] = useState(data?.interests);\r\n  const [domaine, setDomaine] = useState(data?.domaine);\r\n\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(initialState);\r\n\r\n  const handleFirstNameChange = (e) => {\r\n    const value = e.target.value;\r\n    setFirstName(value);\r\n  };\r\n\r\n  const handleLastNameChange = (e) => {\r\n    const value = e.target.value;\r\n    setLastName(value);\r\n  };\r\n\r\n  const handleAddressChange = (e) => {\r\n    const value = e.target.value;\r\n    setAddress(value);\r\n  };\r\n\r\n  const handleCityChange = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (e) => {\r\n    const value = e;\r\n    setNumber(value);\r\n  };\r\n\r\n  const handleBioChange = (e) => {\r\n    setBio(e.target.value);\r\n  };\r\n\r\n  const handleInterestsChange = (e) => {\r\n    const value = e.target.value;\r\n    setInterests(value);\r\n  };\r\n  const handleDomaineChange = (e) => {\r\n    setDomaine(e.target.value);\r\n  };\r\n\r\n  const update = (e) => {\r\n    let abut = {\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      address: address,\r\n      city: city,\r\n      number: number,\r\n      bio: bio,\r\n      interests: interests,\r\n      domaine: domaine,\r\n    };\r\n    console.log(abut);\r\n    userService.updateAbout(props?.id, abut)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(!props.toggle);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form>\r\n        <div className=\"form-group row align-items-center\">\r\n          <label for=\"number\" className=\"col-1  col-form-label\">\r\n            Full Name:\r\n          </label>\r\n          <div className=\"col-5 mt-2 mr-5\">\r\n            <input\r\n              className=\"form-control\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"First Name\"\r\n              value={firstName\r\n                .split(\" \")\r\n                .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                .join(\" \")}\r\n              onChange={handleFirstNameChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-4 mt-2\">\r\n            <input\r\n              className=\"form-control\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              id=\"number\"\r\n              placeholder=\"Last Name\"\r\n              value={lastName\r\n                .split(\" \")\r\n                .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                .join(\" \")}\r\n              onChange={handleLastNameChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row  align-items-center\">\r\n          <label for=\"number\" className=\"col-1 col-form-label\">\r\n            Address:\r\n          </label>\r\n          <div className=\"col-7 mr-2\">\r\n            {\" \"}\r\n            <input\r\n              className=\"form-control mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"Address\"\r\n              value={address}\r\n              onChange={handleAddressChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-3\">\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"City\"\r\n              value={city}\r\n              onChange={handleCityChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row  align-items-center\">\r\n          <label for=\"example-tel-input\" class=\"col-3 col-form-label\">\r\n            Telephone :\r\n          </label>\r\n          <div className=\"col-5\">\r\n            <Input\r\n              className=\"form-control mt-2\"\r\n              country=\"MA\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              value={number}\r\n              placeholder=\"Number\"\r\n              onChange={handleNumberChange}\r\n              id=\"example-tel-input\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row align-items-center\">\r\n          <label for=\"example-tel-input\" class=\"col-sm-2 col-form-label\">\r\n            Votre domaine d'étude :\r\n          </label>\r\n          <div className=\"col-sm-5\">\r\n            <Form.Control\r\n              as=\"select\"\r\n              onChange={handleDomaineChange}\r\n              defaultValue={domaine}\r\n            >\r\n              <option value=\"Informatique\">Informatique</option>\r\n              <option value=\"Electrique\">Electrique</option>\r\n              <option value=\"Mécanique\">Mécanique</option>\r\n              <option value=\"Economie\">Economie</option>\r\n            </Form.Control>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"bio\" class=\"col-sm-2 col-form-label\">\r\n            Bio:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            className=\"inputs form-control col-sm-12 mt-2\"\r\n            rows=\"4\"\r\n            name=\"bio\"\r\n            id=\"comment\"\r\n            maxLength=\"400\"\r\n            placeholder=\"Bio\"\r\n            style={{\r\n              backgroundColor: \"#f3f2ef\",\r\n              resize: \"none\",\r\n            }}\r\n            value={bio}\r\n            onChange={handleBioChange}\r\n          ></textarea>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"bio\" class=\"col-sm-2 col-form-label\">\r\n            Interests:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            className=\"inputs form-control col-sm-12\"\r\n            rows=\"4\"\r\n            name=\"bio\"\r\n            id=\"comment\"\r\n            maxLength=\"400\"\r\n            placeholder=\"What interests you?\"\r\n            style={{\r\n              backgroundColor: \"#f3f2ef\",\r\n              resize: \"none\",\r\n            }}\r\n            value={interests}\r\n            onChange={handleInterestsChange}\r\n          ></textarea>\r\n        </div>\r\n        <div className={classes.root + \" btnholder\"}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={(e) => {\r\n              handleClick();\r\n            }}\r\n          >\r\n            Edit\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default EditAbout;","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\SinglePost\\SinglePost.jsx",["571","572","573","574","575","576","577","578","579","580"],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Interest.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Award.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Education.jsx",["581"],"import React from \"react\";\r\nconst Education = (props) => {\r\n  const data = props.data;\r\n\r\n  return (\r\n    <section className=\"resume-section mt-0\" id=\"education\">\r\n      <div className=\"resume-section-content\">\r\n        <h2 className=\"mb-5\">Education</h2>\r\n        {data?.map((educ, index) => (\r\n          <div className=\"d-flex flex-column flex-md-row justify-content-between mb-5\">\r\n            <div className=\"flex-grow-1\">\r\n              <h3 className=\"mb-0\">{educ?.school}</h3>\r\n              <div className=\"subheading mb-3\">{educ?.diploma}</div>\r\n              <div>{educ?.field}</div>\r\n            </div>\r\n            <div className=\"flex-shrink-0\">\r\n              <span className=\"text-primary\">\r\n                {educ?.dateStart?.split(\" \")[0] +\r\n                  \" \" +\r\n                  educ?.dateStart?.split(\" \")[2]}{\" \"}\r\n                -{\" \"}\r\n                {educ?.dateEnd == \"Present\" ? educ?.dateEnd : educ?.dateEnd?.split(\" \")[0] +\r\n                  \" \" +\r\n                  educ?.dateEnd?.split(\" \")[2]}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\nexport default Education;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Experience.jsx",["582","583"],"import React from \"react\";\r\nimport \"./Experience.css\";\r\nconst Experience = (props) => {\r\n  const data = props.data;\r\n  console.log(props.data);\r\n  return (\r\n    <>\r\n      <section className=\"resume-section\" id=\"experience\">\r\n        <div className=\"resume-section-content\">\r\n          <h2 className=\"mb-5\">\r\n            Experiences Professionnelles et Projets\r\n            universitaires/professionnels\r\n          </h2>\r\n          {data\r\n            ?.filter((e) => !e?.isProject)\r\n            ?.map((experience) => (\r\n              <div className=\"d-flex flex-column flex-md-row justify-content-between mb-5\">\r\n                <div className=\"flex-grow-1\">\r\n                  <h3 className=\"mb-0\">{experience?.occupation}</h3>\r\n                  <div className=\"subheading mb-3\">{experience?.company}</div>\r\n                  <p>{experience?.description}</p>\r\n                </div>\r\n                <div className=\"flex-shrink-0\">\r\n                  <span className=\"text-primary\">\r\n                    {experience?.dateStart?.split(\" \")[0] +\r\n                      \" \" +\r\n                      experience?.dateStart?.split(\" \")[2]}{\" \"}\r\n                    -{\" \"}\r\n                    {experience?.dateEnd == \"Present\"\r\n                      ? experience?.dateEnd\r\n                      : experience?.dateEnd?.split(\" \")[0] +\r\n                        \" \" +\r\n                        experience?.dateEnd?.split(\" \")[2]}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          {data\r\n            ?.filter((e) => e?.isProject)\r\n            ?.map((experience) => (\r\n              <div className=\"d-flex flex-column flex-md-row justify-content-between mb-5\">\r\n                <div className=\"flex-grow-1\">\r\n                  <h3 className=\"mb-0\">{experience?.occupation}</h3>\r\n                  <p>{experience?.description}</p>\r\n                </div>\r\n                <div className=\"flex-shrink-0\">\r\n                  <span className=\"text-primary\">\r\n                    {experience?.dateStart?.split(\" \")[0] +\r\n                      \" \" +\r\n                      experience?.dateStart?.split(\" \")[2]}{\" \"}\r\n                    -{\" \"}\r\n                    {experience?.dateEnd == \"Present\"\r\n                      ? experience?.dateEnd\r\n                      : experience?.dateEnd?.split(\" \")[0] +\r\n                        \" \" +\r\n                        experience?.dateEnd?.split(\" \")[2]}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\nexport default Experience;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Skill.jsx",["584","585"],"import React from \"react\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport \"./Skill.css\";\r\nimport Box from '@material-ui/core/Box';\r\nimport Rating, { IconContainerProps } from '@material-ui/lab/Rating';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Skill = (props) => {\r\n  const dev = props.dev;\r\n  const normal = props.normal;\r\n  const software = props.software;\r\n\r\n  return (\r\n    <section className=\"resume-section m-0\" id=\"skills\">\r\n      <div className=\"resume-section-content\">\r\n        <h2 className=\"mb-5\">Skills</h2>\r\n        <div className=\"subheading mb-3\">Programming Languages</div>\r\n        <div className=\"d-flex flex-row\" style={{ flexWrap: \"wrap\" }}>\r\n          {dev?.map((e) => (\r\n            <div className=\"col-2 mr-4 d-block mb-2\">\r\n              <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                <Typography component=\"legend\" className=\"d-flex align-items-center space-between flex-nowrap justify-content-start\"><i className={e.icon + \" fa-2x\"} /><span className=\"ml-2\">{e.name}</span></Typography>\r\n                <Rating readOnly name=\"customized-10\" defaultValue={e.value / 2} max={5} />\r\n              </Box>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"subheading mb-3 mt-3\">Softwares and Other Skills</div>\r\n        <div className=\"d-flex flex-row\" style={{ flexWrap: \"wrap\" }}>\r\n          {software?.map((e) => (\r\n            <div className=\"col-2 mr-4 d-block\">\r\n              <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                <Typography component=\"legend\" className=\"d-flex align-items-center space-between flex-nowrap justify-content-start\"><i className={e.icon + \" fa-2x\"} /><span className=\"ml-2\">{e.name}</span></Typography>\r\n                <Rating readOnly name=\"customized-10\" defaultValue={e.value / 2} max={5} />\r\n              </Box>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"subheading mb-3 mt-3\">Languages</div>\r\n        <div className=\"d-flex flex-row\" style={{ flexWrap: \"wrap\" }}>\r\n          {normal?.map((e) => (\r\n            <div className=\"col-5 mr-4 d-block\">\r\n              <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                <Typography component=\"legend\">{e.name}</Typography>\r\n                <Rating readOnly name=\"customized-10\" defaultValue={e.value} max={10} />\r\n              </Box>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </section >\r\n  );\r\n};\r\nexport default Skill;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\About.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Navbar.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\company\\Nav.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\company\\About.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Notification\\Feed\\Feed.jsx",["586","587","588"],"import { Avatar, Button } from '@material-ui/core'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport React, { useState, useEffect } from 'react'\r\nimport styles from './Feed.module.css'\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport userService from '../../../services/userService';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport { Link } from \"react-router-dom\";\r\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\r\nfunction Feed() {\r\n    const [loading, setLoading] = useState(false);\r\n    const [count, setCount] = useState(0);\r\n    const [notifications, setNotifications] = useState([])\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        const getNotifications = async () => {\r\n            await userService.getAllNotifications().then((response) => {\r\n                setNotifications(response.data);\r\n            })\r\n        }\r\n        getNotifications()\r\n    }, [count]);\r\n    const accept = async (e, id) => {\r\n        try {\r\n            console.log(id)\r\n            setLoading(true)\r\n            const resp = await userService.accept(id);\r\n            setLoading(false)\r\n            setCount(count + 1)\r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n    const handleClick = (id) => {\r\n        history.push('/view/' + id)\r\n        // window.location.reload()\r\n    }\r\n    const handleMessage = (id) => {\r\n        history.push('/Messages/' + id)\r\n    }\r\n    const deleteNotification = async (id) => {\r\n        try {\r\n            setLoading(true)\r\n            const resp = await userService.deleteNotification(id);\r\n            setLoading(false)\r\n            setCount(count + 1)\r\n        }\r\n        catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n    const handleSingleNotif = async (id) => {\r\n        try {\r\n            setLoading(true)\r\n            const resp = await userService.handleSingleNotif(id);\r\n            setLoading(false)\r\n            setCount(count + 1)\r\n        }\r\n        catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n    return (\r\n        <div className={styles.feed}>\r\n            <div className={styles.feedContainer}>\r\n                {notifications?.map(notification => (\r\n                    <div className={`${styles.notif} ${!notification.status && styles.new}`} >\r\n                        <Avatar className={styles.image} src={userService.imageLink + notification.ownerImage} />\r\n                        <div className={styles.info}>\r\n                            <h3><span className={styles.name} onClick={() => handleClick(notification.ownersId)}>{notification.ownerName}</span> <span className={styles.follow}>{notification.message}</span></h3>\r\n                            <div className=\"buttons\">\r\n                                {notification.message === \"Followed you\" && notification.status === false && <Button\r\n                                    size=\"small\"\r\n                                    variant=\"contained\"\r\n                                    style={{\r\n                                        borderRadius: 15,\r\n                                        backgroundColor: \"#21b6ae\",\r\n                                        marginRight: 10\r\n                                    }}\r\n                                    disabled={loading === true ? \"disabled\" : \"\"}\r\n                                    startIcon={<AddIcon fontSize='inherit' />}\r\n                                    onClick={(e) => accept(e, notification.ownersId)}\r\n                                >\r\n                                    Accept\r\n                                </Button>}\r\n                                {notification.message === \"Followed you\" && notification.status === true && <Button\r\n                                    size=\"small\"\r\n                                    style={{ color: \"#5cb85c\" }}\r\n                                    disabled\r\n                                    startIcon={<CheckCircleIcon style={{ color: 'inherit' }} fontSize='inherit' />}\r\n                                >\r\n                                    Connected\r\n                                </Button>}\r\n                                {notification.message === \"has commented on your post\" && (\r\n                                    <Link\r\n                                        to={\"/post/\" + notification.postId}\r\n                                        style={{ textDecoration: \"none\" }}\r\n                                        onClick={() => {\r\n                                            handleSingleNotif(notification.id)\r\n                                        }}\r\n                                    >\r\n                                        <Button\r\n                                            startIcon={<ArrowRightAltIcon />}\r\n                                            variant=\"contained\"\r\n                                        >\r\n                                            Go to post\r\n                                        </Button>\r\n                                    </Link>\r\n                                )}\r\n                                {notification.message === \"has liked your post\" && (\r\n                                    <Link\r\n                                        to={\"/post/\" + notification.postId}\r\n                                        style={{ textDecoration: \"none\" }}\r\n                                        onClick={() => {\r\n                                            handleSingleNotif(notification.id)\r\n                                        }}\r\n                                    >\r\n                                        <Button\r\n                                            startIcon={<ArrowRightAltIcon />}\r\n                                            variant=\"contained\"\r\n                                            onClick={() => {\r\n                                                handleSingleNotif(notification.id)\r\n                                            }}\r\n                                        >\r\n                                            Go to post\r\n                                        </Button>\r\n                                    </Link>\r\n                                )}\r\n                                {notification.message === \"has liked your comment\" && (\r\n                                    <Link\r\n                                        to={\"/post/\" + notification.postId}\r\n                                        style={{ textDecoration: \"none\" }}\r\n                                        onClick={() => {\r\n                                            handleSingleNotif(notification.id)\r\n                                        }}\r\n                                    >\r\n                                        <Button\r\n                                            startIcon={<ArrowRightAltIcon />}\r\n                                            variant=\"contained\"\r\n                                        >\r\n                                            Go to post\r\n                                        </Button>\r\n                                    </Link>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.actions}>\r\n                            <IconButton color=\"secondary\" disabled={loading === true ? \"disabled\" : \"\"} onClick={() => deleteNotification(notification.id)} aria-label=\"delete\">\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                            <IconButton color=\"primary\" aria-label=\"message\" onClick={() => handleMessage(notification.ownersId)}>\r\n                                <MessageIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n\r\n                ))}\r\n\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Feed\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Network\\Feed\\Feed.jsx",["589","590","591","592","593","594","595","596","597","598","599","600","601","602"],"import { Avatar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState, initialState } from \"react\";\r\nimport styles from \"./Feed.module.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport userService from \"../../../services/userService\";\r\nimport { useHistory } from \"react-router\";\r\nfunction Feed({ user }) {\r\n  const history = useHistory();\r\n  const [companies, setCompanies] = useState(initialState);\r\n  const [recommnededCompanies, setRecommendedCompanies] = useState(\r\n    initialState\r\n  );\r\n  const [students, setStudents] = useState(initialState);\r\n  const [recommendedStudents, setRecommendedStudents] = useState(initialState);\r\n  useEffect(() => {\r\n    async function getAllCompanies() {\r\n      await userService.getAllCompanies().then((response) => {\r\n        setCompanies(response?.data);\r\n        setRecommendedCompanies(\r\n          response?.data?.filter(\r\n            (company) =>\r\n              company.enabled &&\r\n              company?.company?.aboutCompany?.domaine ==\r\n              user?.cv?.about?.domaine\r\n          )\r\n        );\r\n      });\r\n    }\r\n    async function getAllStudents() {\r\n      await userService.getAllStudents().then(\r\n        (response) => {\r\n          setStudents(response?.data);\r\n          if (user?.roles[0]?.id == 3) {\r\n            setRecommendedStudents(\r\n              response?.data?.filter(\r\n                (student) =>\r\n                  student.enabled &&\r\n                  student?.cv?.about?.domaine ==\r\n                  user?.company?.aboutCompany?.domaine\r\n              )\r\n            );\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n    getAllCompanies();\r\n    getAllStudents();\r\n  }, []);\r\n  const handleClick = (id) => {\r\n    history.push(\"/view/\" + id);\r\n    window.location.reload();\r\n  };\r\n  return (\r\n    <div className={styles.feed}>\r\n      <div className={styles.block}>\r\n        <h1 className={styles.title}>All Companies</h1>\r\n        {companies\r\n          ?.filter((company) => company.enabled)\r\n          ?.map(\r\n            (company, index) =>\r\n              user?.id != company?.id && (\r\n                <div className={styles.company}>\r\n                  <img\r\n                    src={\"https://picsum.photos/400/200?random=\" + index++}\r\n                    alt=\"\"\r\n                  />\r\n                  <Avatar\r\n                    src={\r\n                      userService.imageLink +\r\n                      company.company.companyImage\r\n                    }\r\n                    className={styles.company_avatar}\r\n                    alt=\"Image of \"\r\n                  />\r\n                  <h2>{company?.companyName}</h2>\r\n                  <h5>{company?.email}</h5>\r\n                  <h6>{Math.floor(Math.random() * 1000)}</h6>\r\n                  <Button\r\n                    className={styles.Button}\r\n                    onClick={() => handleClick(company?.id)}\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                  >\r\n                    View Profile\r\n                  </Button>\r\n                </div>\r\n              )\r\n          )}\r\n      </div>\r\n\r\n      {user?.roles[0]?.id == 1 && recommnededCompanies?.length != 0 && (\r\n        <div className={styles.block}>\r\n          <h1 className={styles.title}>Recommended Companies for you</h1>\r\n          {companies\r\n            ?.filter(\r\n              (company) =>\r\n                company.enabled &&\r\n                company?.company?.aboutCompany?.domaine ==\r\n                user?.cv?.about?.domaine\r\n            )\r\n            ?.map(\r\n              (company, index) =>\r\n                user?.id != company?.id && (\r\n                  <div className={styles.company}>\r\n                    <img\r\n                      src={\"https://picsum.photos/400/200?random=\" + index++}\r\n                      alt=\"\"\r\n                    />\r\n                    <Avatar\r\n                      src={\r\n                        userService.imageLink +\r\n                        company.company.companyImage\r\n                      }\r\n                      className={styles.company_avatar}\r\n                      alt=\"Image of \"\r\n                    />\r\n                    <h2>{company?.companyName}</h2>\r\n                    <h5>{company?.email}</h5>\r\n                    <h6>{Math.floor(Math.random() * 1000)}</h6>\r\n                    <Button\r\n                      className={styles.Button}\r\n                      onClick={() => handleClick(company?.id)}\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                    >\r\n                      View Profile\r\n                    </Button>\r\n                  </div>\r\n                )\r\n            )}\r\n        </div>\r\n      )}\r\n\r\n      {user?.roles[0]?.id == 3 && recommendedStudents?.length != 0 && (\r\n        <div className={styles.block}>\r\n          {console.log(students)}\r\n\r\n          <h1 className={styles.title}>Recommended Students for you</h1>\r\n          {students\r\n            ?.filter(\r\n              (student) =>\r\n                student.enabled &&\r\n                student?.cv?.about?.domaine ==\r\n                user?.company?.aboutCompany?.domaine\r\n            )\r\n            ?.map(\r\n              (student, index) =>\r\n                user?.id != student?.id && (\r\n                  <div className={styles.company}>\r\n                    <img\r\n                      src={\"https://picsum.photos/400/200?blur?random=\" + index}\r\n                      alt=\"\"\r\n                    />\r\n                    <Avatar\r\n                      src={\r\n                        userService.imageLink +\r\n                        student.cv.image\r\n                      }\r\n                      className={styles.company_avatar2}\r\n                      alt=\"Image of \"\r\n                    />\r\n                    <h2>{student?.cv.name}</h2>\r\n                    <h5>{student?.email}</h5>\r\n                    <h6>{Math.floor(Math.random() * 1000)}</h6>\r\n                    <Button\r\n                      className={styles.Button}\r\n                      variant=\"outlined\"\r\n                      onClick={() => handleClick(student?.id)}\r\n                      color=\"primary\"\r\n                    >\r\n                      View Profile\r\n                    </Button>\r\n                  </div>\r\n                )\r\n            )}\r\n        </div>\r\n      )}\r\n      <div className={styles.block}>\r\n        <h1 className={styles.title}>Students</h1>\r\n        {students\r\n          ?.filter((student) => student.enabled)\r\n          ?.map(\r\n            (student, index) =>\r\n              user?.id != student?.id && (\r\n                <div className={styles.company}>\r\n                  <img\r\n                    src={\"https://picsum.photos/400/200?blur?random=\" + index}\r\n                    alt=\"\"\r\n                  />\r\n                  <Avatar\r\n                    src={\r\n                      userService.imageLink +\r\n                      student.cv.image\r\n                    }\r\n                    className={styles.company_avatar2}\r\n                    alt=\"Image of \"\r\n                  />\r\n                  <h2>{student?.cv.name}</h2>\r\n                  <h5>{student?.email}</h5>\r\n                  <h6>{Math.floor(Math.random() * 1000)}</h6>\r\n                  <Button\r\n                    className={styles.Button}\r\n                    variant=\"outlined\"\r\n                    onClick={() => handleClick(student?.id)}\r\n                    color=\"primary\"\r\n                  >\r\n                    View Profile\r\n                  </Button>\r\n                </div>\r\n              )\r\n          )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Network\\Sidebar\\Sidebar.jsx",["603","604"],"import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport styles from './Sidebar.module.css'\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport PersonAddSharpIcon from '@material-ui/icons/PersonAddSharp';\r\nimport PeopleSharpIcon from '@material-ui/icons/PeopleSharp';\r\nimport EventSharpIcon from '@material-ui/icons/EventSharp';\r\nimport BusinessSharpIcon from '@material-ui/icons/BusinessSharp';\r\nfunction capitalizeTheFirstLetterOfEachWord(words) {\r\n    var separateWord = words?.toLowerCase().split(' ');\r\n    for (var i = 0; i < separateWord?.length; i++) {\r\n        separateWord[i] = separateWord[i]?.charAt(0).toUpperCase() +\r\n            separateWord[i]?.substring(1);\r\n    }\r\n    return separateWord?.join(' ');\r\n}\r\nfunction Sidebar({ image, user }) {\r\n    const recentItem = (topic) => (\r\n        <div className=\"sidebar_recentItem\">\r\n            <div className=\"sidebar_hash\">#</div>\r\n            <p>{topic}</p>\r\n        </div>\r\n    );\r\n    return (\r\n        <div className={styles.sidebar}>\r\n            <div className={styles.sidebar_stats}>\r\n                <h1>Manage My Network</h1>\r\n                <div className={styles.sidebar_stat}>\r\n                    <p><PeopleIcon /> <span> Connections</span></p>\r\n                    <p className={styles.sidebar_statNumber}>{user?.friendshipSended.length + user?.friendshipReceived.length}</p>\r\n                </div>\r\n                <div className={styles.sidebar_stat}>\r\n                    <p><VisibilityIcon /> <span> Profile's views</span></p>\r\n                    <p className={styles.sidebar_statNumber}>{Math.floor(Math.random() * 1000)}</p>\r\n                </div>\r\n                <div className={styles.sidebar_stat}>\r\n                    <p><PersonAddSharpIcon /><span>People I follow</span></p>\r\n                    <p className={styles.sidebar_statNumber}>{Math.floor(Math.random() * 20)}</p>\r\n                </div>\r\n                <div className={styles.sidebar_stat}>\r\n                    <p><PeopleSharpIcon /> <span>Groups</span></p>\r\n                    <p className={styles.sidebar_statNumber}>{Math.floor(Math.random() * 20)}</p>\r\n                </div>\r\n                <div className={styles.sidebar_stat}>\r\n                    <p><EventSharpIcon /><span>Events</span></p>\r\n                    <p className={styles.sidebar_statNumber}></p>\r\n                </div>\r\n                <div className={styles.sidebar_stat}>\r\n                    <p><BusinessSharpIcon /><span>Companies</span></p>\r\n                    <p className={styles.sidebar_statNumber}>{Math.floor(Math.random() * 100)}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar_bottom\">\r\n                <p>Recent</p>\r\n                {recentItem(\"Reactjs\")}\r\n                {recentItem(\"Programming\")}\r\n                {recentItem(\"SoftwareEngineering\")}\r\n                {recentItem(\"Design\")}\r\n                {recentItem(\"Developer\")}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Search\\Search.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Search\\SearchMenu\\SearchMenu.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\HeaderOption\\HeaderOption.jsx",["605"],"import { Avatar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./HeaderOption.css\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  large: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n  },\r\n}));\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: -3,\r\n    top: 13,\r\n  },\r\n}))(Badge);\r\n\r\nfunction HeaderOption({\r\n  image,\r\n  Icon,\r\n  title,\r\n  isMobile,\r\n  titleIcon,\r\n  children,\r\n  badge,\r\n  onClick,\r\n}) {\r\n  const [open, setOpen] = useState(false);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      {!titleIcon && (\r\n        <NavLink\r\n          exact\r\n          to={\"/\" + title}\r\n          className=\"headerOption\"\r\n          onClick={onClick}\r\n          activeClassName=\"active\"\r\n        >\r\n          <StyledBadge badgeContent={badge} color=\"secondary\">\r\n            {Icon && (\r\n              <Icon\r\n                className={\r\n                  isMobile ? \"headerOption_icon2\" : \"headerOption_icon\"\r\n                }\r\n              />\r\n            )}\r\n          </StyledBadge>\r\n          {!Icon && <Avatar className=\"headerOption_icon\" src={image} />}\r\n          {!isMobile && (\r\n            <h5\r\n              onClick={() => {\r\n                setOpen(!open);\r\n              }}\r\n              className=\"headerOption_title\"\r\n            >\r\n              {title}\r\n              {titleIcon}\r\n            </h5>\r\n          )}\r\n          {open && children}\r\n        </NavLink>\r\n      )}\r\n      {titleIcon && (\r\n        <div className=\"headerOption\">\r\n          {Icon && <Icon className=\"headerOption_icon\" />}\r\n          {/* {!Icon && <img src={`data:image/png;base64,${image}`} alt=\"\" />} */}\r\n          {!Icon && (\r\n            <Avatar\r\n              className={\"headerOption_icon \" + classes.large}\r\n              src={image}\r\n            />\r\n          )}\r\n          <h5\r\n            onClick={() => {\r\n              setOpen(!open);\r\n            }}\r\n            className=\"headerOption_title\"\r\n          >\r\n            {title}\r\n            {titleIcon}\r\n          </h5>\r\n          {open && children}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HeaderOption;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\HeaderOption\\DropdowMenu\\DropdownMenu.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Search\\SearchMenu\\ProfileInfo\\ProfileInfo.jsx",["606"],"import React from \"react\";\r\nimport \"./ProfileInfo.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction ProfileInfo({ id, name, company, role, image }) {\r\n  const history = useHistory();\r\n  const handleClick = () => {\r\n    history.push(\"/view/\" + id);\r\n    window.location.reload();\r\n  };\r\n  function capitalizeTheFirstLetterOfEachWord(words) {\r\n    var separateWord = words?.toLowerCase().split(\" \");\r\n    for (var i = 0; i < separateWord?.length; i++) {\r\n      separateWord[i] =\r\n        separateWord[i]?.charAt(0).toUpperCase() +\r\n        separateWord[i]?.substring(1);\r\n    }\r\n    return separateWord?.join(\" \");\r\n  }\r\n\r\n  return (\r\n    <div className=\"profile_info\" onClick={handleClick}>\r\n      {role == 1 ? (\r\n        <Avatar className=\"image\" src={image} />\r\n      ) : (\r\n        <Avatar className=\"image square\" src={image} />\r\n      )}\r\n\r\n      {role === 1 && (\r\n        <h5>\r\n          {capitalizeTheFirstLetterOfEachWord(name)} - <span>Etudiant</span>\r\n        </h5>\r\n      )}\r\n      {role === 3 && (\r\n        <h5>\r\n          {capitalizeTheFirstLetterOfEachWord(company)} -{\" \"}\r\n          <span>Entreprise</span>\r\n        </h5>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileInfo;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\Post\\Comments\\Comment\\Comment.jsx",["607","608","609","610","611","612","613"],{"ruleId":"614","replacedBy":"615"},{"ruleId":"616","replacedBy":"617"},{"ruleId":"618","severity":1,"message":"619","line":18,"column":8,"nodeType":"620","messageId":"621","endLine":18,"endColumn":18},{"ruleId":"618","severity":1,"message":"622","line":19,"column":10,"nodeType":"620","messageId":"621","endLine":19,"endColumn":21},{"ruleId":"618","severity":1,"message":"623","line":19,"column":23,"nodeType":"620","messageId":"621","endLine":19,"endColumn":34},{"ruleId":"624","severity":1,"message":"625","line":87,"column":62,"nodeType":"626","messageId":"627","endLine":87,"endColumn":64},{"ruleId":"624","severity":1,"message":"625","line":87,"column":122,"nodeType":"626","messageId":"627","endLine":87,"endColumn":124},{"ruleId":"618","severity":1,"message":"628","line":166,"column":7,"nodeType":"620","messageId":"621","endLine":166,"endColumn":24},{"ruleId":"618","severity":1,"message":"629","line":15,"column":8,"nodeType":"620","messageId":"621","endLine":15,"endColumn":15},{"ruleId":"630","severity":1,"message":"631","line":103,"column":6,"nodeType":"632","endLine":103,"endColumn":8,"suggestions":"633"},{"ruleId":"624","severity":1,"message":"625","line":154,"column":22,"nodeType":"626","messageId":"627","endLine":154,"endColumn":24},{"ruleId":"624","severity":1,"message":"625","line":188,"column":22,"nodeType":"626","messageId":"627","endLine":188,"endColumn":24},{"ruleId":"630","severity":1,"message":"634","line":23,"column":6,"nodeType":"632","endLine":23,"endColumn":8,"suggestions":"635"},{"ruleId":"618","severity":1,"message":"636","line":36,"column":9,"nodeType":"620","messageId":"621","endLine":36,"endColumn":21},{"ruleId":"618","severity":1,"message":"637","line":1,"column":17,"nodeType":"620","messageId":"621","endLine":1,"endColumn":26},{"ruleId":"618","severity":1,"message":"638","line":8,"column":11,"nodeType":"620","messageId":"621","endLine":8,"endColumn":18},{"ruleId":"618","severity":1,"message":"637","line":1,"column":27,"nodeType":"620","messageId":"621","endLine":1,"endColumn":36},{"ruleId":"618","severity":1,"message":"639","line":26,"column":8,"nodeType":"620","messageId":"621","endLine":26,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":27,"column":8,"nodeType":"620","messageId":"621","endLine":27,"endColumn":18},{"ruleId":"618","severity":1,"message":"640","line":28,"column":8,"nodeType":"620","messageId":"621","endLine":28,"endColumn":14},{"ruleId":"618","severity":1,"message":"641","line":35,"column":8,"nodeType":"620","messageId":"621","endLine":35,"endColumn":19},{"ruleId":"618","severity":1,"message":"642","line":129,"column":10,"nodeType":"620","messageId":"621","endLine":129,"endColumn":14},{"ruleId":"618","severity":1,"message":"643","line":129,"column":16,"nodeType":"620","messageId":"621","endLine":129,"endColumn":23},{"ruleId":"618","severity":1,"message":"644","line":131,"column":20,"nodeType":"620","messageId":"621","endLine":131,"endColumn":31},{"ruleId":"618","severity":1,"message":"645","line":147,"column":9,"nodeType":"620","messageId":"621","endLine":147,"endColumn":25},{"ruleId":"624","severity":1,"message":"625","line":31,"column":90,"nodeType":"626","messageId":"627","endLine":31,"endColumn":92},{"ruleId":"630","severity":1,"message":"646","line":45,"column":8,"nodeType":"632","endLine":45,"endColumn":10,"suggestions":"647"},{"ruleId":"618","severity":1,"message":"648","line":98,"column":13,"nodeType":"620","messageId":"621","endLine":98,"endColumn":17},{"ruleId":"624","severity":1,"message":"625","line":151,"column":40,"nodeType":"626","messageId":"627","endLine":151,"endColumn":42},{"ruleId":"624","severity":1,"message":"625","line":160,"column":38,"nodeType":"626","messageId":"627","endLine":160,"endColumn":40},{"ruleId":"630","severity":1,"message":"649","line":171,"column":6,"nodeType":"632","endLine":171,"endColumn":36,"suggestions":"650"},{"ruleId":"624","severity":1,"message":"625","line":411,"column":34,"nodeType":"626","messageId":"627","endLine":411,"endColumn":36},{"ruleId":"624","severity":1,"message":"651","line":510,"column":32,"nodeType":"626","messageId":"627","endLine":510,"endColumn":34},{"ruleId":"624","severity":1,"message":"625","line":510,"column":82,"nodeType":"626","messageId":"627","endLine":510,"endColumn":84},{"ruleId":"624","severity":1,"message":"651","line":510,"column":99,"nodeType":"626","messageId":"627","endLine":510,"endColumn":101},{"ruleId":"624","severity":1,"message":"625","line":547,"column":30,"nodeType":"626","messageId":"627","endLine":547,"endColumn":32},{"ruleId":"618","severity":1,"message":"652","line":13,"column":8,"nodeType":"620","messageId":"621","endLine":13,"endColumn":15},{"ruleId":"618","severity":1,"message":"653","line":19,"column":10,"nodeType":"620","messageId":"621","endLine":19,"endColumn":15},{"ruleId":"618","severity":1,"message":"654","line":88,"column":10,"nodeType":"620","messageId":"621","endLine":88,"endColumn":17},{"ruleId":"618","severity":1,"message":"655","line":89,"column":10,"nodeType":"620","messageId":"621","endLine":89,"endColumn":20},{"ruleId":"630","severity":1,"message":"656","line":175,"column":6,"nodeType":"632","endLine":175,"endColumn":8,"suggestions":"657"},{"ruleId":"618","severity":1,"message":"658","line":184,"column":10,"nodeType":"620","messageId":"621","endLine":184,"endColumn":14},{"ruleId":"618","severity":1,"message":"659","line":186,"column":9,"nodeType":"620","messageId":"621","endLine":186,"endColumn":19},{"ruleId":"618","severity":1,"message":"660","line":189,"column":9,"nodeType":"620","messageId":"621","endLine":189,"endColumn":20},{"ruleId":"624","severity":1,"message":"625","line":207,"column":30,"nodeType":"626","messageId":"627","endLine":207,"endColumn":32},{"ruleId":"630","severity":1,"message":"661","line":224,"column":6,"nodeType":"632","endLine":224,"endColumn":15,"suggestions":"662"},{"ruleId":"630","severity":1,"message":"663","line":233,"column":6,"nodeType":"632","endLine":233,"endColumn":26,"suggestions":"664"},{"ruleId":"624","severity":1,"message":"651","line":459,"column":49,"nodeType":"626","messageId":"627","endLine":459,"endColumn":51},{"ruleId":"618","severity":1,"message":"665","line":18,"column":8,"nodeType":"620","messageId":"621","endLine":18,"endColumn":17},{"ruleId":"618","severity":1,"message":"666","line":36,"column":10,"nodeType":"620","messageId":"621","endLine":36,"endColumn":24},{"ruleId":"618","severity":1,"message":"667","line":105,"column":17,"nodeType":"620","messageId":"621","endLine":105,"endColumn":25},{"ruleId":"624","severity":1,"message":"651","line":239,"column":36,"nodeType":"626","messageId":"627","endLine":239,"endColumn":38},{"ruleId":"618","severity":1,"message":"668","line":2,"column":8,"nodeType":"620","messageId":"621","endLine":2,"endColumn":12},{"ruleId":"618","severity":1,"message":"669","line":15,"column":7,"nodeType":"620","messageId":"621","endLine":15,"endColumn":16},{"ruleId":"618","severity":1,"message":"639","line":13,"column":8,"nodeType":"620","messageId":"621","endLine":13,"endColumn":13},{"ruleId":"618","severity":1,"message":"668","line":2,"column":8,"nodeType":"620","messageId":"621","endLine":2,"endColumn":12},{"ruleId":"618","severity":1,"message":"639","line":10,"column":8,"nodeType":"620","messageId":"621","endLine":10,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":11,"column":8,"nodeType":"620","messageId":"621","endLine":11,"endColumn":18},{"ruleId":"618","severity":1,"message":"670","line":14,"column":10,"nodeType":"620","messageId":"621","endLine":14,"endColumn":15},{"ruleId":"618","severity":1,"message":"666","line":19,"column":10,"nodeType":"620","messageId":"621","endLine":19,"endColumn":24},{"ruleId":"618","severity":1,"message":"671","line":31,"column":9,"nodeType":"620","messageId":"621","endLine":31,"endColumn":16},{"ruleId":"624","severity":1,"message":"651","line":72,"column":26,"nodeType":"626","messageId":"627","endLine":72,"endColumn":28},{"ruleId":"618","severity":1,"message":"672","line":11,"column":8,"nodeType":"620","messageId":"621","endLine":11,"endColumn":18},{"ruleId":"673","severity":1,"message":"674","line":33,"column":21,"nodeType":"675","endLine":33,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":34,"column":21,"nodeType":"675","endLine":34,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":35,"column":21,"nodeType":"675","endLine":35,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":36,"column":21,"nodeType":"675","endLine":36,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":50,"column":21,"nodeType":"675","endLine":50,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":51,"column":21,"nodeType":"675","endLine":51,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":52,"column":21,"nodeType":"675","endLine":52,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":53,"column":21,"nodeType":"675","endLine":53,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":69,"column":21,"nodeType":"675","endLine":69,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":70,"column":21,"nodeType":"675","endLine":70,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":71,"column":21,"nodeType":"675","endLine":71,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":72,"column":21,"nodeType":"675","endLine":72,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":86,"column":21,"nodeType":"675","endLine":86,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":87,"column":21,"nodeType":"675","endLine":87,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":88,"column":21,"nodeType":"675","endLine":88,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":89,"column":21,"nodeType":"675","endLine":89,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":103,"column":21,"nodeType":"675","endLine":103,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":104,"column":21,"nodeType":"675","endLine":104,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":105,"column":21,"nodeType":"675","endLine":105,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":106,"column":21,"nodeType":"675","endLine":106,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":119,"column":21,"nodeType":"675","endLine":119,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":120,"column":21,"nodeType":"675","endLine":120,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":121,"column":21,"nodeType":"675","endLine":121,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":122,"column":21,"nodeType":"675","endLine":122,"endColumn":32},{"ruleId":"618","severity":1,"message":"637","line":2,"column":17,"nodeType":"620","messageId":"621","endLine":2,"endColumn":26},{"ruleId":"618","severity":1,"message":"676","line":2,"column":28,"nodeType":"620","messageId":"621","endLine":2,"endColumn":36},{"ruleId":"630","severity":1,"message":"677","line":16,"column":8,"nodeType":"632","endLine":16,"endColumn":18,"suggestions":"678"},{"ruleId":"624","severity":1,"message":"625","line":19,"column":77,"nodeType":"626","messageId":"627","endLine":19,"endColumn":79},{"ruleId":"618","severity":1,"message":"679","line":26,"column":12,"nodeType":"620","messageId":"621","endLine":26,"endColumn":20},{"ruleId":"630","severity":1,"message":"680","line":64,"column":8,"nodeType":"632","endLine":64,"endColumn":36,"suggestions":"681"},{"ruleId":"618","severity":1,"message":"682","line":96,"column":11,"nodeType":"620","messageId":"621","endLine":96,"endColumn":32},{"ruleId":"624","severity":1,"message":"651","line":200,"column":35,"nodeType":"626","messageId":"627","endLine":200,"endColumn":37},{"ruleId":"624","severity":1,"message":"625","line":201,"column":53,"nodeType":"626","messageId":"627","endLine":201,"endColumn":55},{"ruleId":"624","severity":1,"message":"625","line":42,"column":18,"nodeType":"626","messageId":"627","endLine":42,"endColumn":20},{"ruleId":"624","severity":1,"message":"625","line":47,"column":24,"nodeType":"626","messageId":"627","endLine":47,"endColumn":26},{"ruleId":"624","severity":1,"message":"625","line":52,"column":22,"nodeType":"626","messageId":"627","endLine":52,"endColumn":24},{"ruleId":"624","severity":1,"message":"625","line":57,"column":26,"nodeType":"626","messageId":"627","endLine":57,"endColumn":28},{"ruleId":"618","severity":1,"message":"668","line":14,"column":10,"nodeType":"620","messageId":"621","endLine":14,"endColumn":14},{"ruleId":"618","severity":1,"message":"672","line":15,"column":8,"nodeType":"620","messageId":"621","endLine":15,"endColumn":18},{"ruleId":"618","severity":1,"message":"683","line":24,"column":8,"nodeType":"620","messageId":"621","endLine":24,"endColumn":22},{"ruleId":"618","severity":1,"message":"619","line":25,"column":8,"nodeType":"620","messageId":"621","endLine":25,"endColumn":18},{"ruleId":"630","severity":1,"message":"684","line":90,"column":30,"nodeType":"620","endLine":90,"endColumn":37},{"ruleId":"685","severity":1,"message":"686","line":203,"column":17,"nodeType":"675","endLine":203,"endColumn":146},{"ruleId":"673","severity":1,"message":"674","line":229,"column":48,"nodeType":"675","endLine":229,"endColumn":59},{"ruleId":"673","severity":1,"message":"674","line":231,"column":21,"nodeType":"675","endLine":231,"endColumn":53},{"ruleId":"673","severity":1,"message":"674","line":232,"column":21,"nodeType":"675","endLine":232,"endColumn":54},{"ruleId":"673","severity":1,"message":"674","line":239,"column":48,"nodeType":"675","endLine":239,"endColumn":59},{"ruleId":"673","severity":1,"message":"674","line":241,"column":21,"nodeType":"675","endLine":241,"endColumn":53},{"ruleId":"673","severity":1,"message":"674","line":242,"column":21,"nodeType":"675","endLine":242,"endColumn":54},{"ruleId":"673","severity":1,"message":"674","line":396,"column":19,"nodeType":"675","endLine":396,"endColumn":30},{"ruleId":"673","severity":1,"message":"674","line":397,"column":19,"nodeType":"675","endLine":397,"endColumn":30},{"ruleId":"673","severity":1,"message":"674","line":398,"column":19,"nodeType":"675","endLine":398,"endColumn":30},{"ruleId":"673","severity":1,"message":"674","line":399,"column":19,"nodeType":"675","endLine":399,"endColumn":30},{"ruleId":"673","severity":1,"message":"674","line":405,"column":19,"nodeType":"675","endLine":405,"endColumn":30},{"ruleId":"673","severity":1,"message":"674","line":406,"column":19,"nodeType":"675","endLine":406,"endColumn":30},{"ruleId":"673","severity":1,"message":"674","line":407,"column":19,"nodeType":"675","endLine":407,"endColumn":30},{"ruleId":"673","severity":1,"message":"674","line":408,"column":19,"nodeType":"675","endLine":408,"endColumn":30},{"ruleId":"673","severity":1,"message":"674","line":420,"column":21,"nodeType":"675","endLine":420,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":421,"column":21,"nodeType":"675","endLine":421,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":422,"column":21,"nodeType":"675","endLine":422,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":423,"column":21,"nodeType":"675","endLine":423,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":424,"column":21,"nodeType":"675","endLine":424,"endColumn":32},{"ruleId":"673","severity":1,"message":"674","line":432,"column":15,"nodeType":"675","endLine":432,"endColumn":26},{"ruleId":"673","severity":1,"message":"674","line":433,"column":15,"nodeType":"675","endLine":433,"endColumn":26},{"ruleId":"673","severity":1,"message":"674","line":439,"column":27,"nodeType":"675","endLine":439,"endColumn":39},{"ruleId":"618","severity":1,"message":"668","line":10,"column":10,"nodeType":"620","messageId":"621","endLine":10,"endColumn":14},{"ruleId":"618","severity":1,"message":"638","line":7,"column":9,"nodeType":"620","messageId":"621","endLine":7,"endColumn":16},{"ruleId":"624","severity":1,"message":"625","line":22,"column":13,"nodeType":"626","messageId":"627","endLine":22,"endColumn":15},{"ruleId":"618","severity":1,"message":"637","line":1,"column":17,"nodeType":"620","messageId":"621","endLine":1,"endColumn":26},{"ruleId":"618","severity":1,"message":"639","line":10,"column":8,"nodeType":"620","messageId":"621","endLine":10,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":11,"column":8,"nodeType":"620","messageId":"621","endLine":11,"endColumn":18},{"ruleId":"618","severity":1,"message":"639","line":11,"column":8,"nodeType":"620","messageId":"621","endLine":11,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":12,"column":8,"nodeType":"620","messageId":"621","endLine":12,"endColumn":18},{"ruleId":"630","severity":1,"message":"687","line":75,"column":6,"nodeType":"632","endLine":75,"endColumn":18,"suggestions":"688"},{"ruleId":"618","severity":1,"message":"639","line":18,"column":8,"nodeType":"620","messageId":"621","endLine":18,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":19,"column":8,"nodeType":"620","messageId":"621","endLine":19,"endColumn":18},{"ruleId":"624","severity":1,"message":"651","line":91,"column":30,"nodeType":"626","messageId":"627","endLine":91,"endColumn":32},{"ruleId":"630","severity":1,"message":"687","line":97,"column":6,"nodeType":"632","endLine":97,"endColumn":18,"suggestions":"689"},{"ruleId":"630","severity":1,"message":"687","line":96,"column":6,"nodeType":"632","endLine":96,"endColumn":18,"suggestions":"690"},{"ruleId":"618","severity":1,"message":"639","line":9,"column":8,"nodeType":"620","messageId":"621","endLine":9,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":10,"column":8,"nodeType":"620","messageId":"621","endLine":10,"endColumn":18},{"ruleId":"618","severity":1,"message":"691","line":74,"column":10,"nodeType":"620","messageId":"621","endLine":74,"endColumn":20},{"ruleId":"618","severity":1,"message":"619","line":13,"column":8,"nodeType":"620","messageId":"621","endLine":13,"endColumn":18},{"ruleId":"618","severity":1,"message":"639","line":14,"column":8,"nodeType":"620","messageId":"621","endLine":14,"endColumn":13},{"ruleId":"624","severity":1,"message":"625","line":115,"column":17,"nodeType":"626","messageId":"627","endLine":115,"endColumn":19},{"ruleId":"618","severity":1,"message":"619","line":12,"column":8,"nodeType":"620","messageId":"621","endLine":12,"endColumn":18},{"ruleId":"618","severity":1,"message":"639","line":13,"column":8,"nodeType":"620","messageId":"621","endLine":13,"endColumn":13},{"ruleId":"624","severity":1,"message":"625","line":120,"column":17,"nodeType":"626","messageId":"627","endLine":120,"endColumn":19},{"ruleId":"618","severity":1,"message":"619","line":12,"column":8,"nodeType":"620","messageId":"621","endLine":12,"endColumn":18},{"ruleId":"618","severity":1,"message":"639","line":13,"column":8,"nodeType":"620","messageId":"621","endLine":13,"endColumn":13},{"ruleId":"624","severity":1,"message":"625","line":132,"column":17,"nodeType":"626","messageId":"627","endLine":132,"endColumn":19},{"ruleId":"624","severity":1,"message":"625","line":232,"column":30,"nodeType":"626","messageId":"627","endLine":232,"endColumn":32},{"ruleId":"618","severity":1,"message":"692","line":3,"column":52,"nodeType":"620","messageId":"621","endLine":3,"endColumn":58},{"ruleId":"618","severity":1,"message":"639","line":13,"column":8,"nodeType":"620","messageId":"621","endLine":13,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":16,"column":8,"nodeType":"620","messageId":"621","endLine":16,"endColumn":18},{"ruleId":"618","severity":1,"message":"693","line":96,"column":10,"nodeType":"620","messageId":"621","endLine":96,"endColumn":15},{"ruleId":"630","severity":1,"message":"694","line":148,"column":6,"nodeType":"632","endLine":148,"endColumn":15,"suggestions":"695"},{"ruleId":"696","severity":1,"message":"697","line":205,"column":11,"nodeType":"675","endLine":214,"endColumn":13},{"ruleId":"618","severity":1,"message":"698","line":298,"column":11,"nodeType":"620","messageId":"621","endLine":298,"endColumn":18},{"ruleId":"699","severity":1,"message":"700","line":550,"column":13,"nodeType":"701","endLine":550,"endColumn":52},{"ruleId":"618","severity":1,"message":"639","line":9,"column":8,"nodeType":"620","messageId":"621","endLine":9,"endColumn":13},{"ruleId":"618","severity":1,"message":"639","line":11,"column":8,"nodeType":"620","messageId":"621","endLine":11,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":12,"column":8,"nodeType":"620","messageId":"621","endLine":12,"endColumn":18},{"ruleId":"618","severity":1,"message":"639","line":16,"column":8,"nodeType":"620","messageId":"621","endLine":16,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":17,"column":8,"nodeType":"620","messageId":"621","endLine":17,"endColumn":18},{"ruleId":"618","severity":1,"message":"619","line":12,"column":8,"nodeType":"620","messageId":"621","endLine":12,"endColumn":18},{"ruleId":"618","severity":1,"message":"639","line":13,"column":8,"nodeType":"620","messageId":"621","endLine":13,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":12,"column":8,"nodeType":"620","messageId":"621","endLine":12,"endColumn":18},{"ruleId":"618","severity":1,"message":"639","line":13,"column":8,"nodeType":"620","messageId":"621","endLine":13,"endColumn":13},{"ruleId":"618","severity":1,"message":"639","line":16,"column":8,"nodeType":"620","messageId":"621","endLine":16,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":17,"column":8,"nodeType":"620","messageId":"621","endLine":17,"endColumn":18},{"ruleId":"618","severity":1,"message":"619","line":12,"column":8,"nodeType":"620","messageId":"621","endLine":12,"endColumn":18},{"ruleId":"618","severity":1,"message":"639","line":13,"column":8,"nodeType":"620","messageId":"621","endLine":13,"endColumn":13},{"ruleId":"618","severity":1,"message":"639","line":6,"column":8,"nodeType":"620","messageId":"621","endLine":6,"endColumn":13},{"ruleId":"618","severity":1,"message":"655","line":54,"column":10,"nodeType":"620","messageId":"621","endLine":54,"endColumn":20},{"ruleId":"618","severity":1,"message":"654","line":55,"column":10,"nodeType":"620","messageId":"621","endLine":55,"endColumn":17},{"ruleId":"618","severity":1,"message":"702","line":1,"column":18,"nodeType":"620","messageId":"621","endLine":1,"endColumn":24},{"ruleId":"618","severity":1,"message":"639","line":13,"column":8,"nodeType":"620","messageId":"621","endLine":13,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":16,"column":8,"nodeType":"620","messageId":"621","endLine":16,"endColumn":18},{"ruleId":"618","severity":1,"message":"653","line":35,"column":10,"nodeType":"620","messageId":"621","endLine":35,"endColumn":15},{"ruleId":"618","severity":1,"message":"703","line":77,"column":10,"nodeType":"620","messageId":"621","endLine":77,"endColumn":19},{"ruleId":"618","severity":1,"message":"693","line":89,"column":10,"nodeType":"620","messageId":"621","endLine":89,"endColumn":15},{"ruleId":"624","severity":1,"message":"625","line":122,"column":22,"nodeType":"626","messageId":"627","endLine":122,"endColumn":24},{"ruleId":"630","severity":1,"message":"704","line":160,"column":6,"nodeType":"632","endLine":160,"endColumn":22,"suggestions":"705"},{"ruleId":"624","severity":1,"message":"625","line":418,"column":26,"nodeType":"626","messageId":"627","endLine":418,"endColumn":28},{"ruleId":"699","severity":1,"message":"700","line":453,"column":17,"nodeType":"701","endLine":453,"endColumn":56},{"ruleId":"624","severity":1,"message":"625","line":22,"column":32,"nodeType":"626","messageId":"627","endLine":22,"endColumn":34},{"ruleId":"624","severity":1,"message":"625","line":29,"column":42,"nodeType":"626","messageId":"627","endLine":29,"endColumn":44},{"ruleId":"624","severity":1,"message":"625","line":52,"column":42,"nodeType":"626","messageId":"627","endLine":52,"endColumn":44},{"ruleId":"618","severity":1,"message":"706","line":2,"column":8,"nodeType":"620","messageId":"621","endLine":2,"endColumn":19},{"ruleId":"618","severity":1,"message":"707","line":5,"column":18,"nodeType":"620","messageId":"621","endLine":5,"endColumn":36},{"ruleId":"618","severity":1,"message":"648","line":30,"column":19,"nodeType":"620","messageId":"621","endLine":30,"endColumn":23},{"ruleId":"618","severity":1,"message":"648","line":48,"column":19,"nodeType":"620","messageId":"621","endLine":48,"endColumn":23},{"ruleId":"618","severity":1,"message":"648","line":60,"column":19,"nodeType":"620","messageId":"621","endLine":60,"endColumn":23},{"ruleId":"624","severity":1,"message":"625","line":23,"column":55,"nodeType":"626","messageId":"627","endLine":23,"endColumn":57},{"ruleId":"624","severity":1,"message":"625","line":33,"column":34,"nodeType":"626","messageId":"627","endLine":33,"endColumn":36},{"ruleId":"624","severity":1,"message":"625","line":38,"column":47,"nodeType":"626","messageId":"627","endLine":38,"endColumn":49},{"ruleId":"630","severity":1,"message":"708","line":51,"column":6,"nodeType":"632","endLine":51,"endColumn":8,"suggestions":"709"},{"ruleId":"624","severity":1,"message":"651","line":64,"column":24,"nodeType":"626","messageId":"627","endLine":64,"endColumn":26},{"ruleId":"624","severity":1,"message":"625","line":94,"column":27,"nodeType":"626","messageId":"627","endLine":94,"endColumn":29},{"ruleId":"624","severity":1,"message":"651","line":94,"column":64,"nodeType":"626","messageId":"627","endLine":94,"endColumn":66},{"ruleId":"624","severity":1,"message":"625","line":101,"column":57,"nodeType":"626","messageId":"627","endLine":101,"endColumn":59},{"ruleId":"624","severity":1,"message":"651","line":106,"column":26,"nodeType":"626","messageId":"627","endLine":106,"endColumn":28},{"ruleId":"624","severity":1,"message":"625","line":137,"column":27,"nodeType":"626","messageId":"627","endLine":137,"endColumn":29},{"ruleId":"624","severity":1,"message":"651","line":137,"column":63,"nodeType":"626","messageId":"627","endLine":137,"endColumn":65},{"ruleId":"624","severity":1,"message":"625","line":146,"column":45,"nodeType":"626","messageId":"627","endLine":146,"endColumn":47},{"ruleId":"624","severity":1,"message":"651","line":151,"column":26,"nodeType":"626","messageId":"627","endLine":151,"endColumn":28},{"ruleId":"624","severity":1,"message":"651","line":187,"column":24,"nodeType":"626","messageId":"627","endLine":187,"endColumn":26},{"ruleId":"618","severity":1,"message":"710","line":1,"column":10,"nodeType":"620","messageId":"621","endLine":1,"endColumn":16},{"ruleId":"618","severity":1,"message":"711","line":10,"column":10,"nodeType":"620","messageId":"621","endLine":10,"endColumn":44},{"ruleId":"618","severity":1,"message":"637","line":2,"column":17,"nodeType":"620","messageId":"621","endLine":2,"endColumn":26},{"ruleId":"624","severity":1,"message":"625","line":24,"column":13,"nodeType":"626","messageId":"627","endLine":24,"endColumn":15},{"ruleId":"618","severity":1,"message":"712","line":1,"column":38,"nodeType":"620","messageId":"621","endLine":1,"endColumn":50},{"ruleId":"618","severity":1,"message":"639","line":11,"column":8,"nodeType":"620","messageId":"621","endLine":11,"endColumn":13},{"ruleId":"618","severity":1,"message":"619","line":18,"column":8,"nodeType":"620","messageId":"621","endLine":18,"endColumn":18},{"ruleId":"618","severity":1,"message":"713","line":19,"column":10,"nodeType":"620","messageId":"621","endLine":19,"endColumn":13},{"ruleId":"624","severity":1,"message":"625","line":231,"column":22,"nodeType":"626","messageId":"627","endLine":231,"endColumn":24},{"ruleId":"630","severity":1,"message":"714","line":238,"column":6,"nodeType":"632","endLine":238,"endColumn":8,"suggestions":"715"},{"ruleId":"630","severity":1,"message":"716","line":252,"column":6,"nodeType":"632","endLine":252,"endColumn":8,"suggestions":"717"},"no-native-reassign",["718"],"no-negated-in-lhs",["719"],"no-unused-vars","'authHeader' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'updateCompanyPost' is assigned a value but never used.","'Sponsor' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["720"],"React Hook useEffect has missing dependencies: 'history', 'query', and 'user'. Either include them or remove the dependency array.",["721"],"'handleSearch' is assigned a value but never used.","'useEffect' is defined but never used.","'history' is assigned a value but never used.","'axios' is defined but never used.","'Charts' is defined but never used.","'userService' is defined but never used.","'dada' is assigned a value but never used.","'setDada' is assigned a value but never used.","'setAccounts' is assigned a value but never used.","'fixedHeightPaper' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'forceId'. Either include it or remove the dependency array.",["722"],"'resp' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["723"],"Expected '!==' and instead saw '!='.","'Shimmer' is defined but never used.","'Alert' is defined but never used.","'message' is assigned a value but never used.","'successful' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'count' and 'loopThroughPosts'. Either include them or remove the dependency array.",["724"],"'open' is assigned a value but never used.","'handleOpen' is assigned a value but never used.","'handleClose' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'res' and 'user?.roles'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPostsToShow' needs the current value of 'res'.",["725"],"React Hook useEffect has a missing dependency: 'loadingSpinner'. Either include it or remove the dependency array.",["726"],"'CloseIcon' is defined but never used.","'preventDefault' is defined but never used.","'setCount' is assigned a value but never used.","'Link' is defined but never used.","'useStyles' is assigned a value but never used.","'Close' is defined but never used.","'classes' is assigned a value but never used.","'FooterPage' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'forceId'. Either include it or remove the dependency array. If 'setActiveId' needs the current value of 'forceId', you can also switch to useReducer instead of useState and read 'forceId' in the reducer.",["727"],"'loading1' is assigned a value but never used.","React Hook useMemo has unnecessary dependencies: 'date', 'id', 'img', 'isNew', and 'name'. Either exclude them or remove the dependency array.",["728"],"'handleMessageReceived' is assigned a value but never used.","'AssignmentIcon' is defined but never used.","The ref value 'interval.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'interval.current' to a variable inside the effect, and use that variable in the cleanup function.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["729"],["730"],["731"],"'gottenName' is assigned a value but never used.","'useRef' is defined but never used.","'likes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ownerId', 'postId', 'toggleComment', and 'user?.id'. Either include them or remove the dependency array. You can also do a functional update 'setToggleComment(t => ...)' if you only need 'toggleComment' in the 'setToggleComment' call.",["732"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'comment' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setRef' is defined but never used.","'userImage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ownerId', 'postId', and 'user?.id'. Either include them or remove the dependency array.",["733"],"'ProgressBar' is defined but never used.","'IconContainerProps' is defined but never used.","React Hook useEffect has missing dependencies: 'user?.company?.aboutCompany?.domaine', 'user?.cv?.about?.domaine', and 'user?.roles'. Either include them or remove the dependency array. If 'setRecommendedCompanies' needs the current value of 'user.cv.about.domaine', you can also switch to useReducer instead of useState and read 'user.cv.about.domaine' in the reducer.",["734"],"'Avatar' is defined but never used.","'capitalizeTheFirstLetterOfEachWord' is defined but never used.","'initialState' is defined but never used.","'set' is defined but never used.","React Hook useEffect has missing dependencies: 'likes' and 'user?.id'. Either include them or remove the dependency array.",["735"],"React Hook useEffect has missing dependencies: 'ownerId' and 'role'. Either include them or remove the dependency array.",["736"],"no-global-assign","no-unsafe-negation",{"desc":"737","fix":"738"},{"desc":"739","fix":"740"},{"desc":"741","fix":"742"},{"desc":"743","fix":"744"},{"desc":"745","fix":"746"},{"desc":"747","fix":"748"},{"desc":"749","fix":"750"},{"desc":"751","fix":"752"},{"desc":"753","fix":"754"},{"desc":"755","fix":"756"},{"desc":"755","fix":"757"},{"desc":"755","fix":"758"},{"desc":"759","fix":"760"},{"desc":"761","fix":"762"},{"desc":"763","fix":"764"},{"desc":"765","fix":"766"},{"desc":"767","fix":"768"},"Update the dependencies array to be: [history, user]",{"range":"769","text":"770"},"Update the dependencies array to be: [history, query, user]",{"range":"771","text":"772"},"Update the dependencies array to be: [forceId]",{"range":"773","text":"774"},"Update the dependencies array to be: [count, currentUserId, id, toggle]",{"range":"775","text":"776"},"Update the dependencies array to be: [count, loopThroughPosts]",{"range":"777","text":"778"},"Update the dependencies array to be: [refresh, res, user?.roles]",{"range":"779","text":"780"},"Update the dependencies array to be: [childLoaderRefresh, loadingSpinner]",{"range":"781","text":"782"},"Update the dependencies array to be: [activeId, forceId]",{"range":"783","text":"784"},"Update the dependencies array to be: []",{"range":"785","text":"786"},"Update the dependencies array to be: [props, successful]",{"range":"787","text":"788"},{"range":"789","text":"788"},{"range":"790","text":"788"},"Update the dependencies array to be: [ownerId, postId, refresh, toggleComment, user?.id]",{"range":"791","text":"792"},"Update the dependencies array to be: [refresh, count, ownerId, postId, user?.id]",{"range":"793","text":"794"},"Update the dependencies array to be: [user?.company?.aboutCompany?.domaine, user?.cv?.about?.domaine, user?.roles]",{"range":"795","text":"796"},"Update the dependencies array to be: [likes, user?.id]",{"range":"797","text":"798"},"Update the dependencies array to be: [ownerId, role]",{"range":"799","text":"800"},[3579,3581],"[history, user]",[729,731],"[history, query, user]",[1655,1657],"[forceId]",[5821,5851],"[count, currentUserId, id, toggle]",[4841,4843],"[count, loopThroughPosts]",[6003,6012],"[refresh, res, user?.roles]",[6164,6184],"[childLoaderRefresh, loadingSpinner]",[657,667],"[activeId, forceId]",[2680,2708],"[]",[2420,2432],"[props, successful]",[3071,3083],[3106,3118],[4455,4464],"[ownerId, postId, refresh, toggleComment, user?.id]",[5478,5494],"[refresh, count, ownerId, postId, user?.id]",[1726,1728],"[user?.company?.aboutCompany?.domaine, user?.cv?.about?.domaine, user?.roles]",[6436,6438],"[likes, user?.id]",[6887,6889],"[ownerId, role]"]