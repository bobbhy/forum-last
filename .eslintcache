<<<<<<< HEAD
[{"/home/bobhhy/forum-last/src/index.js":"1","/home/bobhhy/forum-last/src/App.js":"2","/home/bobhhy/forum-last/src/services/authHeader.js":"3","/home/bobhhy/forum-last/src/Components/Login/Login.jsx":"4","/home/bobhhy/forum-last/src/Components/Presentation/Presentation2.jsx":"5","/home/bobhhy/forum-last/src/Components/ConfirmationToken/ConfirmationToken.jsx":"6","/home/bobhhy/forum-last/src/Components/Presentation/Presentation.jsx":"7","/home/bobhhy/forum-last/src/Components/Profile/Profile.jsx":"8","/home/bobhhy/forum-last/src/Components/Dashboard/Dashboard.jsx":"9","/home/bobhhy/forum-last/src/Components/Notification/Notification.jsx":"10","/home/bobhhy/forum-last/src/Components/Home/Feed/SinglePost/SinglePostMain.jsx":"11","/home/bobhhy/forum-last/src/Components/Network/Network.jsx":"12","/home/bobhhy/forum-last/src/Components/Messages/Messages.jsx":"13","/home/bobhhy/forum-last/src/services/userService.js":"14","/home/bobhhy/forum-last/src/Components/Header/Header.jsx":"15","/home/bobhhy/forum-last/src/Components/Signup/SignUp.jsx":"16","/home/bobhhy/forum-last/src/Components/Home/Home.jsx":"17","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/Cv.jsx":"18","/home/bobhhy/forum-last/src/services/authService.js":"19","/home/bobhhy/forum-last/src/Components/Presentation/NavbarElements.jsx":"20","/home/bobhhy/forum-last/src/Components/Profile/CompanyProfile.jsx":"21","/home/bobhhy/forum-last/src/Components/Profile/StudentProfile.jsx":"22","/home/bobhhy/forum-last/src/Components/Dashboard/ListUsers.jsx":"23","/home/bobhhy/forum-last/src/Components/Dashboard/Charts.jsx":"24","/home/bobhhy/forum-last/src/Components/Dashboard/Statistics.jsx":"25","/home/bobhhy/forum-last/src/Components/Dashboard/Enable.jsx":"26","/home/bobhhy/forum-last/src/Components/Home/Feed/SinglePost/SinglePost.jsx":"27","/home/bobhhy/forum-last/src/Components/Dashboard/Messages.jsx":"28","/home/bobhhy/forum-last/src/Components/Presentation/Presentation Children/Footer.jsx":"29","/home/bobhhy/forum-last/src/Components/Presentation/Presentation Children/welcome.jsx":"30","/home/bobhhy/forum-last/src/Components/Presentation/Presentation Children/ContactUs.jsx":"31","/home/bobhhy/forum-last/src/Components/Presentation/Presentation Children/Team.jsx":"32","/home/bobhhy/forum-last/src/Components/Messages/Sidebar/Sidebar.jsx":"33","/home/bobhhy/forum-last/src/Components/Network/Sidebar/Sidebar.jsx":"34","/home/bobhhy/forum-last/src/Components/Network/Feed/Feed.jsx":"35","/home/bobhhy/forum-last/src/Components/Messages/Feed/Feed.jsx":"36","/home/bobhhy/forum-last/src/Components/Home/Sidebarl/Sidebarl.jsx":"37","/home/bobhhy/forum-last/src/Components/Notification/Feed/Feed.jsx":"38","/home/bobhhy/forum-last/src/Components/Header/HeaderOption/HeaderOption.jsx":"39","/home/bobhhy/forum-last/src/Components/Home/Sidebar/Sidebar.jsx":"40","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditImage.jsx":"41","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCompany/EditAboutCompany.jsx":"42","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditSoftware.jsx":"43","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditAwards.jsx":"44","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditNormalLanguages.jsx":"45","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditDevLanguages.jsx":"46","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditEducation.jsx":"47","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditExperience.jsx":"48","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditAbout.jsx":"49","/home/bobhhy/forum-last/src/Components/Dashboard/Title.jsx":"50","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCv.jsx":"51","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCompany/SetCompany.jsx":"52","/home/bobhhy/forum-last/src/Components/Messages/Sidebar/MessageConversation/MessageConversation.jsx":"53","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCompany/AddCompany Components/CompanySocials.jsx":"54","/home/bobhhy/forum-last/src/Components/Messages/Feed/ProfileInfo/ProfileInfo.jsx":"55","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditSocials.jsx":"56","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCompany/AddCompany Components/AboutCompany.jsx":"57","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCompany/AddCompany Components/CompanyImage.jsx":"58","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/Award.jsx":"59","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/SkillForm.jsx":"60","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/Education.jsx":"61","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/Experience.jsx":"62","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/About.jsx":"63","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/Image.jsx":"64","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/SkillForm Children/NormalLanguage.jsx":"65","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/SkillForm Children/Software.jsx":"66","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/SkillForm Children/Other.jsx":"67","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/SkillForm Children/DevLanguage.jsx":"68","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/Socials.jsx":"69","/home/bobhhy/forum-last/src/Components/Home/Feed/InputOption/InputOption.jsx":"70","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/Interest.jsx":"71","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/Award.jsx":"72","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/Skill.jsx":"73","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/Experience.jsx":"74","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/About.jsx":"75","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/Education.jsx":"76","/home/bobhhy/forum-last/src/Components/Profile/js/cv.js":"77","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/company/Nav.jsx":"78","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/company/About.jsx":"79","/home/bobhhy/forum-last/src/Components/Home/Feed/Post/Comments/Comment/Comment.jsx":"80","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/Navbar.jsx":"81","/home/bobhhy/forum-last/src/Components/Home/Feed/Feed.jsx":"82","/home/bobhhy/forum-last/src/Components/Header/Search/Search.jsx":"83","/home/bobhhy/forum-last/src/Components/Header/HeaderOption/DropdowMenu/DropdownMenu.jsx":"84","/home/bobhhy/forum-last/src/Components/Header/Search/SearchMenu/SearchMenu.jsx":"85","/home/bobhhy/forum-last/src/Components/Home/Feed/Post/Post.jsx":"86","/home/bobhhy/forum-last/src/Components/Header/Search/SearchMenu/ProfileInfo/ProfileInfo.jsx":"87"},{"size":301,"mtime":1619790390918,"results":"88","hashOfConfig":"89"},{"size":4778,"mtime":1620906209422,"results":"90","hashOfConfig":"89"},{"size":364,"mtime":1620055448121,"results":"91","hashOfConfig":"89"},{"size":6582,"mtime":1620522106655,"results":"92","hashOfConfig":"89"},{"size":3247,"mtime":1621343001618,"results":"93","hashOfConfig":"89"},{"size":993,"mtime":1619790390730,"results":"94","hashOfConfig":"89"},{"size":3777,"mtime":1620904019305,"results":"95","hashOfConfig":"89"},{"size":634,"mtime":1619790390914,"results":"96","hashOfConfig":"89"},{"size":10951,"mtime":1620209058690,"results":"97","hashOfConfig":"89"},{"size":425,"mtime":1619790390730,"results":"98","hashOfConfig":"89"},{"size":467,"mtime":1619790390730,"results":"99","hashOfConfig":"89"},{"size":308,"mtime":1620855184661,"results":"100","hashOfConfig":"89"},{"size":1989,"mtime":1619790390730,"results":"101","hashOfConfig":"89"},{"size":12765,"mtime":1620904003509,"results":"102","hashOfConfig":"89"},{"size":4104,"mtime":1620904003509,"results":"103","hashOfConfig":"89"},{"size":31097,"mtime":1620904003509,"results":"104","hashOfConfig":"89"},{"size":512,"mtime":1620904003509,"results":"105","hashOfConfig":"89"},{"size":22794,"mtime":1620907448773,"results":"106","hashOfConfig":"89"},{"size":1785,"mtime":1620575463540,"results":"107","hashOfConfig":"89"},{"size":3127,"mtime":1620995906696,"results":"108","hashOfConfig":"89"},{"size":808,"mtime":1619790390914,"results":"109","hashOfConfig":"89"},{"size":803,"mtime":1619790390918,"results":"110","hashOfConfig":"89"},{"size":4799,"mtime":1620209252823,"results":"111","hashOfConfig":"89"},{"size":1498,"mtime":1619790390730,"results":"112","hashOfConfig":"89"},{"size":11195,"mtime":1620429121041,"results":"113","hashOfConfig":"89"},{"size":3256,"mtime":1620575463536,"results":"114","hashOfConfig":"89"},{"size":14461,"mtime":1620055374764,"results":"115","hashOfConfig":"89"},{"size":2563,"mtime":1620575463536,"results":"116","hashOfConfig":"89"},{"size":3575,"mtime":1620866735184,"results":"117","hashOfConfig":"89"},{"size":18322,"mtime":1621343432918,"results":"118","hashOfConfig":"89"},{"size":5133,"mtime":1620868530969,"results":"119","hashOfConfig":"89"},{"size":6756,"mtime":1620908584852,"results":"120","hashOfConfig":"89"},{"size":2061,"mtime":1620349571626,"results":"121","hashOfConfig":"89"},{"size":3019,"mtime":1619790390730,"results":"122","hashOfConfig":"89"},{"size":7473,"mtime":1620349593310,"results":"123","hashOfConfig":"89"},{"size":11666,"mtime":1620347152340,"results":"124","hashOfConfig":"89"},{"size":379,"mtime":1619790390730,"results":"125","hashOfConfig":"89"},{"size":8219,"mtime":1620596604664,"results":"126","hashOfConfig":"89"},{"size":2280,"mtime":1619790390730,"results":"127","hashOfConfig":"89"},{"size":2578,"mtime":1620904003509,"results":"128","hashOfConfig":"89"},{"size":3679,"mtime":1619790390918,"results":"129","hashOfConfig":"89"},{"size":5572,"mtime":1620576282518,"results":"130","hashOfConfig":"89"},{"size":6801,"mtime":1619790390918,"results":"131","hashOfConfig":"89"},{"size":7397,"mtime":1619790390914,"results":"132","hashOfConfig":"89"},{"size":6002,"mtime":1619790390918,"results":"133","hashOfConfig":"89"},{"size":6863,"mtime":1619790390918,"results":"134","hashOfConfig":"89"},{"size":12675,"mtime":1619790390918,"results":"135","hashOfConfig":"89"},{"size":12871,"mtime":1619790390918,"results":"136","hashOfConfig":"89"},{"size":6658,"mtime":1620777054950,"results":"137","hashOfConfig":"89"},{"size":343,"mtime":1619790390730,"results":"138","hashOfConfig":"89"},{"size":6438,"mtime":1619790390914,"results":"139","hashOfConfig":"89"},{"size":5260,"mtime":1619790390914,"results":"140","hashOfConfig":"89"},{"size":795,"mtime":1619790390730,"results":"141","hashOfConfig":"89"},{"size":3542,"mtime":1620591541586,"results":"142","hashOfConfig":"89"},{"size":1208,"mtime":1619790390730,"results":"143","hashOfConfig":"89"},{"size":4054,"mtime":1620577438430,"results":"144","hashOfConfig":"89"},{"size":6378,"mtime":1619790390914,"results":"145","hashOfConfig":"89"},{"size":3688,"mtime":1619790390914,"results":"146","hashOfConfig":"89"},{"size":7336,"mtime":1619790390914,"results":"147","hashOfConfig":"89"},{"size":4189,"mtime":1620055374768,"results":"148","hashOfConfig":"89"},{"size":11082,"mtime":1620055374768,"results":"149","hashOfConfig":"89"},{"size":14739,"mtime":1620055374768,"results":"150","hashOfConfig":"89"},{"size":10190,"mtime":1620575463540,"results":"151","hashOfConfig":"89"},{"size":4584,"mtime":1619790390914,"results":"152","hashOfConfig":"89"},{"size":6639,"mtime":1619790390914,"results":"153","hashOfConfig":"89"},{"size":7339,"mtime":1619790390914,"results":"154","hashOfConfig":"89"},{"size":1774,"mtime":1619790390914,"results":"155","hashOfConfig":"89"},{"size":7907,"mtime":1619790390914,"results":"156","hashOfConfig":"89"},{"size":4053,"mtime":1620577394790,"results":"157","hashOfConfig":"89"},{"size":346,"mtime":1619790390730,"results":"158","hashOfConfig":"89"},{"size":352,"mtime":1619790390918,"results":"159","hashOfConfig":"89"},{"size":1966,"mtime":1619790390918,"results":"160","hashOfConfig":"89"},{"size":2728,"mtime":1620469680563,"results":"161","hashOfConfig":"89"},{"size":2512,"mtime":1620469961908,"results":"162","hashOfConfig":"89"},{"size":3022,"mtime":1620592002915,"results":"163","hashOfConfig":"89"},{"size":1138,"mtime":1619790390918,"results":"164","hashOfConfig":"89"},{"size":1273,"mtime":1619790390918,"results":"165","hashOfConfig":"89"},{"size":595,"mtime":1619790390918,"results":"166","hashOfConfig":"89"},{"size":2221,"mtime":1620577250290,"results":"167","hashOfConfig":"89"},{"size":9457,"mtime":1620994384759,"results":"168","hashOfConfig":"89"},{"size":2236,"mtime":1619790390918,"results":"169","hashOfConfig":"89"},{"size":13586,"mtime":1620904003509,"results":"170","hashOfConfig":"89"},{"size":1437,"mtime":1619790390730,"results":"171","hashOfConfig":"89"},{"size":2923,"mtime":1620913980612,"results":"172","hashOfConfig":"89"},{"size":1814,"mtime":1620594467616,"results":"173","hashOfConfig":"89"},{"size":15851,"mtime":1620594746548,"results":"174","hashOfConfig":"89"},{"size":1216,"mtime":1619790390730,"results":"175","hashOfConfig":"89"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},"1rxxzna",{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"178"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"178"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"178"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"178"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"178"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"178"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"178"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"178"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"178"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"178"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"178"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"178"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"178"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"178"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"178"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"178"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"253","messages":"254","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"178"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"178"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"178"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"178"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"178"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"178"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"178"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"178"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"178"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"178"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"178"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"178"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"178"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"178"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"178"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"178"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"178"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"178"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"178"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"178"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"178"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"178"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"178"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"178"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"178"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"178"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"178"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"178"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"178"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"178"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"178"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"178"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"178"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"178"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"178"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"178"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393","usedDeprecatedRules":"178"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"178"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"178"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"178"},"/home/bobhhy/forum-last/src/index.js",[],["406","407"],"/home/bobhhy/forum-last/src/App.js",["408","409","410"],"import React, { useState, useEffect, initialState } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport \"./css/App.css\";\nimport Login from \"./Components/Login/Login\";\nimport SignUp from \"./Components/Signup/SignUp\";\nimport userService from \"./services/userService\";\nimport Presentation from \"./Components/Presentation/Presentation\";\nimport ConfirmToken from \"./Components/ConfirmationToken/ConfirmationToken\";\nimport Home from \"./Components/Home/Home\";\nimport Header from \"./Components/Header/Header\";\nimport Profile from \"./Components/Profile/Profile\";\nimport Dashboard from \"./Components/Dashboard/Dashboard\";\nimport Notification from \"./Components/Notification/Notification\";\nimport Network from \"./Components/Network/Network\";\nimport Cv from \"./Components/Profile/ShownProfile/Cv\";\nimport Messages from \"./Components/Messages/Messages\";\nimport SinglePostMain from \"./Components/Home/Feed/SinglePost/SinglePostMain\";\nimport authHeader from \"./services/authHeader\";\nimport Presentation2 from \"./Components/Presentation/Presentation2\";\n\n\n\nfunction App() {\n  const [user, setUser] = useState(initialState);\n  const [image, setImage] = useState(initialState);\n  const [role, setRole] = useState(initialState);\n\n  const [refreshHome, setRefreshHome] = useState(false);\n\n  useEffect(() => {\n    async function getUserData() {\n      await userService.getUserData().then(\n        (response) => {\n          setUser(response?.data);\n          setRole(response?.data?.roles[0]?.id);\n          if (response?.data?.roles[0]?.id === 1) {\n            setImage(response?.data?.cv?.image);\n          } else if (response?.data?.roles[0]?.id === 3) {\n            setImage(response?.data?.company?.companyImage);\n          }\n        },\n        (error) => {\n          setUser(null);\n        }\n      );\n    }\n    getUserData();\n    async function getCurrentImage() {\n      if (role === 1) {\n        await userService.getCurrentImage().then((response) => {\n          // setImage(`data:image/png;base64,${response?.data}`);\n        });\n      } else if (role === 3) {\n        await userService.getCurrentCompanyImage().then((response) => {\n          // setImage(`data:image/png;base64,${response?.data}`);\n        });\n      }\n    }\n    getCurrentImage();\n  }, [role]);\n  return (\n    <div className=\"app\">\n      {/* Header */}\n      {user?.roles[0]?.id === 2 && <Redirect to=\"/admin\" />}\n      {!(user?.roles[0]?.id === 2 && user!=null) &&  (\n        <Header\n          image={image}\n          user={user}\n          refreshHome={refreshHome}\n          onChange={() => setRefreshHome(!refreshHome)}\n        />\n      )}\n      {/* App Body */}\n      <div className=\"app_body\">\n        <Switch>\n          {user!=null && <Route exact path={\"/\"} component={Presentation} />}\n          <Route\n            exact\n            path={\"/confirm\"}\n            component={() => (\n              <ConfirmToken userinfo={user} user={user ? true : false} />\n            )}\n          />\n          <Route\n            exact\n            path={\"/login\"}\n            component={() => (\n              <Login user={user ? true : false} userInfo={user} />\n            )}\n          />\n          <Route\n            exact\n            path={\"/register\"}\n            component={() => <SignUp user={user ? true : false} />}\n          />\n          {user === null ? (<><Route\n            component={() => <Presentation2 />}\n          /></>) : (user?.roles[0]?.id === 1 && user.cv.flag == false) || (user?.roles[0]?.id === 3 && user.company.flag == false) ? (<>\n            <Route\n              component={() => <Profile user={user} image={image} />}\n            />\n          </>) : (<>\n            <Route\n              exact\n              path={\"/home\"}\n              render={() => <Home image={image} user={user} refreshHome={refreshHome} />}\n            />\n            <Route\n              exact\n              path={\"/profile\"}\n              component={() => <Profile user={user} image={image} />}\n            />\n            <Route exact path=\"/view/:id\" component={Cv} />\n            <Route exact path={\"/post/:postId\"} component={() => <SinglePostMain user={user} image={image} />} />\n            <Route\n              exact\n              path=\"/admin\"\n              component={() => <Dashboard user={user} />}\n            />\n            <Route exact path=\"/MyNetwork\" component={() => <Network user={user} />} />\n            <Route\n              exact\n              path={\"/Notifications\"}\n              component={() => <Notification user={user} image={image} />}\n            />\n            <Route\n              exact\n              path={\"/Messages/:id?/\"}\n              component={() => <Messages user={user} />} />\n          </>)}\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/bobhhy/forum-last/src/services/authHeader.js",[],"/home/bobhhy/forum-last/src/Components/Login/Login.jsx",["411","412"],"import React, { useState, initialState, useEffect } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router-dom\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport authService from \"../../services/authService\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport hihi from \"../../hihi.jpg\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  image: {\n    backgroundImage: `url(${hihi})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function Login({ user, userInfo }) {\n  const history = useHistory();\n  const classes = useStyles();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(initialState);\n  const [errors, setErrors] = useState(initialState);\n  const [message, setMessage] = useState(initialState);\n  const [loading, setLoading] = useState(initialState);\n  useEffect(() => {\n    if (user && userInfo?.roles[0]?.id !== 2) {\n      history.push(\"/profile\");\n    } else if (user && userInfo?.roles[0]?.id === 2) {\n      history.push(\"/admin\");\n    }\n  });\n  const handleChangePassword = (e) => {\n    const password = e.target.value;\n    setPassword(password);\n    if (password?.length === 0) {\n      setErrors({ ...errors, password: \"Password required\" });\n    } else {\n      setErrors({ ...errors, password: null });\n      if (password?.length < 8)\n        setErrors({\n          ...errors,\n          password: \"Password must be equal or greater than 8\",\n        });\n    }\n  };\n  const handleChangeUsername = (e) => {\n    const username = e.target.value;\n    setUsername(username);\n    if (username?.length === 0) {\n      setErrors({ ...errors, username: \"Username or email required\" });\n    } else {\n      setErrors({ ...errors, username: null });\n      if (username?.length < 3)\n        setErrors({\n          ...errors,\n          username: \"Username or email must be equal or greater than 3\",\n        });\n    }\n  };\n  const handLogin = (e) => {\n    e.preventDefault();\n    if (!Object.values(errors).some((x) => x !== null && x !== \"\")) {\n      setLoading(true);\n      setMessage(\"\");\n      const usernamex = username?.toLowerCase();\n      authService.login(usernamex, password).then(\n        () => {\n          history.push(\"/profile\");\n          window.location.reload();\n        },\n        (error) => {\n          const resMessage =\n              (error.response &&\n                error.response.data &&\n                error.response.data.message) ||\n              error.message ||\n              error.toString();\n\n            setMessage(resMessage);\n            setLoading(false);     \n        }\n      );\n    } else {\n      setLoading(false);\n    }\n  };\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        {loading && (\n          <div className={classes.root}>\n            <LinearProgress />\n          </div>\n        )}\n        <div className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <form className={classes.form} onSubmit={handLogin}>\n            <TextField\n              value={username}\n              onChange={handleChangeUsername}\n              variant=\"outlined\"\n              margin=\"normal\"\n              fullWidth\n              id=\"email\"\n              required={true}\n              label=\"Username Or Email\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n              error={Boolean(errors?.username)}\n              helperText={errors?.username}\n            />\n            <TextField\n              value={password}\n              onChange={handleChangePassword}\n              variant=\"outlined\"\n              margin=\"normal\"\n              required={true}\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n              error={Boolean(errors?.password)}\n              helperText={errors?.password}\n            />\n            <FormControlLabel\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\n              label=\"Remember me\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Sign In\n            </Button>\n            <Grid container>\n              <Grid item xs>\n                <Link href=\"/\" variant=\"body2\">\n                  Forgot password?\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link\n                  href=\"\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    history.push(\"/register\");\n                  }}\n                  variant=\"body2\"\n                >\n                  {\"Don't have an account? Sign Up\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </form>\n        </div>\n        {message && (\n          <Alert\n            severity=\"error\"\n            onClose={() => {\n              setMessage(null);\n            }}\n          >\n            {message}\n          </Alert>\n        )}\n      </Grid>\n    </Grid>\n  );\n}\n","/home/bobhhy/forum-last/src/Components/Presentation/Presentation2.jsx",["413","414"],"/home/bobhhy/forum-last/src/Components/ConfirmationToken/ConfirmationToken.jsx",["415"],"import React, { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport authService from \"../../services/authService\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport \"./ConfirmationToken.css\";\nimport { useHistory } from \"react-router-dom\";\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction ConfirmationToken({ userinfo, user }) {\n  const history = useHistory();\n  const query = useQuery();\n  useEffect(() => {\n    if (user) {\n      history.push(\"/home\");\n    }\n    const token = query.get(\"token\");\n    authService.verify(token).then(() => {\n      history.push(\"/profile\");\n      window.location.reload();\n    });\n  }, []);\n\n  return (\n    <div className=\"loader\">\n      <CircularProgress\n        variant=\"determinate\"\n        className=\"circularProgress\"\n        size={40}\n        thickness={4}\n        value={100}\n      />\n      <h1>Redirect...</h1>\n    </div>\n  );\n}\n\nexport default ConfirmationToken;\n","/home/bobhhy/forum-last/src/Components/Presentation/Presentation.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/Profile.jsx",[],"/home/bobhhy/forum-last/src/Components/Dashboard/Dashboard.jsx",["416","417","418","419","420","421","422","423","424"],"import React, { useState, useEffect } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ListUsers from \"./ListUsers\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport DashboardIcon from \"@material-ui/icons/Dashboard\";\nimport EqualizerIcon from \"@material-ui/icons/Equalizer\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport Statistics from \"./Statistics\";\nimport Enable from \"./Enable\";\nimport axios from \"axios\";\nimport authHeader from \"../../services/authHeader\";\nimport Charts from \"./Charts\";\nimport Button from \"@material-ui/core/Button\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport authService from \"../../services/authService\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport { useHistory } from \"react-router\";\nimport Messages from \"./Messages\";\nimport userService from \"../../services/userService\"\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: \"none\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: \"hidden\",\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    width: \"100vw\",\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n    width: \"100vw\",\n  },\n  paper: {\n    padding: theme.spacing(2),\n    width: \"80vw\",\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\nexport default function Dashboard({ user }) {\n  const history = useHistory();\n  const classes = useStyles();\n  const [open, setOpen] = useState(true);\n\n  const [toggleDash, setToggleDash] = useState(true);\n  const [toggleStatistics, setToggleStatistics] = useState(false);\n  const [toggleEnable, setToggleEnable] = useState(false);\n  const [toggleMessages, setToggleMessages] = useState(false);\n\n  const [dada, setDada] = useState([]);\n\n  const [accounts, setAccounts] = useState();\n\n  const [refresh, setRefresh] = useState(false);\n\n  const handleLogout = () => {\n    authService.logout();\n    history.push(\"/register\");\n    window.location.reload();\n  };\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  const handleDashClick = () => {\n    setToggleDash(true);\n    setToggleStatistics(false);\n    setToggleEnable(false);\n    setToggleMessages(false);\n  };\n  const handleStatisticsClick = () => {\n    setToggleDash(false);\n    setToggleStatistics(true);\n    setToggleMessages(false);\n    setToggleEnable(false);\n  };\n  const handleEnableClick = () => {\n    setToggleDash(false);\n    setToggleStatistics(false);\n    setToggleMessages(false);\n    setToggleEnable(true);\n  };\n  const handleMessageClick = () => {\n    setToggleDash(false);\n    setToggleStatistics(false);\n    setToggleEnable(false);\n    setToggleMessages(true);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"absolute\"\n        className={clsx(classes.appBar, open && classes.appBarShift)}\n      >\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(\n              classes.menuButton,\n              open && classes.menuButtonHidden\n            )}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography\n            component=\"h1\"\n            variant=\"h6\"\n            color=\"inherit\"\n            noWrap\n            className={classes.title}\n          >\n            Dashboard\n          </Typography>\n          <Button\n            color=\"secondary\"\n            variant=\"contained\"\n            endIcon={<ExitToAppIcon />}\n            onClick={() => handleLogout()}\n          >\n            Logout\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          <div>\n            <ListItem button onClick={handleDashClick}>\n              <ListItemIcon>\n                <DashboardIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Dashboard\" />\n            </ListItem>\n            <ListItem button onClick={handleStatisticsClick}>\n              <ListItemIcon>\n                <EqualizerIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Statistics\" />\n            </ListItem>\n            <ListItem button onClick={handleEnableClick}>\n              <ListItemIcon>\n                <PersonAddIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Enable Managers\" />\n            </ListItem>\n            <ListItem button onClick={handleMessageClick}>\n              <ListItemIcon>\n                <EmailIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Messages\" />\n            </ListItem>\n          </div>\n        </List>\n        <Divider />\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          {toggleDash && (\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={8} lg={9}>\n                <Typography\n                  component=\"h2\"\n                  variant=\"h6\"\n                  color=\"inherit\"\n                  noWrap\n                  className={classes.title}\n                >\n                  Hello{\" \"}\n                  {user?.name\n                    .split(\" \")\n                    .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                    .join(\" \")}\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                  <ListUsers user={user} />\n                </Paper>\n              </Grid>\n            </Grid>\n          )}\n          {toggleMessages && (\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={8} lg={9}>\n                <Typography\n                  component=\"h2\"\n                  variant=\"h6\"\n                  color=\"inherit\"\n                  noWrap\n                  className={classes.title}\n                >\n                  Hello{\" \"}\n                  {user?.name\n                    .split(\" \")\n                    .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                    .join(\" \")}\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                  <Messages accounts={accounts} user={user} />\n                </Paper>\n              </Grid>\n            </Grid>\n          )}\n          {toggleStatistics && (\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={8} lg={9}>\n                <Typography\n                  component=\"h2\"\n                  variant=\"h6\"\n                  color=\"inherit\"\n                  noWrap\n                  className={classes.title}\n                >\n                  Hello{\" \"}\n                  {user?.name\n                    .split(\" \")\n                    .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                    .join(\" \")}\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Statistics user={user} />\n              </Grid>\n            </Grid>\n          )}\n          {toggleEnable && (\n            <Grid container spacing={3}>\n              <Grid item xs={12} md={8} lg={9}>\n                <Typography\n                  component=\"h2\"\n                  variant=\"h6\"\n                  color=\"inherit\"\n                  noWrap\n                  className={classes.title}\n                >\n                  Hello{\" \"}\n                  {user?.name\n                    .split(\" \")\n                    .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                    .join(\" \")}\n                </Typography>\n              </Grid>\n\n              <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                  <Enable\n                    refresh={refresh}\n                    onChange={(value) => setRefresh(value)}\n                  />\n                </Paper>\n              </Grid>\n            </Grid>\n          )}\n        </Container>\n      </main>\n    </div>\n  );\n}\n","/home/bobhhy/forum-last/src/Components/Notification/Notification.jsx",["425","426"],"import React, { useEffect } from \"react\";\nimport Sidebar from \"../Home/Sidebar/Sidebar\"\nimport Feed from \"./Feed/Feed\";\nimport { useHistory } from \"react-router-dom\";\n\n\nfunction Home(props) {\n    const history = useHistory();\n    const image = props?.image;\n    const user = props?.user;\n    return (\n        <>\n            <Sidebar image={image} user={user} />\n            <Feed />\n        </>\n    );\n}\n\nexport default Home;","/home/bobhhy/forum-last/src/Components/Home/Feed/SinglePost/SinglePostMain.jsx",[],"/home/bobhhy/forum-last/src/Components/Network/Network.jsx",[],"/home/bobhhy/forum-last/src/Components/Messages/Messages.jsx",["427","428"],"import React, { useState, useEffect } from 'react'\nimport userService from '../../services/userService';\nimport Feed from './Feed/Feed'\nimport styles from './Messages.module.css'\nimport Sidebar from './Sidebar/Sidebar'\nimport { useParams } from \"react-router-dom\";\n\nfunction Messages(props) {\n    const [data, setData] = useState([])\n    const [name, setName] = useState(\"\")\n    const [date, setDate] = useState(\"\")\n    const [img, setImage] = useState(\"\")\n    const [id, setId] = useState(-1)\n    const [forceId, setForceId] = useState(parseInt(useParams().id))\n    const [isNew, setIsNew] = useState(true)\n    const handleActive = (id, namex, datex, imgx) => {\n        setId(id)\n        setName(namex)\n        const datexx = new Date(datex)\n        const dt = datexx.toLocaleTimeString()\n        setDate(dt)\n        setImage(imgx)\n        setIsNew(false)\n        setForceId(false)\n    }\n    useEffect(() => {\n        async function getConversations() {\n            await userService.getAllConversations().then((response) => {\n                const datax = response.data\n                if (forceId) {\n                    const current = datax.find(conversation => { return (conversation.id == forceId) })\n                    setId(current.id)\n                    setName(current?.username)\n                    setDate(current?.date)\n                    setImage(current.img)\n                    setIsNew(false)\n                }\n                setData(datax);\n            },\n                (error) => {\n                    console.log(error)\n                });\n        }\n        getConversations();\n    }, []);\n    return (\n        <div className={styles.container}>\n            <Sidebar forceId={forceId} data={data} NewConversation={() => { setIsNew(true) }} setActive={(id, namex, datex, imgx) => handleActive(id, namex, datex, imgx)} />\n            <Feed id={id} isNew={isNew} name={name} date={date} img={img} user={props.user} />\n        </div>\n    )\n}\n\nexport default Messages\n","/home/bobhhy/forum-last/src/services/userService.js",["429"],"import axios from \"axios\";\nimport authHeader from \"./authHeader\";\n\nconst API_URL = \"https://www.forum-uit.codes/\";\n//const API_URL = \"http://localhost:5000/\";\n\nconst getApiState = () => {\n  return axios.get(API_URL + \"hello\");\n};\n\nconst getAllCompanies = () => {\n  return axios.get(API_URL + \"api/comp/companies\", { headers: authHeader() });\n};\nconst getAllStudents = () => {\n  return axios.get(API_URL + \"api/cv/students\", { headers: authHeader() });\n};\nconst getUsersLike = (key) => {\n  return axios.get(API_URL + \"api/profile/\" + key, { headers: authHeader() });\n};\nconst getEtablishements = () => {\n  return axios.get(API_URL + \"api/profile/etablishment/all\");\n};\nconst connectTo = (id) => {\n  return axios({\n    method: \"post\",\n    url: API_URL + \"api/profile/add/\" + id,\n    headers: authHeader(),\n  });\n};\nconst priveCv = (id) => {\n  return axios.put(`${API_URL}api/cv/prive/${id}`);\n};\nconst unpriveCv = (id) => {\n  return axios.put(`${API_URL}api/cv/unprive/${id}`);\n};\nconst disconnect = (id) => {\n  return axios({\n    method: \"delete\",\n    url: API_URL + \"api/profile/disconnect/\" + id,\n    headers: authHeader(),\n  });\n};\nconst accept = (id) => {\n  return axios({\n    method: \"post\",\n    url: API_URL + \"api/profile/accept/\" + id,\n    headers: authHeader(),\n  });\n};\n\n// const cvSearch = (key) => {\n//   return axios.get(API_URL + \"api/cv/search/\" + key);\n// };\n\n// const companySearch = (key) => {\n//   return axios.get(API_URL + \"api/comp/search/\" + key);\n// };\n\nconst getUserData = () => {\n  return axios.get(API_URL + \"api/profile\", { headers: authHeader() });\n};\n\nconst getCurrentImage = () => {\n  return axios.get(`${API_URL}api/cv/image`, {\n    headers: authHeader(),\n  });\n};\n\nconst getCurrentCompanyImage = () => {\n  return axios.get(`${API_URL}api/comp/image`, {\n    headers: authHeader(),\n  });\n};\n\nconst getImageById = (id) => {\n  return axios.get(`${API_URL}api/cv/image/${id}`);\n};\n\nconst getCompanyImageById = (id) => {\n  return axios.get(`${API_URL}api/comp/image/${id}`);\n};\n\nconst getUserById = (id) => {\n  return axios.get(API_URL + `api/cv/${id}`);\n};\n\nconst handleNotif = () => {\n  return axios({\n    method: \"post\",\n    url: API_URL + \"api/profile/notifications\",\n    headers: authHeader(),\n  });\n};\nconst handleSingleNotif = (id) => {\n  return axios({\n    method: \"post\",\n    url: API_URL + `api/profile/notification/${id}`,\n    headers: authHeader(),\n  });\n};\nconst deleteNotification = (id) => {\n  return axios({\n    method: \"delete\",\n    url: API_URL + `api/profile/notification/${id}`,\n    headers: authHeader(),\n  });\n};\nconst deleteMesssage = (id) => {\n  return axios({\n    method: \"delete\",\n    url: API_URL + `api/profile/message/${id}`,\n    headers: authHeader(),\n  });\n};\nconst getAllConversations = () => {\n  return axios.get(API_URL + \"api/profile/all\", {\n    headers: authHeader(),\n  });\n};\nconst sendMessage = (messagePayload) => {\n  return axios.post(API_URL + \"api/profile/sendMessage\", messagePayload, {\n    headers: authHeader(),\n  });\n};\nconst getMessages = (id) => {\n  return axios.get(API_URL + `api/profile/allMessages/${id}`, {\n    headers: authHeader(),\n  });\n};\nconst getAllNotifications = () => {\n  return axios.get(API_URL + \"api/profile/allNotifications\", {\n    headers: authHeader(),\n  });\n};\nconst getLikesByPost = (postId) => {\n  return axios.get(`${API_URL}api/cv/likesbypost/${postId}`);\n};\nconst getPosts = () => {\n  return axios.get(`${API_URL}api/cv/getPosts`);\n};\nconst getPostById = async (postId) => {\n  return await axios.get(`${API_URL}api/cv/post/${postId}`);\n};\nconst getPostComments = (postId) => {\n  return axios.get(`${API_URL}api/cv/post/${postId}/comment`);\n};\nconst contactUs = async (contact) => {\n  return await axios.post(`${API_URL}contact/message`, contact);\n};\nconst getNonPrivatePosts = () => {\n  return axios.get(`${API_URL}api/cv/getNonPosts`, {\n    headers: authHeader(),\n  });\n};\nconst getAll = async () => {\n  return await axios.get(`${API_URL}api/profile/getall`, {\n    headers: authHeader(),\n  }); // buggy\n};\nconst enable = async (id) => {\n  return await axios.put(`${API_URL}api/cv/enable/${id}`);\n};\nconst updateStudentPost = (id, post) => {\n  return axios.put(`${API_URL}api/cv/post/${id}`, post);\n};\nconst updateCompanyPost = (id, post) => {\n  return axios.put(`${API_URL}api/comp/post/${id}`, post);\n};\nconst deleteComment = (id) => {\n  return axios.delete(`${API_URL}api/cv/comment/${id}`);\n};\nconst uploadStudentComment = (postId, comment) => {\n  return axios.post(`${API_URL}api/cv/post/${postId}/comment`, comment, {\n    headers: authHeader(),\n  });\n};\nconst uploadCompanyComment = (postId, comment) => {\n  return axios.post(`${API_URL}api/comp/post/${postId}/comment`, comment, {\n    headers: authHeader(),\n  });\n};\nconst updateStudentComment = (id, comment) => {\n  return axios.put(`${API_URL}api/cv/comment/${id}`, comment);\n};\nconst updateCompanyComment = (id, comment) => {\n  return axios.put(`${API_URL}api/comp/comment/${id}`, comment);\n};\nconst likeComment = (commentId, userId) => {\n  return axios.put(`${API_URL}api/cv/comment/${commentId}/${userId}/liking`);\n};\nconst deletePostById = (postId) => {\n  return axios.delete(`${API_URL}api/cv/post/${postId}`);\n};\nconst unlikeComment = (commentId) => {\n  return axios.delete(`${API_URL}api/cv/comment/${commentId}/unliking`, {\n    headers: authHeader(),\n  });\n};\nconst likePost = (postId, userId) => {\n  return axios.put(`${API_URL}api/cv/post/${postId}/${userId}/liking`);\n};\nconst unlikePost = (postId) => {\n  return axios.delete(`${API_URL}api/cv/post/${postId}/unliking`, {\n    headers: authHeader(),\n  });\n};\nconst uploadStudentPost = (post) => {\n  return axios.post(`${API_URL}api/cv/uploadPost`, post, {\n    headers: authHeader(),\n  });\n};\nconst uploadCompanyPost = (post) => {\n  return axios.post(`${API_URL}api/comp/uploadPost`, post, {\n    headers: authHeader(),\n  });\n};\nconst getAbout = () => {\n  return axios.get(`${API_URL}api/cv/about`, {\n    headers: authHeader(),\n  });\n};\nconst uploadAboutCompany = (address, city, number, bio, socials) => {\n  return axios.post(\n    `${API_URL}api/comp/about`,\n    {\n      address,\n      city,\n      number,\n      bio,\n      socials,\n    },\n    { headers: authHeader() }\n  );\n};\nconst flagCompany = (id) => {\n  return axios.put(`${API_URL}api/comp/flag/${id}`);\n};\nconst flagStudent = (id) => {\n  return axios.put(`${API_URL}api/cv/flag/${id}`);\n};\nconst getDevLang = () => {\n  return axios.get(`${API_URL}api/cv/dev`, {\n    headers: authHeader(),\n  });\n};\nconst uploadDevLang = (name, value, icon) => {\n  return axios.post(\n    `${API_URL}api/cv/dev`,\n    {\n      name,\n      value,\n      icon,\n    },\n    { headers: authHeader() }\n  );\n};\nconst deleteDevLang = (id) => {\n  return axios.delete(`${API_URL}api/cv/dev/${id}`);\n};\nconst getNormalLang = () => {\n  return axios.get(`${API_URL}api/cv/normal`, {\n    headers: authHeader(),\n  });\n};\nconst uploadNormalLang = (name, value) => {\n  return axios.post(\n    `${API_URL}api/cv/normal`,\n    {\n      name,\n      value,\n    },\n    { headers: authHeader() }\n  );\n};\nconst deleteNormalLang = (id) => {\n  return axios.delete(`${API_URL}api/cv/normal/${id}`);\n};\nconst getSoftware = (id) => {\n  return axios.get(`${API_URL}api/cv/software`, {\n    headers: authHeader(),\n  });\n};\nconst uploadSoftware = (name, value, icon) => {\n  return axios.post(\n    `${API_URL}api/cv/software`,\n    {\n      name,\n      value,\n      icon,\n    },\n    { headers: authHeader() }\n  );\n};\nconst deleteSoftware = (id) => {\n  return axios.delete(`${API_URL}api/cv/software/${id}`);\n};\nconst getAward = () => {\n  return axios.get(`${API_URL}api/cv/award`, {\n    headers: authHeader(),\n  });\n};\nconst uploadAbout = (\n  firstName,\n  lastName,\n  address,\n  city,\n  number,\n  bio,\n  socials,\n  interests,\n  domaine\n) => {\n  return axios.put(\n    `${API_URL}api/cv/about`,\n    {\n      firstName,\n      lastName,\n      address,\n      city,\n      number,\n      bio,\n      socials,\n      interests,\n      domaine,\n    },\n    { headers: authHeader() }\n  );\n};\nconst uploadAward = (organizer, name, position) => {\n  return axios.post(\n    `${API_URL}api/cv/award`,\n    {\n      organizer,\n      name,\n      position,\n    },\n    { headers: authHeader() }\n  );\n};\nconst deleteAward = (id) => {\n  return axios.delete(`${API_URL}api/cv/award/${id}`);\n};\nconst getEducation = () => {\n  return axios.get(`${API_URL}api/cv/education`, {\n    headers: authHeader(),\n  });\n};\nconst uploadEducation = (school, diploma, dateStart, dateEnd, field) => {\n  return axios.post(\n    `${API_URL}api/cv/education`,\n    {\n      school,\n      diploma,\n      dateStart,\n      dateEnd,\n      field,\n    },\n    { headers: authHeader() }\n  );\n};\nconst deleteEducation = (id) => {\n  return axios.delete(`${API_URL}api/cv/education/${id}`);\n};\nconst getExperience = () => {\n  return axios.get(`${API_URL}api/cv/experience`, {\n    headers: authHeader(),\n  });\n};\nconst uploadExperience = (\n  occupation,\n  company,\n  dateStart,\n  dateEnd,\n  description,\n  isProject\n) => {\n  return axios.post(\n    `${API_URL}api/cv/experience`,\n    { occupation, company, dateStart, dateEnd, description, isProject },\n    { headers: authHeader() }\n  );\n};\nconst getExperienceById = (id) => {\n  return axios.get(`${API_URL}api/cv/getexperiencebyid/${id}`);\n};\nconst deleteExperience = (id) => {\n  return axios.delete(`${API_URL}api/cv/experience/${id}`);\n};\nconst updateAboutCompany = (id, about) => {\n  return axios.put(`${API_URL}api/comp/about/${id}`, about);\n};\nconst updateAbout = (id, about) => {\n  return axios.put(`${API_URL}api/cv/updateAbout/${id}`, about);\n};\nconst deleteMessage = (id) => {\n  return axios.delete(`https://www.forum-uit.codes/contact/message/${id}`);\n};\nconst getEducationById = (id) => {\n  return axios.get(`${API_URL}api/cv/geteducationbyid/${id}`);\n};\nconst editEducation = (id, education) => {\n  return axios.put(`${API_URL}api/cv/updateEducation/${id}`, education);\n};\nconst getCvLinks = () => {\n  return axios.get(`${API_URL}api/cv/link`, { headers: authHeader() });\n};\nconst getCompanyLinks = () => {\n  return axios.get(`${API_URL}api/comp/link`, { headers: authHeader() });\n};\nconst getDashMessages = () => {\n  return axios.get(\"https://www.forum-uit.codes/contact/messages\");\n};\nconst sendViewNotification = (id, pid) => {\n  return axios.post(`${API_URL}api/comp/notif/${id}/${pid}`);\n};\nconst uploadCvLink = (link) => {\n  return axios.put(`${API_URL}api/cv/link`, link, { headers: authHeader() });\n};\nconst uploadCompanyLink = (link) => {\n  return axios.put(`${API_URL}api/comp/link`, link, { headers: authHeader() });\n};\nconst viewProfile = (viewer, viewed) => {\n  return axios.post(`${API_URL}api/cv/profileview/${viewer}/${viewed}`);\n};\nconst getUnenabledManagers = () => {\n  return axios.get(`${API_URL}api/comp/unenabled`);\n};\nconst getProfileViews = () => {\n  return axios.get(`${API_URL}api/cv`, { headers: authHeader() });\n};\nconst editExperience = (id, experience) => {\n  return axios.put(`${API_URL}api/cv/updateExperience/${id}`, experience);\n};\nconst imageLink = `${API_URL}upload/static/images/`;\nconst uploadImageUrl = `${API_URL}api/cv/image`;\nconst uploadImageUrlCompany = `${API_URL}api/comp/image`;\nconst userService = {\n  getApiState,\n  getSoftware,\n  getAward,\n  getAbout,\n  uploadSoftware,\n  uploadAbout,\n  deleteSoftware,\n  getAllConversations,\n  getUserData,\n  getAllStudents,\n  getProfileViews,\n  getExperienceById,\n  editExperience,\n  connectTo,\n  deleteAward,\n  disconnect,\n  getEducation,\n  uploadEducation,\n  deleteEducation,\n  getExperience,\n  getDashMessages,\n  uploadExperience,\n  updateAboutCompany,\n  deleteExperience,\n  uploadAward,\n  viewProfile,\n  getUnenabledManagers,\n  flagCompany,\n  getEducationById,\n  editEducation,\n  updateAbout,\n  sendViewNotification,\n  accept,\n  deleteNotification,\n  getAllCompanies,\n  getUserById,\n  getCurrentImage,\n  deleteDevLang,\n  updateCompanyPost,\n  uploadAboutCompany,\n  getImageById,\n  getNormalLang,\n  uploadNormalLang,\n  deleteNormalLang,\n  getDevLang,\n  getCurrentCompanyImage,\n  getUsersLike,\n  getCompanyImageById,\n  handleNotif,\n  uploadDevLang,\n  handleSingleNotif,\n  uploadCompanyPost,\n  sendMessage,\n  uploadCvLink,\n  uploadCompanyLink,\n  getMessages,\n  likePost,\n  flagStudent,\n  unlikePost,\n  deleteMesssage,\n  uploadStudentPost,\n  uploadStudentComment,\n  uploadCompanyComment,\n  getAllNotifications,\n  getLikesByPost,\n  getPosts,\n  getPostById,\n  contactUs,\n  priveCv,\n  unpriveCv,\n  getEtablishements,\n  getNonPrivatePosts,\n  getAll,\n  updateStudentPost,\n  getCvLinks,\n  getCompanyLinks,\n  enable,\n  deleteMessage,\n  deleteComment,\n  updateStudentComment,\n  updateCompanyComment,\n  likeComment,\n  deletePostById,\n  getPostComments,\n  unlikeComment,\n  imageLink,\n  uploadImageUrl,\n  uploadImageUrlCompany,\n  updateCompanyPost,\n};\nexport default userService;\n","/home/bobhhy/forum-last/src/Components/Header/Header.jsx",["430"],"import React, { useState, useEffect, initialState } from \"react\";\nimport \"./Header.css\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport HeaderOption from \"./HeaderOption/HeaderOption\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport Button from \"@material-ui/core/Button\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport DropdownMenu from \"./HeaderOption/DropdowMenu/DropdownMenu\";\nimport Search from \"./Search/Search\";\nimport SearchMenu from \"./Search/SearchMenu/SearchMenu\";\nimport userService from \"../../services/userService\";\nimport logo from \"../../logo.png\";\n\nfunction Header({ image, onChange, refreshHome }) {\n  const [user, setUser] = useState(initialState);\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    async function getUserData() {\n      await userService.getUserData().then((response) => {\n        setUser(response?.data);\n      });\n    }\n    getUserData();\n  }, [count]);\n  const history = useHistory();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const handleButtonClick = (pageURL) => {\n    history.push(pageURL);\n  };\n  const handleSearch = (e) => {\n    e.target.style.marginLeft = \"20px\";\n  };\n  const handleNotif = () => {\n    try {\n      userService.handleNotif();\n      setCount(count + 1);\n    } catch (err) {\n      // Handle Error Here\n      console.error(err);\n    }\n  };\n  const badge = user?.notifications.filter((x) => x.status === false).length;\n  return (\n    <div className=\"header\">\n      <div className=\"header_left align-items-center\">\n        <Link to=\"/\">\n          <img src={logo} alt=\"Logo\" className=\"logo\" />\n        </Link>\n        {/* SearchIcon */}\n        {user && !isMobile && (\n          <Search>\n            <SearchMenu />\n          </Search>\n        )}\n      </div>\n      <div className=\"header_right align-items-center\" id=\"myDiv\">\n        {user ? (\n          <>\n            <HeaderOption\n              Icon={HomeIcon}\n              title=\"Home\"\n              isMobile={isMobile}\n              onClick={() => {\n                handleNotif();\n                onChange(!refreshHome);\n              }}\n            />\n            <HeaderOption\n              Icon={SupervisorAccountIcon}\n              title=\"MyNetwork\"\n              isMobile={isMobile}\n              onClick={handleNotif}\n            />\n            <HeaderOption\n              Icon={ChatIcon}\n              title=\"Messages\"\n              isMobile={isMobile}\n              onClick={handleNotif}\n            />\n            <HeaderOption\n              Icon={NotificationsIcon}\n              title=\"Notifications\"\n              isMobile={isMobile}\n              badge={badge}\n              onClick={handleNotif}\n            />\n            <HeaderOption\n              image={\n                user?.roles[0]?.id === 1\n                  ? userService.imageLink + user?.cv?.image\n                  : userService.imageLink + user?.company?.companyImage\n              }\n              className=\"wrapper button\"\n              title={\"@\" + user?.username.split(\" \")[0]}\n              titleIcon={<ArrowDropDownIcon />}\n              isMobile={isMobile}\n            >\n              <DropdownMenu image={image} user={user} />\n            </HeaderOption>\n          </>\n        ) : (\n          <>\n            <Button\n              variant=\"contained\"\n              className=\"button\"\n              onClick={() => handleButtonClick(\"/login\", true)}\n            >\n              LOG IN\n            </Button>\n            <Button\n              variant=\"contained\"\n              className=\"button\"\n              onClick={() => handleButtonClick(\"/register\")}\n            >\n              REGISTER\n            </Button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","/home/bobhhy/forum-last/src/Components/Signup/SignUp.jsx",["431","432","433","434","435"],"import React, { useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router-dom\";\nimport authService from \"../../services/authService\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport login from \"../../login.jfif\";\nimport userService from \"../../services/userService\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport Modal from \"react-bootstrap/Modal\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    flexGrow: 1,\n  },\n  tab: {\n    width: \"50%\",\n  },\n  paper: {\n    margin: theme.spacing(0, 4),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  typo: {\n    marginTop: \"2vh\",\n    marginBottom: \"2vh\",\n  },\n  image: {\n    backgroundImage: `url(${login})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundColor:\n      theme.palette.type === \"light\"\n        ? theme.palette.grey[50]\n        : theme.palette.grey[900],\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n  },\n}));\nfunction validateEmail(email) {\n  const re =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\nexport default function SignUp({ user }) {\n  const history = useHistory();\n  const classes = useStyles();\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const [companyName, setCompanyName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errors, setErrors] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [loading, setLoading] = useState(\"\");\n  const [successful, setSuccessful] = useState(\"\");\n  const [value, setValue] = useState(0);\n  const [etablishments, setEtablishments] = useState([]);\n  const [etablishment, setEtablishment] = useState(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  useEffect(() => {\n    if (user) {\n      history.push(\"/profile\");\n    }\n    async function getEtablishments() {\n      await userService.getEtablishements().then((response) => {\n        setEtablishments(response.data);\n      });\n    }\n    getEtablishments();\n  }, []);\n  const handleChangeFirstName = (e) => {\n    const firstName = e.target.value;\n    setFirstName(firstName);\n    if (firstName.length === 0) {\n      setErrors({ ...errors, firstName: \"First name is required\" });\n    } else {\n      setErrors({ ...errors, firstName: null });\n    }\n  };\n  const handleChangeLastName = (e) => {\n    const lastName = e.target.value;\n    setLastName(lastName);\n    if (lastName.length === 0) {\n      setErrors({ ...errors, lastName: \"Last name is required\" });\n    } else {\n      setErrors({ ...errors, lastName: null });\n    }\n  };\n  const handleChangeUsername = (e) => {\n    const userName = e.target.value;\n    setUserName(userName);\n    if (userName.length === 0) {\n      setErrors({ ...errors, userName: \"User name is required\" });\n    } else {\n      setErrors({ ...errors, userName: null });\n      if (userName?.length < 3)\n        setErrors({\n          ...errors,\n          userName: \"User name must be equal or greater than 3\",\n        });\n    }\n  };\n  const handleChangeEmail = (e) => {\n    const email = e.target.value;\n    setEmail(email);\n    if (email.length === 0) {\n      setErrors({ ...errors, email: \"Email is required\" });\n    } else if (!email.endsWith(\"@uit.ac.ma\") && value === 0) {\n      setErrors({ ...errors, email: \"Use your university email\" });\n    } else {\n      setErrors({ ...errors, email: null });\n      if (!validateEmail(email)) {\n        setErrors({ ...errors, email: \"Invalid email format\" });\n      }\n    }\n  };\n  const handleChangeEtablishment = (e) => {\n    const etablishment = e.target.value;\n    setEtablishment(etablishment);\n    if (etablishment == 0) {\n      setErrors({ ...errors, etablishment: \"Etablishement is required\" });\n    } else {\n      setErrors({ ...errors, etablishment: null });\n    }\n  };\n\n  const handleChangeCompanyName = (e) => {\n    const companyName = e.target.value;\n    setCompanyName(companyName);\n    if (companyName.length === 0) {\n      setErrors({ ...errors, companyName: \"User name is required\" });\n    } else {\n      setErrors({ ...errors, companyName: null });\n    }\n  };\n\n  const handleChangePassword = (e) => {\n    const password = e.target.value;\n    setPassword(password);\n    if (password?.length === 0) {\n      setErrors({ ...errors, password: \"Password required\" });\n    } else {\n      setErrors({ ...errors, password: null });\n      if (password?.length < 8)\n        setErrors({\n          ...errors,\n          password: \"Password must be equal or greater than 8\",\n        });\n    }\n  };\n  const handleStudentSignup = (e) => {\n    e.preventDefault();\n    if (etablishment == 0) {\n      setErrors({ ...errors, etablishment: \"Etablishement is required\" });\n      return 0;\n    }\n    setMessage(\"\");\n    setLoading(true);\n    if (!Object.values(errors).some((x) => x !== null && x !== \"\")) {\n      setLoading(true);\n      const name =\n        firstName.split(\" \").join(\"\").toLowerCase() +\n        \" \" +\n        lastName.split(\" \").join(\"\").toLowerCase();\n      const userNamex = userName.toLowerCase();\n      const emailx = email.toLowerCase();\n      authService\n        .register(name, \"\", userNamex, emailx, password, 1, etablishment)\n        .then(\n          (response) => {\n            setMessage(response.data.message);\n            setSuccessful(true);\n            setLoading(false);\n          },\n          (error) => {\n            const resMessage =\n              (error.response &&\n                error.response.data &&\n                error.response.data.message) ||\n              error.message ||\n              error.toString();\n\n            setMessage(resMessage);\n            setSuccessful(false);\n            setLoading(false);\n          }\n        );\n    } else {\n      setLoading(false);\n    }\n  };\n  const handleManagerSignup = (e) => {\n    e.preventDefault();\n    setMessage(\"\");\n    setLoading(true);\n    if (!Object.values(errors).some((x) => x !== null && x !== \"\")) {\n      setLoading(true);\n      const name =\n        firstName.split(\" \").join(\"\").toLowerCase() +\n        \" \" +\n        lastName.split(\" \").join(\"\").toLowerCase();\n      const userNamex = userName.toLowerCase();\n      const emailx = email.toLowerCase();\n      authService\n        .register(name, companyName, userNamex, emailx, password, 3)\n        .then(\n          (response) => {\n            setMessage(\"Please wait for the admin to enable your account\");\n            setSuccessful(true);\n            setLoading(false);\n          },\n          (error) => {\n            const resMessage =\n              (error.response &&\n                error.response.data &&\n                error.response.data.message) ||\n              error.message ||\n              error.toString();\n\n            setMessage(resMessage);\n            setSuccessful(false);\n            setLoading(false);\n          }\n        );\n    }\n  };\n  const [show, setShow] = useState(false);\n  return (\n    <Grid container component=\"main\" className={classes.root}>\n      <CssBaseline />\n\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n        {loading && (\n          <div className={classes.root}>\n            <LinearProgress />\n          </div>\n        )}\n        <div className={classes.paper}>\n          <Paper className={classes.root}>\n            <Tabs\n              value={value}\n              onChange={handleChange}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              centered\n            >\n              <Tab label=\"Student Registration\" className={classes.tab} />\n              <Tab label=\"Manager Registration\" />\n            </Tabs>\n          </Paper>\n\n          {!successful && value === 0 && (\n            <>\n              <Typography component=\"h1\" variant=\"h5\" className={classes.typo}>\n                Sign up as a Student\n              </Typography>\n              <form\n                className={classes.form}\n                onSubmit={handleStudentSignup}\n                Validate\n              >\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      autoComplete=\"fname\"\n                      name=\"firstName\"\n                      variant=\"outlined\"\n                      required\n                      fullWidth\n                      error={Boolean(errors?.firstName)}\n                      id=\"firstName\"\n                      label=\"First Name\"\n                      value={firstName\n                        .split(\" \")\n                        .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                        .join(\" \")}\n                      helperText={errors?.firstName}\n                      onChange={handleChangeFirstName}\n                      autoFocus\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      variant=\"outlined\"\n                      required\n                      fullWidth\n                      id=\"lastName\"\n                      label=\"Last Name\"\n                      name=\"lastName\"\n                      autoComplete=\"lname\"\n                      value={lastName\n                        .split(\" \")\n                        .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                        .join(\" \")}\n                      onChange={handleChangeLastName}\n                      error={Boolean(errors?.lastName)}\n                      helperText={errors?.lastName}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      variant=\"outlined\"\n                      required\n                      fullWidth\n                      id=\"username\"\n                      label=\"Username\"\n                      name=\"username\"\n                      autoComplete=\"username\"\n                      value={userName}\n                      onChange={handleChangeUsername}\n                      error={Boolean(errors?.userName)}\n                      helperText={errors?.userName}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <FormControl variant=\"filled\" xs={12} sm={6}>\n                      <InputLabel id=\"demo-simple-select-label\">\n                        Etablissement\n                      </InputLabel>\n                      <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        value={etablishment}\n                        onChange={handleChangeEtablishment}\n                        error={Boolean(errors?.etablishment)}\n                      >\n                        <MenuItem value={0}>Choose Your Etablishement</MenuItem>\n                        {etablishments.map((etablishment) => {\n                          return (\n                            <MenuItem value={etablishment.id}>\n                              {etablishment.name}\n                            </MenuItem>\n                          );\n                        })}\n                      </Select>\n                      <FormHelperText error={Boolean(errors?.etablishment)}>\n                        {errors?.etablishment}\n                      </FormHelperText>\n                    </FormControl>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      variant=\"outlined\"\n                      required\n                      fullWidth\n                      id=\"email\"\n                      label=\"Email Address\"\n                      name=\"email\"\n                      autoComplete=\"email\"\n                      value={email}\n                      onChange={handleChangeEmail}\n                      error={Boolean(errors?.email)}\n                      helperText={errors?.email}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      value={password}\n                      variant=\"outlined\"\n                      required\n                      fullWidth\n                      name=\"password\"\n                      label=\"Password\"\n                      type=\"password\"\n                      id=\"password\"\n                      onChange={handleChangePassword}\n                      autoComplete=\"current-password\"\n                      error={Boolean(errors?.password)}\n                      helperText={errors?.password}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Button variant=\"primary\" onClick={() => setShow(true)}>\n                      <FormControlLabel\n                        control={\n                          <Checkbox value=\"allowExtraEmails\" color=\"primary\" />\n                        }\n                        label=\"j'accepte les conditions d'utilisations\"\n                      />\n                    </Button>\n                  </Grid>\n\n                  <Modal\n                    size=\"lg\"\n                    show={show}\n                    onHide={() => setShow(false)}\n                    dialogClassName=\"modal-220w\"\n                    aria-labelledby=\"example-custom-modal-styling-title\"\n                  >\n                    <Modal.Header closeButton>\n                      <Modal.Title id=\"example-custom-modal-styling-title\">\n                        <h3>les conditions d'utilisations</h3>\n                      </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                      <p>\n                        Vous êtes actuellement connecté(e) au Site Internet\n                        (www.forum-uit.ma) de La 1ère Edition du Forum Virtuel à\n                        L’Université Ibn Tofail. Tout accès et navigation sur le\n                        site (www.forum-uit.ma) supposent l'acceptation de\n                        l’utilisateur et son respect de l'ensemble de nos\n                        Conditions Générales d’utilisation décrites ci-après :\n                        <br />\n                        <h5>1. ACCESSIBILITE :</h5>\n                        L'accès au site (www.forum-uit.ma) est gratuit. Ce site\n                        est accessible 24h sur 24h et 7 jours sur 7. Cependant,\n                        l'équipe qui coordonne l'administration du site peut\n                        être amenée à interrompre le site ou une partie des\n                        services, notamment pour des opérations de maintenance.\n                        <br />\n                        <h5>2. LES DONNEES PERSONNELLES :</h5>\n                        Le site (wwww.forum-uit.ma) collecte des informations\n                        provenant des visiteurs du site internet au moyen de\n                        formulaire figurant sur ledit site internet. Les\n                        informations personnelles qui sont collectées, notamment\n                        à travers les formulaires d’inscription, ou de création\n                        de CV se limitent à celles qui sont nécessaires pour\n                        générer un CV décrivant de manière détaillée le parcours\n                        de l'étudiant(e) dans l'université IBN TOFAIL.\n                        <br />\n                        Par ailleurs, Vous disposez des droits suivants :\n                        <ul>\n                          <li>\n                            - Demander la mise à jour de vos données, si\n                            celles-ci sont inexactes.\n                          </li>\n                          <li>- Demander la suppression de vos données.</li>\n                          <li>\n                            - Demander la limitation du traitement de vos\n                            données.\n                          </li>\n                          <li>\n                            - Vous opposer ou retirer votre consentement à\n                            l’utilisation, par nos services, de vos coordonnées.\n                          </li>\n                        </ul>\n                        Il est important à préciser que nous mettons en place\n                        tous les moyens adaptés à assurer la confidentialité et\n                        la sécurité de vos données personnelles, de manière à\n                        empêcher leur endommagement, effacement ou accès par des\n                        tiers non autorisés. L’accès à vos données est\n                        strictement limité aux responsables de la gestion du\n                        site (WWW.forum-uit.ma). Cependant les données\n                        collectées pourront éventuellement être communiquées à\n                        des Manager d'entreprises chargés de recrutement ou\n                        représentant des entreprises participant dans le forum.\n                        Il est à préciser que dans le cadre de l’exécution de\n                        leurs prestations, les représentants des entreprises\n                        n’ont qu’un accès limité à vos données et ont une\n                        obligation contractuelle de les utiliser en conformité\n                        avec les dispositions de la législation applicable en\n                        matière de protection des données personnelles.\n                        <br />\n                        <h5>3. MODIFICATION DES CONDITIONS D’UTILISATION :</h5>\n                        L'équipe qui coordonne l'administration du site se\n                        réserve la possibilité de modifier, à tout moment et\n                        sans préavis, les Présentes Conditions d’utilisation\n                        afin de les adapter aux évolutions du site et/ou de son\n                        exploitation.\n                      </p>\n                    </Modal.Body>\n                  </Modal>\n                </Grid>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.submit}\n                >\n                  Sign Up\n                </Button>\n                <Grid container justify=\"flex-end\">\n                  <Grid item>\n                    <Link\n                      href=\"#\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        history.push(\"/login\");\n                      }}\n                      variant=\"body2\"\n                    >\n                      Already have an account? Sign in\n                    </Link>\n                  </Grid>\n                </Grid>\n              </form>\n            </>\n          )}\n          {!successful && value === 1 && (\n            <>\n              <Typography component=\"h1\" variant=\"h5\" className={classes.typo}>\n                Sign up as an Enterprise Manager\n              </Typography>\n              <form\n                className={classes.form}\n                onSubmit={handleManagerSignup}\n                Validate\n              >\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      autoComplete=\"fname\"\n                      name=\"firstName\"\n                      variant=\"outlined\"\n                      required\n                      fullWidth\n                      error={Boolean(errors?.firstName)}\n                      id=\"firstName\"\n                      label=\"First Name\"\n                      value={firstName\n                        .split(\" \")\n                        .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                        .join(\" \")}\n                      helperText={errors?.firstName}\n                      onChange={handleChangeFirstName}\n                      autoFocus\n                    />\n                  </Grid>\n                  <Grid item xs={12} sm={6}>\n                    <TextField\n                      variant=\"outlined\"\n                      required\n                      fullWidth\n                      id=\"lastName\"\n                      label=\"Last Name\"\n                      name=\"lastName\"\n                      autoComplete=\"lname\"\n                      value={lastName\n                        .split(\" \")\n                        .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                        .join(\" \")}\n                      onChange={handleChangeLastName}\n                      error={Boolean(errors?.lastName)}\n                      helperText={errors?.lastName}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      variant=\"outlined\"\n                      required\n                      fullWidth\n                      id=\"username\"\n                      label=\"Company Name\"\n                      name=\"companyName\"\n                      autoComplete=\"companyName\"\n                      value={companyName}\n                      onChange={handleChangeCompanyName}\n                      error={Boolean(errors?.userName)}\n                      helperText={errors?.userName}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      variant=\"outlined\"\n                      required\n                      fullWidth\n                      id=\"username\"\n                      label=\"Username\"\n                      name=\"username\"\n                      autoComplete=\"username\"\n                      value={userName}\n                      onChange={handleChangeUsername}\n                      error={Boolean(errors?.userName)}\n                      helperText={errors?.userName}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      variant=\"outlined\"\n                      required\n                      fullWidth\n                      id=\"email\"\n                      label=\"Email Address\"\n                      name=\"email\"\n                      autoComplete=\"email\"\n                      value={email}\n                      onChange={handleChangeEmail}\n                      error={Boolean(errors?.email)}\n                      helperText={errors?.email}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      value={password}\n                      variant=\"outlined\"\n                      required\n                      fullWidth\n                      name=\"password\"\n                      label=\"Password\"\n                      type=\"password\"\n                      id=\"password\"\n                      onChange={handleChangePassword}\n                      autoComplete=\"current-password\"\n                      error={Boolean(errors?.password)}\n                      helperText={errors?.password}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Button variant=\"primary\" onClick={() => setShow(true)}>\n                      <FormControlLabel\n                        control={\n                          <Checkbox value=\"allowExtraEmails\" color=\"primary\" />\n                        }\n                        label=\"j'accepte les conditions d'utilisations\"\n                      />\n                    </Button>\n                  </Grid>\n\n                  <Modal\n                    show={show}\n                    onHide={() => setShow(false)}\n                    dialogClassName=\"modal-190w\"\n                    aria-labelledby=\"example-custom-modal-styling-title\"\n                  >\n                    <Modal.Header closeButton>\n                      <Modal.Title id=\"example-custom-modal-styling-title\">\n                        <h3>les conditions d'utilisations</h3>\n                      </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                      <p>\n                        Vous êtes actuellement connecté(e) au Site Internet\n                        (www.forum-uit.ma) de La 1ère Edition du Forum Virtuel à\n                        L’Université Ibn Tofail. Tout accès et navigation sur le\n                        site (www.forum-uit.ma) supposent l'acceptation de\n                        l’utilisateur et son respect de l'ensemble de nos\n                        Conditions Générales d’utilisation décrites ci-après :\n                        <br />\n                        <h5>1. ACCESSIBILITE :</h5>\n                        L'accès au site (www.forum-uit.ma) est gratuit. Ce site\n                        est accessible 24h sur 24h et 7 jours sur 7. Cependant,\n                        l'équipe qui coordonne l'administration du site peut\n                        être amenée à interrompre le site ou une partie des\n                        services, notamment pour des opérations de maintenance.\n                        <br />\n                        <h5>2. LES DONNEES PERSONNELLES :</h5>\n                        Le site (wwww.forum-uit.ma) collecte des informations\n                        provenant des visiteurs du site internet au moyen de\n                        formulaire figurant sur ledit site internet. Les\n                        informations personnelles qui sont collectées, notamment\n                        à travers les formulaires d’inscription, ou de création\n                        de CV se limitent à celles qui sont nécessaires pour\n                        générer un CV décrivant de manière détaillée le parcours\n                        de l'étudiant(e) dans l'université IBN TOFAIL.\n                        <br />\n                        Par ailleurs, Vous disposez des droits suivants :\n                        <ul>\n                          <li>\n                            - Demander la mise à jour de vos données, si\n                            celles-ci sont inexactes.\n                          </li>\n                          <li>- Demander la suppression de vos données.</li>\n                          <li>\n                            - Demander la limitation du traitement de vos\n                            données.\n                          </li>\n                          <li>\n                            - Vous opposer ou retirer votre consentement à\n                            l’utilisation, par nos services, de vos coordonnées.\n                          </li>\n                        </ul>\n                        Il est important à préciser que nous mettons en place\n                        tous les moyens adaptés à assurer la confidentialité et\n                        la sécurité de vos données personnelles, de manière à\n                        empêcher leur endommagement, effacement ou accès par des\n                        tiers non autorisés. L’accès à vos données est\n                        strictement limité aux responsables de la gestion du\n                        site (WWW.forum-uit.ma). Cependant les données\n                        collectées pourront éventuellement être communiquées à\n                        des Manager d'entreprises chargés de recrutement ou\n                        représentant des entreprises participant dans le forum.\n                        Il est à préciser que dans le cadre de l’exécution de\n                        leurs prestations, les représentants des entreprises\n                        n’ont qu’un accès limité à vos données et ont une\n                        obligation contractuelle de les utiliser en conformité\n                        avec les dispositions de la législation applicable en\n                        matière de protection des données personnelles.\n                        <br />\n                        <h5>3. MODIFICATION DES CONDITIONS D’UTILISATION :</h5>\n                        L'équipe qui coordonne l'administration du site se\n                        réserve la possibilité de modifier, à tout moment et\n                        sans préavis, les Présentes Conditions d’utilisation\n                        afin de les adapter aux évolutions du site et/ou de son\n                        exploitation.\n                      </p>\n                    </Modal.Body>\n                  </Modal>\n                </Grid>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.submit}\n                >\n                  Sign Up\n                </Button>\n                <Grid container justify=\"flex-end\">\n                  <Grid item>\n                    <Link\n                      href=\"#\"\n                      onClick={(e) => {\n                        e.preventDefault();\n                        history.push(\"/login\");\n                      }}\n                      variant=\"body2\"\n                    >\n                      Already have an account? Sign in\n                    </Link>\n                  </Grid>\n                </Grid>\n              </form>\n            </>\n          )}\n        </div>\n        {message && (\n          <Alert\n            severity={!successful ? \"error\" : \"success\"}\n            onClose={() => {\n              setMessage(null);\n            }}\n          >\n            {message}\n          </Alert>\n        )}\n      </Grid>\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\n    </Grid>\n  );\n}\n","/home/bobhhy/forum-last/src/Components/Home/Home.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/Cv.jsx",["436","437","438","439","440","441","442","443","444","445","446","447","448"],"import Navbar from \"./cv/Navbar\";\nimport \"../js/cv\";\nimport About from \"./cv/About\";\nimport AboutCompany from \"./company/About\";\nimport Nav from \"./company/Nav\";\nimport Education from \"./cv/Education\";\nimport Experience from \"./cv/Experience\";\nimport Skill from \"./cv/Skill\";\nimport Interests from \"./cv/Interest\";\nimport Award from \"./cv/Award\";\nimport React, { useState, useEffect } from \"react\";\nimport userService from \"../../../services/userService\";\nimport Modal from \"react-bootstrap/Modal\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Button from \"@material-ui/core/Button\";\nimport \"react-icons/fa\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport EditAbout from \"./EditCv/EditAbout\";\nimport EditExperience from \"./EditCv/EditExperience\";\nimport EditEducation from \"./EditCv/EditEducation\";\nimport EditDevLanguages from \"./EditCv/EditDevLanguages\";\nimport EditNormalLanguages from \"./EditCv/EditNormalLanguages\";\nimport EditSoftware from \"./EditCv/EditSoftware\";\nimport EditAwards from \"./EditCv/EditAwards\";\nimport BootAccordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport EditAboutCompany from \"./EditCompany/EditAboutCompany\";\nimport EditImage from \"./EditCv/EditImage\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport \"./Cv.css\";\n\n// import EditSkills from \"./Edit Cv/EditSkills\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n    color: \"#fff\",\n  },\n  button: {\n    margin: theme.spacing(1),\n    borderRadius: \"30px\",\n  },\n}));\n\nconst Cv = (props) => {\n  const history = useHistory();\n  const [currentUserId, setCurrentUserId] = useState();\n  const [currentUserRole, setCurrentUserRole] = useState();\n  const [isFriend, setIsFriend] = useState(-1);\n  const [cv, setCv] = useState({});\n  const [company, setCompany] = useState({});\n  const [email, setEmail] = useState(\"\");\n  const [role, setRole] = useState();\n  const [flag, setFlag] = useState(false);\n  const { id } = useParams();\n  const [data, setData] = useState({});\n  const [toggle, setToggle] = useState(false);\n  const [image, setImage] = useState();\n  const [count, setCount] = useState(0);\n  const [modalShow, setModalShow] = useState(false);\n  const classes = useStyles();\n  const [isExperience, setIsExperience] = useState(true);\n  const [switchState, setSwitchState] = useState(true);\n  const handleSwitchChange = () => {\n    if (switchState) {\n      userService.unpriveCv(currentUserId).then((res) => {\n        setSwitchState(!switchState);\n      });\n    } else {\n      userService.priveCv(currentUserId).then((res) => {\n        setSwitchState(!switchState);\n      });\n    }\n  };\n\n  const connectTo = async () => {\n    try {\n      const resp = await userService.connectTo(id);\n      setCount(count + 1);\n    } catch (err) {\n      // Handle Error Here\n      console.error(err);\n    }\n  };\n  const disconnect = async () => {\n    try {\n      await userService.disconnect(id).then((response) => {\n        setCount(count + 1);\n        window.location.reload();\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const handleMessage = () => {\n    history.push(`/Messages/${id}`);\n  };\n\n  useEffect(() => {\n    async function getUserById() {\n      await userService.getUserById(id).then((response) => {\n        setCv(response?.data?.cv);\n        if (response?.data?.cv?.experiences.length === 0) {\n          setIsExperience(false);\n        }\n        setData(response?.data);\n        setSwitchState(response?.data?.cv?.prive);\n        setCompany(response?.data?.company);\n        setEmail(response?.data?.email);\n        setRole(response?.data?.roles[0]?.id);\n        if (response?.data?.roles[0]?.id === 1) {\n          setImage(userService.imageLink + response?.data?.cv?.image);\n        }\n        if (response?.data?.roles[0]?.id === 3) {\n          setImage(\n            userService.imageLink + response?.data?.company?.companyImage\n          );\n        }\n        setFlag(response?.data?.cv?.flag || response?.data?.company?.flag);\n        setToggle(false);\n      });\n    }\n    getUserById();\n    async function getUserData() {\n      await userService.getUserData().then((response) => {\n        setCurrentUserId(response?.data?.id);\n        setCurrentUserRole(response?.data?.roles[0]?.id);\n        response?.data?.friendshipSended.forEach((friendship) => {\n          if (friendship.id.receiverId == id) {\n            if (friendship.status === false) {\n              setIsFriend(0);\n            } else {\n              setIsFriend(1);\n            }\n          }\n        });\n        response?.data?.friendshipReceived.forEach((friendship) => {\n          if (friendship.id.senderId == id) {\n            if (friendship.status === false) {\n              setIsFriend(0);\n            } else {\n              setIsFriend(1);\n            }\n          }\n        });\n      });\n    }\n    getUserData();\n    async function sendViewNotif() {\n      if (\n        currentUserId != id &&\n        currentUserRole == 3 &&\n        role==1 \n      ) {\n        await userService.sendViewNotification(id, currentUserId);\n      }\n    }\n    sendViewNotif();\n    if (currentUserId != id ) {\n      function viewProfile() {\n        userService.viewProfile(currentUserId, id);\n      }\n      viewProfile();\n    }\n  }, [count, currentUserRole, toggle,role]);\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <Modal\n        {...props}\n        size={role === 1 ? \"xl\" : \"lg\"}\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Editing Profile\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className={classes.root}>\n            <Accordion>\n              <AccordionSummary\n                expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\n                aria-controls=\"panel1a-content\"\n                id=\"panel1a-header\"\n                className=\"bg-dark text-white\"\n              >\n                <Typography className={classes.heading}>Edit Image</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <EditImage\n                  data={data}\n                  role={data?.roles[0]?.id}\n                  toggle={toggle}\n                  onChange={(value) => {\n                    setToggle(value);\n                    setModalShow(false);\n                  }}\n                />\n              </AccordionDetails>\n            </Accordion>\n            <Accordion>\n              <AccordionSummary\n                expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\n                aria-controls=\"panel1a-content\"\n                id=\"panel1a-header\"\n                className=\"bg-dark text-white\"\n              >\n                <Typography className={classes.heading}>\n                  Edit About Section\n                </Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                {role === 1 && (\n                  <EditAbout\n                    data={data?.cv?.about}\n                    id={id}\n                    toggle={toggle}\n                    onChange={(value) => {\n                      setToggle(value);\n                      setModalShow(false);\n                    }}\n                  />\n                )}\n                {role === 3 && (\n                  <EditAboutCompany\n                    data={data?.company?.aboutCompany}\n                    id={data?.id}\n                    toggle={toggle}\n                    onChange={(value) => {\n                      setToggle(value);\n                      setModalShow(false);\n                    }}\n                  />\n                )}\n              </AccordionDetails>\n            </Accordion>\n            {role === 1 && (\n              <>\n                <Accordion>\n                  <AccordionSummary\n                    expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                    className=\"bg-dark text-white\"\n                  >\n                    <Typography className={classes.heading}>\n                      Edit Experience Section\n                    </Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <EditExperience\n                      data={data}\n                      id={id}\n                      toggle={toggle}\n                      onChange={(value) => {\n                        setToggle(value);\n                        setModalShow(false);\n                      }}\n                    />\n                  </AccordionDetails>\n                </Accordion>\n                <Accordion>\n                  <AccordionSummary\n                    expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                    className=\"bg-dark text-white\"\n                  >\n                    <Typography className={classes.heading}>\n                      Edit Education Section\n                    </Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <EditEducation\n                      toggle={toggle}\n                      onChange={(value) => {\n                        setToggle(value);\n                        setModalShow(false);\n                      }}\n                    />\n                  </AccordionDetails>\n                </Accordion>\n                <Accordion>\n                  <AccordionSummary\n                    expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                    className=\"bg-dark text-white\"\n                  >\n                    <Typography className={classes.heading}>\n                      Edit Skills Section\n                    </Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <BootAccordion\n                      defaultActiveKey=\"0\"\n                      className=\"w-100 align-items-center\"\n                    >\n                      <BootAccordion.Toggle\n                        as={Button}\n                        variant=\"link\"\n                        eventKey=\"0\"\n                      >\n                        Dev Languages\n                      </BootAccordion.Toggle>\n                      <BootAccordion.Toggle\n                        as={Button}\n                        variant=\"link\"\n                        eventKey=\"1\"\n                      >\n                        Language\n                      </BootAccordion.Toggle>\n                      <BootAccordion.Toggle\n                        as={Button}\n                        variant=\"link\"\n                        eventKey=\"2\"\n                      >\n                        Softwares\n                      </BootAccordion.Toggle>\n                      <BootAccordion.Collapse eventKey=\"0\">\n                        <Card.Body>\n                          <EditDevLanguages\n                            toggle={toggle}\n                            onChange={(value) => {\n                              setToggle(value);\n                              setModalShow(false);\n                            }}\n                          />\n                        </Card.Body>\n                      </BootAccordion.Collapse>\n\n                      <BootAccordion.Collapse eventKey=\"1\">\n                        <Card.Body>\n                          <EditNormalLanguages\n                            toggle={toggle}\n                            onChange={(value) => {\n                              setToggle(value);\n                              setModalShow(false);\n                            }}\n                          />\n                        </Card.Body>\n                      </BootAccordion.Collapse>\n\n                      <BootAccordion.Collapse eventKey=\"2\">\n                        <Card.Body>\n                          <EditSoftware\n                            toggle={toggle}\n                            onChange={(value) => {\n                              setToggle(value);\n                              setModalShow(false);\n                            }}\n                          />\n                        </Card.Body>\n                      </BootAccordion.Collapse>\n                    </BootAccordion>\n                  </AccordionDetails>\n                </Accordion>\n                <Accordion>\n                  <AccordionSummary\n                    expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                    className=\"bg-dark text-white\"\n                  >\n                    <Typography className={classes.heading}>\n                      Edit Awards Section\n                    </Typography>\n                  </AccordionSummary>\n                  <AccordionDetails>\n                    <EditAwards data={data} />\n                  </AccordionDetails>\n                </Accordion>\n              </>\n            )}\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={props.onHide}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n\n  return (\n    <>\n      {flag && (\n        <div className=\"cv_body\">\n          <MyVerticallyCenteredModal\n            show={modalShow}\n            onHide={() => {\n              setModalShow(false);\n              setToggle(!toggle);\n            }}\n          />\n          {role === 1 && (\n            <div id=\"page-top\">\n              <Navbar image={image} isExperience={isExperience} />\n              {/* Page Content*/}\n              <div className=\"container-fluid p-0\">\n                <hr className=\"m-0 pt-5 mr-3\" />\n                {/* {props.id === currentUserId && <Edit data={data} />} */}\n                <div className=\"d-flex flex-row-reverse mr-5\">\n                  {currentUserId == id ? (\n                    <>\n                      <Button\n                        onClick={() => setModalShow(true)}\n                        variant=\"contained\"\n                        size=\"medium\"\n                        style={{\n                          position: \"fixed\",\n                          top: \"18vh\",\n                          right: \"2vw\",\n                        }}\n                        startIcon={\n                          <EditIcon\n                            style={{\n                              maxWidth: \"30px\",\n                              maxHeight: \"30px\",\n                              minWidth: \"30px\",\n                              minHeight: \"30px\",\n                            }}\n                          />\n                        }\n                      >\n                        Edit Your Profile\n                      </Button>\n                      <Tooltip title=\"En mode privé, vos informations et vos postes ne sont pas visibles aux étudiants inconnus\">\n                        <FormControlLabel\n                          style={{\n                            position: \"fixed\",\n                            top: \"28vh\",\n                            right: \"5vw\",\n                          }}\n                          control={\n                            <Switch\n                              checked={switchState}\n                              onChange={handleSwitchChange}\n                              color=\"primary\"\n                            />\n                          }\n                          label=\"Mode privé\"\n                        />\n                      </Tooltip>\n                    </>\n                  ) : (\n                    <div\n                      className=\"buttons d-flex\"\n                      style={{ position: \"fixed\", top: \"18vh\", right: \"2vw\" }}\n                    >\n                      {isFriend === 1 && (\n                        <>\n                          <Button\n                            variant=\"contained\"\n                            color=\"danger\"\n                            className={classes.button}\n                            onClick={disconnect}\n                          >\n                            Disconnect\n                          </Button>\n                          <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleMessage}\n                            className={classes.button}\n                            endIcon={<SendIcon />}\n                          >\n                            Message\n                          </Button>\n                        </>\n                      )}\n                      {isFriend === 0 && (\n                        <Button\n                          variant=\"contained\"\n                          disabled\n                          className={classes.button}\n                        >\n                          Sent\n                        </Button>\n                      )}\n                      {isFriend === -1 && (\n                        <Button\n                          variant=\"contained\"\n                          color=\"primary\"\n                          className={classes.button}\n                          onClick={connectTo}\n                        >\n                          Connect\n                        </Button>\n                      )}\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        endIcon={<MoreHorizIcon />}\n                      >\n                        More\n                      </Button>\n                    </div>\n                  )}\n                </div>\n                {/* About*/}\n\n                {currentUserId != id &&\n                switchState &&\n                currentUserRole == 1 &&\n                isFriend != 1 ? (\n                  <h2>Cet utilisateur a un profil privé</h2>\n                ) : (\n                  <>\n                    {\" \"}\n                    <About data={data} email={email} />\n                    {isExperience && (\n                      <>\n                        <hr className=\"m-0\" />\n                        {/* Experience*/}\n                        <Experience data={cv?.experiences} />\n                      </>\n                    )}\n                    <hr className=\"m-0\" />\n                    {/* Education*/}\n                    <Education data={cv?.educations} />\n                    <hr className=\"m-0\" />\n                    {/* Skills*/}\n                    <Skill\n                      dev={cv?.devLanguages}\n                      normal={cv?.normalLanguages}\n                      software={cv?.softwares}\n                    />\n                    <hr className=\"m-0\" />\n                    {/* Interests*/}\n                    <Interests data={cv?.about?.interests} />\n                    <hr className=\"m-0\" />\n                    {/* Awards*/}\n                    {cv?.awards.length !== 0 && <Award data={cv?.awards} />}\n                  </>\n                )}\n              </div>\n            </div>\n          )}\n\n          {role === 3 && (\n            <div id=\"page-top\">\n              {currentUserId == id ? (\n                <Button\n                  onClick={() => setModalShow(true)}\n                  variant=\"contained\"\n                  size=\"medium\"\n                  style={{ position: \"fixed\", top: \"18vh\", right: \"2vw\" }}\n                  startIcon={\n                    <EditIcon\n                      style={{\n                        maxWidth: \"30px\",\n                        maxHeight: \"30px\",\n                        minWidth: \"30px\",\n                        minHeight: \"30px\",\n                      }}\n                    />\n                  }\n                >\n                  Edit Your Profile\n                </Button>\n              ) : (\n                <div\n                  className=\"buttons d-flex\"\n                  style={{ position: \"fixed\", top: \"18vh\", right: \"2vw\" }}\n                >\n                  {isFriend === 1 && (\n                    <>\n                      <Button\n                        variant=\"contained\"\n                        color=\"danger\"\n                        className={classes.button}\n                        onClick={disconnect}\n                      >\n                        Disconnect\n                      </Button>\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        endIcon={<SendIcon />}\n                        onClick={handleMessage}\n                      >\n                        Message\n                      </Button>\n                    </>\n                  )}\n                  {isFriend === 0 && (\n                    <Button\n                      variant=\"contained\"\n                      disabled\n                      className={classes.button}\n                      onClick={connectTo}\n                    >\n                      Sent\n                    </Button>\n                  )}\n                  {isFriend === -1 && (\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.button}\n                      onClick={connectTo}\n                    >\n                      Connect\n                    </Button>\n                  )}\n\n                  <Button\n                    variant=\"contained\"\n                    className={classes.button}\n                    endIcon={<MoreHorizIcon />}\n                  >\n                    More\n                  </Button>\n                </div>\n              )}\n              <Nav id={id} image={image} />\n              <AboutCompany data={company} email={email} />\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\nexport default Cv;\n","/home/bobhhy/forum-last/src/services/authService.js",[],"/home/bobhhy/forum-last/src/Components/Presentation/NavbarElements.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/CompanyProfile.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/StudentProfile.jsx",[],"/home/bobhhy/forum-last/src/Components/Dashboard/ListUsers.jsx",["449","450","451","452","453","454","455"],"import React, { useEffect, useState } from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Title from \"./Title\";\nimport axios from \"axios\";\nimport authHeader from \"../../services/authHeader\";\nimport { Avatar } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Close } from \"@material-ui/icons\";\nimport Button from \"@material-ui/core/Button\";\nimport authService from \"../../services/authService\";\nimport userService from \"../../services/userService\";\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\n\nexport default function ListUsers({ user }) {\n  const classes = useStyles();\n  const [accounts, setAccounts] = useState();\n  const [loading, setLoading] = useState(false)\n  const [count, setCount] = useState(0)\n  const handleDelete = async (id) => {\n    setLoading(true)\n    await authService.deleteUser(id).then((response) => {\n      setCount(count + 1)\n    })\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    function getAll() {\n      userService.getAll()\n        .then((response) => {\n          setAccounts(response?.data);\n        });\n    }\n    getAll();\n  }, [count]);\n  return (\n    <React.Fragment>\n      <Title>All Users</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Id</TableCell>\n            <TableCell>Image</TableCell>\n            <TableCell>Full Name</TableCell>\n            <TableCell>Username</TableCell>\n            <TableCell>Email</TableCell>\n            <TableCell>Role</TableCell>\n            <TableCell align=\"center\">Enabled</TableCell>\n            <TableCell align=\"center\">Delete</TableCell>\n            {/* <TableCell align=\"right\">Sale Amount</TableCell> */}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {accounts?.map(\n            (account) =>\n              account?.id != user?.id && (\n                <TableRow key={account.id}>\n                  <TableCell>{account.id}</TableCell>\n                  <TableCell>\n                    {account.roles[0].id === 1 && (\n                      <Avatar\n                        src={\n                          userService.imageLink +\n                          account.cv.image\n                        }\n                      />\n                    )}\n                    {account.roles[0].id === 2 && (\n                      <Avatar\n                        src={\n                          userService.imageLink + \"admin.jpg\"\n                        }\n                      />\n                    )}\n                    {account.roles[0].id === 3 && (\n                      <Avatar\n                        src={\n                          userService.imageLink +\n                          account.company.companyImage\n                        }\n                      />\n                    )}\n                  </TableCell>\n\n                  <TableCell>\n                    {account.name\n                      .split(\" \")\n                      .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                      .join(\" \")}\n                  </TableCell>\n                  <TableCell>{account.username}</TableCell>\n                  <TableCell>{account.email}</TableCell>\n                  <TableCell>\n                    {account.roles[0].id === 1 && \"Student\"}\n                    {account.roles[0].id === 2 && \"Admin\"}\n                    {account.roles[0].id === 3 && \"Manager\"}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {account.enabled && (\n                      <span className=\"text-success\">Yes</span>\n                    )}\n                    {!account.enabled && (\n                      <span className=\"text-danger\">No</span>\n                    )}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <Button disabled={loading} onClick={() => {\n                      handleDelete(account.id)\n                    }}>\n                      <CloseIcon\n                        color=\"secondary\"\n                      />\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              )\n          )}\n        </TableBody>\n      </Table>\n\n      {/* <div className={classes.seeMore}>\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\n          See more\n        </Link>\n      </div> */}\n    </React.Fragment>\n  );\n}\n","/home/bobhhy/forum-last/src/Components/Dashboard/Charts.jsx",[],"/home/bobhhy/forum-last/src/Components/Dashboard/Statistics.jsx",["456","457","458","459"],"import React, { useState, useEffect } from \"react\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TrendingDownIcon from \"@material-ui/icons/TrendingDown\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Title2 from \"./Title\";\nimport { Avatar } from \"@material-ui/core\";\n\nimport TableRow from \"@material-ui/core/TableRow\";\nimport {\n  Chart,\n  BarSeries,\n  Title,\n  ArgumentAxis,\n  ValueAxis,\n} from \"@devexpress/dx-react-chart-material-ui\";\nimport authHeader from \"../../services/authHeader\";\n\nimport { Animation } from \"@devexpress/dx-react-chart\";\nimport axios from \"axios\";\nimport userService from \"../../services/userService\";\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n  root: {\n    width: \"20vw\",\n    minWidth: \"400px\",\n    margin: \"1vh 0vw\",\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  cardcontainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    maxWidth: \"500px\",\n  },\n  chartcontainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    maxWidth: \"1000px\",\n    maxHeight: \"500px\",\n    marginRight: \"2vw\",\n  },\n  chartpaper: {\n    minWidth: \"700px\",\n    width: \"1000px\",\n  },\n  maincontainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  maincontainer2: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    marginTop: \"2vh\",\n  },\n  flexing: {\n    display: \"flex\",\n  },\n  tablee: {\n    maxWidth: \"1000px\",\n  },\n}));\n\nconst data = [\n  { day: \"12/04\", visitors: 80 },\n  { day: \"13/04\", visitors: 120 },\n  { day: \"14/04\", visitors: 135 },\n  { day: \"15/04\", visitors: 126 },\n  { day: \"16/04\", visitors: 179 },\n  { day: \"17/04\", visitors: 207 },\n];\n\nexport default function ListUsers({ user }) {\n  const classes = useStyles();\n  const [accounts, setAccounts] = useState();\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    async function getAll() {\n      await axios\n        .get(\"https://www.forum-uit.codes/api/profile/getall\", {\n          headers: authHeader(),\n        })\n        .then((response) => {\n          setAccounts(response?.data);\n        });\n    }\n    getAll();\n  }, [count]);\n\n  return (\n    <div>\n      <div className={classes.maincontainer}>\n        <div className={classes.flexing}>\n          <div className={classes.chartcontainer}>\n            <Paper className={classes.chartpaper}>\n              <Chart data={data}>\n                <ArgumentAxis />\n                <ValueAxis max={7} />\n                <BarSeries valueField=\"visitors\" argumentField=\"day\" />\n                <Title text=\"Daily Visitors\" />\n                <Animation />\n              </Chart>\n            </Paper>\n          </div>\n          <div className={classes.cardcontainer}>\n            <Card className={classes.root} variant=\"outlined\">\n              <CardContent>\n                <Typography variant=\"h5\" gutterBottom>\n                  Visitors\n                </Typography>\n                <Typography className={classes.pos} color=\"textSecondary\">\n                  Today\n                </Typography>\n                <Typography variant=\"h4\" component=\"p\">\n                  {Math.ceil(Math.random() * 300)}{\" \"}\n                  <TrendingUpIcon\n                    style={{ color: \"#4caf50\" }}\n                    fontSize=\"small\"\n                  />\n                  <span\n                    style={{\n                      color: \"#4caf50\",\n                      fontSize: \"18px\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    5.5%\n                  </span>\n                  <br />\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  Last 7 days: 74{\" \"}\n                  <ArrowUpwardIcon\n                    style={{ color: \"#4caf50\" }}\n                    fontSize=\"small\"\n                  />\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button size=\"small\" variant=\"contained\" color=\"secondary\">\n                  Learn More\n                </Button>\n              </CardActions>\n            </Card>\n            <Card className={classes.root} variant=\"outlined\">\n              <CardContent>\n                <Typography variant=\"h5\" gutterBottom>\n                  Visitors\n                </Typography>\n                <Typography className={classes.pos} color=\"textSecondary\">\n                  Today\n                </Typography>\n                <Typography variant=\"h4\" component=\"p\">\n                  {Math.ceil(Math.random() * 300)}{\" \"}\n                  <TrendingDownIcon\n                    style={{ color: \"#d50000\" }}\n                    fontSize=\"small\"\n                  />\n                  <span\n                    style={{\n                      color: \"#d50000\",\n                      fontSize: \"18px\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    5.5%\n                  </span>\n                  <br />\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  Last 7 days: -20{\" \"}\n                  <ArrowDownwardIcon\n                    style={{ color: \"#d50000\" }}\n                    fontSize=\"small\"\n                  />\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button size=\"small\" variant=\"contained\" color=\"secondary\">\n                  Learn More\n                </Button>\n              </CardActions>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      <div className={classes.maincontainer2}>\n        <div className={classes.flexing}>\n          <div className={classes.chartcontainer}>\n            <Paper className={classes.chartpaper}>\n              <Title2>&nbsp; Logged In Users</Title2>\n              <Card className={classes.tablee}>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Id</TableCell>\n                      <TableCell>Image</TableCell>\n                      <TableCell>Full Name</TableCell>\n                      <TableCell>Username</TableCell>\n                      <TableCell>Email</TableCell>\n                      <TableCell>Role</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {accounts?.slice(0, 5).map(\n                      (account) =>\n                        account.id != user.id && (\n                          <TableRow key={account.id}>\n                            <TableCell>{account.id}</TableCell>\n                            <TableCell>\n                              {account.roles[0].id === 1 && (\n                                <Avatar\n                                  src={\n                                    userService.imageLink +\n                                    account.cv.image\n                                  }\n                                />\n                              )}\n                              {account.roles[0].id === 2 && (\n                                <Avatar\n                                  src={\n                                    userService.imageLink + \"admin.jpg\"\n                                  }\n                                />\n                              )}\n                              {account.roles[0].id === 3 && (\n                                <Avatar\n                                  src={\n                                    \"https://www.forum-uit.codes/upload/static/images/\" +\n                                    account.company.companyImage\n                                  }\n                                />\n                              )}\n                            </TableCell>\n\n                            <TableCell>\n                              {account.name\n                                .split(\" \")\n                                .map(\n                                  (e) => e.charAt(0).toUpperCase() + e.slice(1)\n                                )\n                                .join(\" \")}\n                            </TableCell>\n                            <TableCell>{account.username}</TableCell>\n                            <TableCell>{account.email}</TableCell>\n                            <TableCell>\n                              {account.roles[0].id === 1 && \"Student\"}\n                              {account.roles[0].id === 2 && \"Admin\"}\n                              {account.roles[0].id === 3 && \"Manager\"}\n                            </TableCell>\n                          </TableRow>\n                        )\n                    )}\n                  </TableBody>\n                </Table>\n              </Card>\n            </Paper>\n          </div>\n          <div className={classes.cardcontainer}>\n            <Card className={classes.root} variant=\"outlined\">\n              <CardContent>\n                <Typography variant=\"h5\" gutterBottom>\n                  Visitors\n                </Typography>\n                <Typography className={classes.pos} color=\"textSecondary\">\n                  Today\n                </Typography>\n                <Typography variant=\"h4\" component=\"p\">\n                  {Math.ceil(Math.random() * 300)}{\" \"}\n                  <TrendingDownIcon\n                    style={{ color: \"#d50000\" }}\n                    fontSize=\"small\"\n                  />\n                  <span\n                    style={{\n                      color: \"#d50000\",\n                      fontSize: \"18px\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    5.5%\n                  </span>\n                  <br />\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  Last 7 days: -20{\" \"}\n                  <ArrowDownwardIcon\n                    style={{ color: \"#d50000\" }}\n                    fontSize=\"small\"\n                  />\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button size=\"small\" variant=\"contained\" color=\"secondary\">\n                  Learn More\n                </Button>\n              </CardActions>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/bobhhy/forum-last/src/Components/Dashboard/Enable.jsx",["460"],"import React, { useEffect, useState } from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Title from \"./Title\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport { Avatar } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport axios from \"axios\";\nimport userService from \"../../services/userService\";\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function ListUsers({ refresh, onChange }) {\n  const classes = useStyles();\n  const [count, setCount] = useState(0);\n  const [accounts, setAccounts] = useState([]);\n  useEffect(() => {\n    function getAll() {\n      userService.getUnenabledManagers().then((response) => {\n        setAccounts(response?.data);\n      });\n    }\n    getAll();\n  }, [count]);\n\n  const enableManager = (id) => {\n    userService.enable(id).then((response) => {\n      onChange(!refresh);\n      setCount(count + 1);\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <Title>Unenabled Managers</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Id</TableCell>\n            <TableCell>Image</TableCell>\n            <TableCell>Full Name</TableCell>\n            <TableCell>Username</TableCell>\n            <TableCell>Email</TableCell>\n            <TableCell>Type</TableCell>\n            <TableCell>Enable</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {accounts?.map((account) => (\n            <TableRow key={account.id}>\n              <TableCell>{account.id}</TableCell>\n              <TableCell>\n                {account.roles[0].id === 1 && (\n                  <Avatar src={userService.imageLink + account.cv.image} />\n                )}\n                {account.roles[0].id === 3 && (\n                  <Avatar\n                    src={userService.imageLink + account.company.companyImage}\n                  />\n                )}\n              </TableCell>\n\n              <TableCell>\n                {account.name\n                  .split(\" \")\n                  .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                  .join(\" \")}\n              </TableCell>\n              <TableCell>{account.username}</TableCell>\n              <TableCell>{account.email}</TableCell>\n              <TableCell>Manager</TableCell>\n              <TableCell>\n                <Button\n                  onClick={() => {\n                    enableManager(account.id);\n                  }}\n                >\n                  <CheckIcon style={{ color: \"green\" }} />\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <div className={classes.seeMore}>\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\n          See more\n        </Link>\n      </div>\n    </React.Fragment>\n  );\n}\n","/home/bobhhy/forum-last/src/Components/Home/Feed/SinglePost/SinglePost.jsx",["461","462","463","464","465","466","467","468","469","470"],"import { Avatar, setRef } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport React, { useEffect, useState, initialState } from \"react\";\nimport \"./SinglePost.scss\";\nimport PublicIcon from \"@material-ui/icons/Public\";\nimport InputOption from \"../InputOption/InputOption\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport userService from \"../../../../services/userService\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport axios from \"axios\";\nimport DeleteTwoToneIcon from \"@material-ui/icons/DeleteTwoTone\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport authHeader from \"../../../../services/authHeader\";\nimport Comment from \"../Post/Comments/Comment/Comment\";\nimport \"../Post/Comments/AddComment/AddComment.scss\";\nimport { useParams } from \"react-router-dom\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport ModalImage from \"react-modal-image\";\nimport ThumbUpAltOutlinedIcon from \"@material-ui/icons/ThumbUpAltOutlined\";\nimport Loader from \"react-loader-spinner\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  small: {\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n  },\n  large: {\n    width: theme.spacing(7),\n    height: theme.spacing(7),\n  },\n  paper: {\n    position: \"absolute\",\n    width: \"70vw\",\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function SinglePost(props) {\n  const classes = useStyles();\n  const { postId } = useParams();\n  const [toggleLike, setToggleLike] = useState(false);\n  const [shownLikes, setShownLikes] = useState(initialState);\n  const [modalStyle] = useState(getModalStyle);\n  const [open, setOpen] = useState(false);\n  const [owner, setOwner] = useState(initialState);\n  const [toggleComment, setToggleComment] = useState(false);\n  const [currentUserId, setCurrentUserId] = useState(initialState);\n  // const postId = props?.match?.params?.postId;\n  const [input, setInput] = useState();\n  const [user, setUser] = useState(initialState);\n  const [userImage, setUserImage] = useState(initialState);\n  const [ownerId, setOwnerId] = useState();\n  const [message, setMessage] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [timestamp, setTimestamp] = useState();\n  const [role, setRole] = useState();\n  const [username, setUsername] = useState();\n  const [ownerImage, setOwnerImage] = useState(\"\");\n  const [imageType, setImageType] = useState();\n  const [comments, setComments] = useState([]);\n  const [refresh, setRefresh] = useState(false);\n  const [commentInput, setCommentInput] = useState(\"\");\n  const [likes, setLikes] = useState([]);\n  const [count, setCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const loadingSpinner = async () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n  };\n\n  useEffect(() => {\n    loadingSpinner();\n    async function getUserById() {\n      await userService.getUserById(ownerId).then((response) => {\n        console.log(response?.data);\n        setOwner(response?.data);\n        setUsername(response?.data?.username);\n      });\n    }\n    async function getLikesByPost() {\n      const result = await userService.getLikesByPost(postId);\n      setLikes(result?.data);\n      setShownLikes(result?.data?.length);\n      setRefresh(true);\n      for (let i = 0; i < result?.data?.length; i++) {\n        if (user?.id == result?.data[i]?.likerId) {\n          setToggleLike(true);\n          break;\n        }\n      }\n    }\n    async function getPostById() {\n      await userService.getPostById(postId).then(\n        (response) => {\n          setInput(response?.data?.message);\n          setOwnerId(response?.data?.ownersId);\n          setTimestamp(response?.data?.updatedAt);\n          setRole(response?.data?.role);\n          setMessage(response?.data?.message);\n          setOwnerImage(response?.data?.ownerImage);\n          setImageType(response?.data?.imageType);\n          setComments(response?.data?.comment);\n        },\n        (error) => {\n          setErrorMessage(\"Ce poste a été supprimé\");\n        }\n      );\n    }\n    async function getUserData() {\n      await userService.getUserData().then((response) => {\n        setUser(response?.data);\n        setCurrentUserId(response?.data?.id);\n        if (response?.data?.roles[0]?.id === 1) {\n          setUserImage(response?.data?.cv?.image);\n        } else if (response?.data?.roles[0]?.id === 3) {\n          setUserImage(response?.data?.company?.companyImage);\n        }\n      });\n    }\n    getUserData();\n    getUserById();\n    getPostById();\n    getLikesByPost();\n  }, [refresh, count]);\n  const doReload = () => {\n    setCount(count + 1);\n    console.log(\"ok\");\n  };\n\n  const deleteById = (id) => {\n    userService.deletePostById(id).then((response) => {\n      setRefresh(!refresh);\n    });\n  };\n\n  const updatePost = (id) => {\n    const post = {\n      message: input,\n      role: user?.roles[0]?.id,\n    };\n    if (user?.roles[0]?.id === 1) {\n      userService.updateStudentPost(id, post).then((response) => {\n        setOpen(false);\n        setRefresh(true);\n        setRefresh(false);\n      });\n    } else if (user?.roles[0]?.id === 3) {\n      userService.updateCompanyPost(id, post).then((response) => {\n        setOpen(false);\n        setRefresh(true);\n        setRefresh(false);\n      });\n    }\n  };\n\n  const uploadComment = (id) => {\n    const errors = [];\n    let comment;\n    if (commentInput.length === 0) errors.push(\"Comment cannot be empty.\\n\");\n    if (errors.length !== 0) {\n      return 0;\n    }\n    if (user?.roles[0]?.id === 1) {\n      comment = {\n        message: commentInput,\n        role: 1,\n      };\n      userService.uploadStudentComment(id, comment).then((response) => {\n        setRefresh(!refresh);\n\n        setCommentInput(\"\");\n      });\n    } else if (user?.roles[0]?.id === 3) {\n      comment = {\n        message: commentInput,\n        role: 3,\n      };\n      userService.uploadCompanyComment(id, comment).then((response) => {\n        // window.location.reload();\n        setRefresh(!refresh);\n        setCommentInput(\"\");\n      });\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    const keyCode = e.which || e.keyCode;\n    if (keyCode === 13 && !e.shiftKey) {\n      e.preventDefault();\n      uploadComment(postId);\n    }\n  };\n\n  const likePost = (postId) => {\n    userService.likePost(postId, user.id).then(\n      (response) => {\n        setToggleLike(true);\n        setShownLikes(shownLikes + 1);\n        // setRefresh(true);\n        // setRefresh(false);\n      },\n      (error) => {}\n    );\n  };\n  const unlikePost = (postId) => {\n    userService.unlikePost(postId).then((response) => {\n      // setRefresh(true);\n      // setRefresh(false);\n      setShownLikes(shownLikes - 1);\n      setToggleLike(false);\n    });\n  };\n\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <h2 id=\"simple-modal-title\">Edit your Post</h2>\n      <p id=\"simple-modal-description\">\n        <textarea\n          className=\"inputs form-control col-sm-12 mt-2\"\n          rows=\"4\"\n          maxLength=\"1000\"\n          placeholder=\"Post\"\n          style={{\n            backgroundColor: \"#f3f2ef\",\n            resize: \"none\",\n          }}\n          defaultValue={input}\n          onChange={(e) => setInput(e.target.value)}\n        ></textarea>\n        <Button\n          color=\"primary\"\n          onClick={() => {\n            updatePost(postId);\n          }}\n        >\n          Update\n        </Button>\n      </p>\n      {/* <SimpleModal /> */}\n    </div>\n  );\n\n  return (\n    <div className=\"feed\">\n      <div className=\"post\">\n        {loading && (\n          <Loader\n            type=\"Oval\"\n            // color=\"rgb(63, 63, 63)\"\n            color=\"#6573c3\"\n            height={30}\n            width={30}\n            timeout={1500}\n            className=\"loading_spinner\"\n          />\n        )}\n        {!errorMessage && !loading && (\n          <>\n            <Modal\n              open={open}\n              onClose={handleClose}\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n            >\n              {body}\n            </Modal>\n\n            <div className=\"post_header\">\n              <Link to={`/view/${ownerId}`} style={{ textDecoration: \"none\" }}>\n                {role === 1 && (\n                  <Avatar\n                    src={userService.imageLink + owner?.cv?.image}\n                    className={classes.large}\n                  />\n                )}\n                {role === 3 && (\n                  <Avatar\n                    variant=\"square\"\n                    src={userService.imageLink + owner?.company?.companyImage}\n                    className={classes.large}\n                  />\n                )}\n              </Link>\n\n              <div className=\"post_info\">\n                <h2 style={{ display: \"flex\" }}>\n                  {role === 1 &&\n                    owner?.cv?.about?.firstName +\n                      \" \" +\n                      owner?.cv?.about?.lastName}\n                  {role === 3 && owner?.company?.aboutCompany?.name}\n                </h2>\n                <p>{`@${username}  - ${\n                  role === 1 ? \"Student\" : \"Enterprise\"\n                }`}</p>\n                <span></span>\n                <div className=\"post_date\">\n                  <h6 style={{ color: \"#000\" }}>{timestamp} &nbsp;</h6>\n                  <PublicIcon className=\"global\" style={{ color: \"#000\" }} />\n                </div>\n              </div>\n            </div>\n            <div className=\"post_body\">\n              <div className=\"post_message\">{message}</div>\n              {console.log(`hhh ${postId}`)}\n              {imageType && (\n                <ModalImage\n                  className=\"post_image\"\n                  small={\n                    userService.imageLink + \"post\" + postId + \".\" + imageType\n                  }\n                  large={\n                    userService.imageLink + \"post\" + postId + \".\" + imageType\n                  }\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className=\"post_stats\">\n              <p style={{ fontSize: \"13px\" }}>\n                {shownLikes} likes&nbsp;&nbsp;-&nbsp;&nbsp;\n                {comments?.length} comments\n              </p>\n            </div>\n            <div className=\"post_buttons\">\n              {toggleLike && (\n                <InputOption\n                  Icon={ThumbUpIcon}\n                  title=\"Like\"\n                  color=\"blue\"\n                  onClick={() => unlikePost(postId)}\n                />\n              )}{\" \"}\n              {/* dislike */}\n              {!toggleLike && (\n                <InputOption\n                  Icon={ThumbUpAltOutlinedIcon}\n                  title=\"Like\"\n                  color=\"blue\"\n                  onClick={() => likePost(postId)}\n                />\n              )}\n              {/* like */}\n              <InputOption\n                Icon={CommentIcon}\n                title=\"Comment\"\n                color=\"green\"\n                onClick={() => setToggleComment(!toggleComment)}\n              />\n              {/* {currentUserId !== ownerId && (\n            <InputOption Icon={ShareIcon} title=\"Share\" color=\"purple\" />\n          )} */}\n              {currentUserId === ownerId && (\n                <>\n                  <InputOption\n                    Icon={EditTwoToneIcon}\n                    title=\"Edit\"\n                    color=\"purple\"\n                    onClick={handleOpen}\n                  />\n                  <InputOption\n                    Icon={DeleteTwoToneIcon}\n                    title=\"Delete\"\n                    color=\"red\"\n                    onClick={() => {\n                      deleteById(postId);\n                    }}\n                  />\n                </>\n              )}\n            </div>\n\n            {comments.length !== 0 && (\n              <div className=\"comments-header\">\n                <h4>Comments</h4>\n              </div>\n            )}\n            {toggleComment && (\n              <div className=\"add-comment\">\n                <Avatar\n                  src={\n                    role == 1\n                      ? userService.imageLink + ownerImage\n                      : userService.imageLink + ownerImage\n                  }\n                  className={classes.large}\n                />\n                <textarea\n                  rows=\"4\"\n                  className=\"add-text-area\"\n                  placeholder=\"Add a public comment\"\n                  value={commentInput}\n                  onChange={(e) => setCommentInput(e.target.value)}\n                  onKeyDown={handleKeyDown}\n                />\n              </div>\n            )}\n            {comments?.map((e, key) => (\n              <Comment\n                key={key}\n                onChange={() => {\n                  setRefresh(!refresh);\n                }}\n                refresh={refresh}\n                user={user}\n                commentId={e?.id}\n                message={e?.message}\n                timestamp={e?.updatedAt.substring(0, 10)}\n                username={e?.ownerUsername}\n                firstName={e?.ownerFirstName}\n                lastName={e?.ownerLastName}\n                companyName={e?.companyName}\n                role={e?.role}\n                ownerId={e?.ownersId}\n                currentUserId={user?.id}\n                likes={e?.likes}\n                onChange={(value) => setRefresh(value)}\n                onDelete={() => {\n                  doReload();\n                }}\n              />\n            ))}\n          </>\n        )}\n        {errorMessage && !loading && <span>{errorMessage}</span>}\n      </div>\n    </div>\n  );\n}\n","/home/bobhhy/forum-last/src/Components/Dashboard/Messages.jsx",["471","472","473"],"import React, { useEffect, useState } from \"react\";\nimport Link from \"@material-ui/core/Link\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Title from \"./Title\";\nimport axios from \"axios\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Button from \"@material-ui/core/Button\";\nimport userService from \"../../services/userService\";\n\nconst useStyles = makeStyles((theme) => ({\n  seeMore: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function Messages() {\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState();\n  const [count, setCount] = useState(0);\n  const handleDelete = async (id) => {\n    setLoading(true);\n    await userService.deleteMessage(id).then((response) => {\n      setCount(count + 1);\n    });\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    async function getAll() {\n      await userService.getDashMessages().then((response) => {\n        setMessages(response?.data);\n      });\n    }\n    getAll();\n  }, [count]);\n  return (\n    <React.Fragment>\n      <Title>All Messages</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Id</TableCell>\n            <TableCell>Name</TableCell>\n            <TableCell>Email</TableCell>\n            <TableCell>Message</TableCell>\n            <TableCell align=\"center\">Delete</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {messages?.map((message) => (\n            <TableRow key={message.id}>\n              <TableCell>{message.id}</TableCell>\n              <TableCell>{message.name}</TableCell>\n              <TableCell>{message.email}</TableCell>\n              <TableCell>{message.message}</TableCell>\n              <TableCell align=\"center\">\n                <Button\n                  disabled={loading}\n                  onClick={() => {\n                    handleDelete(message.id);\n                  }}\n                >\n                  <CloseIcon color=\"secondary\" />\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n\n      {/* <div className={classes.seeMore}>\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\n          See more\n        </Link>\n      </div> */}\n    </React.Fragment>\n  );\n}\n","/home/bobhhy/forum-last/src/Components/Presentation/Presentation Children/Footer.jsx",["474","475","476","477","478","479","480","481","482","483"],"import React from 'react'\nimport logo from \"./logo.png\";\nimport { Link } from \"react-router-dom\";\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-6 col-lg-3\">\n                <div className=\"footer-contact\">\n                  <Link to=\"/\">\n                  <img src={logo} alt=\"Logo\" className=\"logo\" />\n                  </Link>\n                  <hr />\n                  <p className=\"pp\">Le Forum Annuel Virtuel De L’Université Ibn Tofail est d’une part un moment d’échange et d’ouverture de l’université sur son environnement régional et national, puis d’autre part, c’est un moment ou le lauréat et étudiant se positionne et se projette.</p>\n                </div>\n              </div>\n              <div className=\"col-md-6 col-lg-3\">\n                <div className=\"footer-link\">\n                  <h2>Allez </h2>\n                  <a href=\"\"><i class=\"fas fa-caret-right\"></i>Accueil</a>\n                  <a href=\"#cliens\"><i class=\"fas fa-caret-right\"></i>A propos</a>\n                  <a href=\"#partenairess\"><i class=\"fas fa-caret-right\"></i>Partenaires</a>\n                  <a href=\"\"><i class=\"fas fa-caret-right\"></i>Contactez-nous</a>\n                </div>\n              </div>\n              <div className=\"col-md-6 col-lg-3\">\n                <div className=\"footer-link\">\n                  <h2>Liens utiles</h2>\n                  <a href=\"https://www.uit.ac.ma/\"><i class=\"fas fa-caret-right\"></i>Université IBN tofail </a>\n                  <a href=\"https://ensa.uit.ac.ma/\"><i class=\"fas fa-caret-right\"></i>ENSA- KENITRA</a>\n                  <a href=\"https://encg.uit.ac.ma/\"><i class=\"fas fa-caret-right\"></i>ENCG- KENITRA</a>\n                  <a href=\"https://cdc.uit.ac.ma/\"><i class=\"fas fa-caret-right\"></i>CDC- KENITRA</a>\n                  <a href=\"https://fsjes.uit.ac.ma/\"><i class=\"fas fa-caret-right\"></i>FSJES- KENITRA</a>\n                </div>\n              </div>\n              <div className=\"col-md-6 col-lg-3\">\n                <div className=\"footer-contact\">\n                  <h2>Nous contacter</h2>\n                  <p><i className=\"fa fa-map-marker-alt\"></i>&nbsp;Campus universitaire, B.P 241, Kénitra - 14 000 - Maroc</p>\n                  <p><i className=\"fa fa-phone-alt\"></i>&nbsp;+212 6 29 10 21 64</p>\n                  <p><i className=\"fa fa-envelope\"></i>&nbsp;info@example.com</p>\n\n                  <h2 className=\"hh\">Nous suivre</h2>\n                  <div className=\"footer-social\">\n                    <a href=\"\"><i class=\"fab fa-twitter\"></i></a>\n                    <a href=\"\"><i class=\"fab fa-facebook-f\"></i></a>\n                    <a href=\"\"><i class=\"fab fa-youtube\"></i></a>\n                    <a href=\"\"><i class=\"fab fa-instagram\"></i></a>\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\"></i></a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"container footer-menu\">\n            <div className=\"f-menu\">\n              <a href=\"\">E-ENTREPRISE</a>\n              <a href=\"\">E-ETUDIANT</a>\n            </div>\n          </div>\n          <div className=\"container copyright\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <p>&copy; <a href=\"#\">2021 FORUM Université IBN TOFAIL</a>. Tous droits réservés</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n    )\n}\n\nexport default Footer\n","/home/bobhhy/forum-last/src/Components/Presentation/Presentation Children/welcome.jsx",["484","485","486","487","488","489"],"/home/bobhhy/forum-last/src/Components/Presentation/Presentation Children/ContactUs.jsx",["490","491","492","493"],"import React, { useState, initialstate } from \"react\";\n\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport stylecontact from \"./stylecontact.module.css\"\nimport messageimg from \"./img/letter.svg\"\nimport contact from \"./contact.module.css\"\nimport userService from \"../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\nfunction validateEmail(email) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\nexport default function ContactUs() {\n  const [nameSend, setNameSend] = useState(\"\");\n  const [emailSend, setEmailSend] = useState(\"\");\n  const [telSend, setTelSend] = useState(\"\");\n  const [messageSend, setMessageSend] = useState(\"\");\n  const [successful, setSuccessful] = useState(initialstate);\n  const [message, setMessage] = useState(\"\");\n  const [open, setOpen] = useState(false);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const sendForm = async () => {\n\n    const contact = {\n      name: nameSend,\n      email: emailSend,\n      telephone: telSend,\n      message: messageSend,\n    }\n    if (nameSend == \"\") {\n      setOpen(true);\n      setMessage(\"Name should not be blank\");\n      setSuccessful(false)\n    }\n    else if (emailSend == \"\") {\n      setOpen(true);\n      setMessage(\"Email should not be blank\");\n      setSuccessful(false)\n    }\n    else if (telSend == \"\") {\n      setOpen(true);\n      setMessage(\"Telephone should not be blank\");\n      setSuccessful(false)\n    }\n    else if (messageSend == \"\") {\n      setOpen(true);\n      setMessage(\"Message should not be blank\");\n      setSuccessful(false)\n    }\n    else {\n      if (!validateEmail(emailSend)) {\n        setOpen(true);\n        setMessage(\"Email format not valid\");\n        setSuccessful(false)\n      }\n      else {\n        await userService.contactUs(contact).then(\n          (response) => {\n            setOpen(true);\n            setMessage(\"Sent\")\n            setSuccessful(true)\n          },\n          (error) => {\n            alert('A name was submitted: ' + nameSend);\n            setOpen(true);\n            setMessage(\"Error While sending the message\");\n            setSuccessful(false)\n          }\n        );\n      }\n\n\n    }\n\n  };\n  return (\n    <section id=\"contact-us\">\n    <div className={`${stylecontact.head}`}>\n\n      <div className={contact.contact1} data-aos=\"fade-up \" data-aos-duration=\"1000\">\n        <div className={contact.container1contact1}>\n          <div className={contact.contact11pic} data1tilt>\n            <img src={messageimg} alt=\"IMG\" />\n          </div>\n\n          <div className={contact.divv}>\n            <span className={contact.contact11form1title}>\n              Contactez-nous\n            </span>\n\n            <div className={contact.wrap1input1} data1validate=\"Name is required\">\n              <input className={contact.input1} type=\"text\" name=\"name\" value={nameSend} placeholder=\"Name\"\n                onChange={(e) => setNameSend(e.target.value)}\n              />\n              <span className={contact.shadow1input1}></span>\n            </div>\n\n            <div className={contact.wrap1input1} data1validate=\"Valid email is required: ex@abc.xyz\">\n              <input className={contact.input1} type=\"text\" name=\"email\" value={emailSend} placeholder=\"Email\"\n                onChange={(e) => setEmailSend(e.target.value)}\n              />\n              <span className={contact.shadow1input1}></span>\n            </div>\n\n            <div className={contact.wrap1input1} data1validate=\"numero de telephone is required\">\n              <input className={contact.input1} type=\"text\" name=\"tel\" value={telSend} placeholder=\"numero de telephone\"\n                onChange={(e) => setTelSend(e.target.value)}\n              />\n              <span className={contact.shadow1input1}></span>\n            </div>\n\n            <div className={contact.wrap1input1} data1validate=\"Message is required\">\n              <textarea className={contact.input1} name=\"message\" value={messageSend} placeholder=\"Message\"\n                onChange={(e) => setMessageSend(e.target.value)}\n              ></textarea>\n              <span className={contact.shadow1input1}></span>\n            </div>\n\n            <div className={contact.container1contact11form1btn}>\n              <button\n                className={contact.contact11form1btn}\n                onClick={() => {\n                  sendForm();\n                }}\n              >\n                <span>\n                  Send\n                </span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\n        <Alert\n          onClose={handleClose}\n          severity={successful ? \"success\" : \"error\"}\n        >\n          {message}\n        </Alert>\n      </Snackbar>\n    </div>\n    </section>\n\n\n  );\n}\n","/home/bobhhy/forum-last/src/Components/Presentation/Presentation Children/Team.jsx",["494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517"],"import React, { useEffect } from \"react\";\nimport img1 from \"./img/aniss-moumen.jpeg\";\nimport img2 from \"./img/hassan-berragragui.jpeg\";\nimport img3 from \"./img/safouane.jpeg\";\nimport img4 from \"./img/abdo.jpeg\";\nimport img5 from \"./img/saad.jpg\";\nimport img6 from \"./img/tm1.jpg\";\nimport \"./team.css\";\nimport Aos from \"aos\";\nimport \"aos/dist/aos.css\";\n\nexport default function Team() {\n  useEffect(() => {\n    Aos.init({ duration: 2000 });\n  }, []);\n\n  return (\n    <div className=\"w-100\">\n      <section id=\"team\" class=\"team section-bg\">\n        <div className=\"section-title\">\n              <h2>Team </h2>\n            </div>\n        <div class=\"container mt-4 mb-4\" data-aos=\"fade-up\">\n\n          <div class=\"row mb-5\">\n\n            <div class=\"col-lg-6 \">\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"100\">\n                <div class=\"pic\"><img src={img1} class=\"img-fluid\" alt=\"\" /></div>\n                <div class=\"member-info\">\n                  <h4>Aniss Moumen</h4>\n                  <span>Encadrant</span>\n                  <p>Profeseur à l'école nationale des sciences appliquées de kenitra</p>\n                  <div class=\"social\">\n                    <a href=\"\"><i class=\"fab fa-twitter fa-xs\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-facebook-f fa-xs\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-instagram fa-xs\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-linkedin-in fa-xs\" style={{ color: \"#8b8ef1\" }}></i></a>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-lg-6 mt-4 mt-lg-0\">\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"200\">\n                <div class=\"pic\"><img src={img6} class=\"img-fluid\" alt=\"\" /></div>\n                <div class=\"member-info\">\n                  <h4>Aymane El Mouhtarim</h4>\n                  <span>Fullstack Developer</span>\n                  <p>Eléve ingenieur à l'école nationale des sciences appliquées de kenitra</p>\n                  <div class=\"social\">\n                    <a href=\"\"><i class=\"fab fa-twitter fa-sm\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-facebook-f fa-sm\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-instagram fa-sm\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-linkedin-in fa-sm\" style={{ color: \"#8b8ef1\" }}></i></a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-lg-6 \">\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"100\">\n                <div class=\"pic\"><img src={img5} class=\"img-fluid\" alt=\"\" /></div>\n                <div class=\"member-info\">\n                  <h4>Saad Errazgouni</h4>\n                  <span>Fullstack Developer</span>\n                  <p>Eléve ingenieur à l'école nationale des sciences appliquées de kenitra</p>\n                  <div class=\"social\">\n                    <a href=\"\"><i class=\"fab fa-twitter\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-facebook-f\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-instagram\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\" style={{ color: \"#8b8ef1\" }}></i></a>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-lg-6 mt-4 mt-lg-0\">\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"200\">\n                <div class=\"pic\"><img src={img2} class=\"img-fluid rounded\" alt=\"\" /></div>\n                <div class=\"member-info\">\n                  <h4>Hassan berragragui</h4>\n                  <span>Fullstack Developer</span>\n                  <p>Eléve ingenieur à l'école nationale des sciences appliquées de kenitra</p>\n                  <div class=\"social\">\n                    <a href=\"\"><i class=\"fab fa-twitter\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-facebook-f\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-instagram\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\" style={{ color: \"#8b8ef1\" }}></i></a>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-lg-6 mt-4\">\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"300\">\n                <div class=\"pic\"><img src={img3} class=\"img-fluid rounded\" alt=\"\" /></div>\n                <div class=\"member-info\">\n                  <h4>Safouane Lammari</h4>\n                  <span>Fullstack Developer</span>\n                  <p>Eléve ingenieur à l'école nationale des sciences appliquées de kenitra</p>\n                  <div class=\"social\">\n                    <a href=\"\"><i class=\"fab fa-twitter\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-facebook-f\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-instagram\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\" style={{ color: \"#8b8ef1\" }}></i></a>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-lg-6 mt-4\">\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"300\">\n                <div class=\"pic\"><img src={img4} class=\"img-fluid\" alt=\"\" /></div>\n                <div class=\"member-info\">\n                  <h4>Abdelkhalek Faik</h4>\n                  <span>Mobile Developer</span>\n                  <p>Eléve ingenieur à l'école nationale des sciences appliquées de kenitra</p> \n                  <div class=\"social\">\n                    <a href=\"\"><i class=\"fab fa-twitter\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-facebook-f\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-instagram\" style={{ color: \"#8b8ef1\" }}></i></a>\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\" style={{ color: \"#8b8ef1\" }}></i></a>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n\n          </div>\n\n        </div>\n      </section>\n    </div>\n\n\n\n\n  );\n}\n","/home/bobhhy/forum-last/src/Components/Messages/Sidebar/Sidebar.jsx",["518","519"],"import React, { useState, useEffect } from 'react'\nimport styles from './Sidebar.module.css'\nimport IconButton from '@material-ui/core/IconButton';\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport MessageConversation from './MessageConversation/MessageConversation';\nimport userService from \"../../../services/userService\"\nfunction Sidebar({ forceId, data, setActive, NewConversation }) {\n    const [activeId, setActiveId] = useState(\"\")\n    useEffect(() => {\n        if (forceId) {\n            setActiveId(forceId)\n\n        }\n    }, [activeId])\n    const handleClick = (id) => {\n        setActiveId(id)\n        const current = data.find(conversation => { return (conversation.id == id) })\n        setActive(id, current?.username, current?.date, current?.img)\n    }\n    const NewConversationx = () => {\n        NewConversation()\n        setActiveId(0)\n    }\n    return (\n        <div className={styles.container}>\n            <div className={styles.sidebarNav}>\n                <h3>Messaging</h3>\n                <div className={styles.actions}>\n                    <IconButton onClick={NewConversationx} aria-label=\"New\" >\n                        <BorderColorIcon />\n                    </IconButton>\n                    <IconButton aria-label=\"More\" >\n                        <MoreHorizIcon />\n                    </IconButton>\n                </div>\n            </div>\n            {\n                data.map((conversation, index) => {\n                    const date = new Date(conversation.date)\n                    const dt = date.toLocaleDateString()\n                    return (\n                        <MessageConversation id={conversation.id} onClick={() => { handleClick(conversation.id) }} isActive={activeId === conversation.id} name={conversation.username} message={conversation.lastMessage.message} lastDate={dt} image={userService.imageLink + conversation.img} />\n                    )\n                })\n            }\n\n\n\n        </div>\n    )\n}\n\nexport default Sidebar\n","/home/bobhhy/forum-last/src/Components/Network/Sidebar/Sidebar.jsx",["520","521"],"import { Avatar } from '@material-ui/core'\nimport React from 'react'\nimport styles from './Sidebar.module.css'\nimport PeopleIcon from '@material-ui/icons/People';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport PersonAddSharpIcon from '@material-ui/icons/PersonAddSharp';\nimport PeopleSharpIcon from '@material-ui/icons/PeopleSharp';\nimport EventSharpIcon from '@material-ui/icons/EventSharp';\nimport BusinessSharpIcon from '@material-ui/icons/BusinessSharp';\nfunction capitalizeTheFirstLetterOfEachWord(words) {\n    var separateWord = words?.toLowerCase().split(' ');\n    for (var i = 0; i < separateWord?.length; i++) {\n        separateWord[i] = separateWord[i]?.charAt(0).toUpperCase() +\n            separateWord[i]?.substring(1);\n    }\n    return separateWord?.join(' ');\n}\nfunction Sidebar({ image, user }) {\n    const recentItem = (topic) => (\n        <div className=\"sidebar_recentItem\">\n            <div className=\"sidebar_hash\">#</div>\n            <p>{topic}</p>\n        </div>\n    );\n    return (\n        <div className={styles.sidebar}>\n            <div className={styles.sidebar_stats}>\n                <h1>Manage My Network</h1>\n                <div className={styles.sidebar_stat}>\n                    <p><PeopleIcon /> <span> Connections</span></p>\n                    <p className={styles.sidebar_statNumber}>{user?.friendshipSended.length + user?.friendshipReceived.length}</p>\n                </div>\n                <div className={styles.sidebar_stat}>\n                    <p><VisibilityIcon /> <span> Profile's views</span></p>\n                    <p className={styles.sidebar_statNumber}>{Math.floor(Math.random() * 1000)}</p>\n                </div>\n                <div className={styles.sidebar_stat}>\n                    <p><PersonAddSharpIcon /><span>People I follow</span></p>\n                    <p className={styles.sidebar_statNumber}>{Math.floor(Math.random() * 20)}</p>\n                </div>\n                <div className={styles.sidebar_stat}>\n                    <p><PeopleSharpIcon /> <span>Groups</span></p>\n                    <p className={styles.sidebar_statNumber}>{Math.floor(Math.random() * 20)}</p>\n                </div>\n                <div className={styles.sidebar_stat}>\n                    <p><EventSharpIcon /><span>Events</span></p>\n                    <p className={styles.sidebar_statNumber}></p>\n                </div>\n                <div className={styles.sidebar_stat}>\n                    <p><BusinessSharpIcon /><span>Companies</span></p>\n                    <p className={styles.sidebar_statNumber}>{Math.floor(Math.random() * 100)}</p>\n                </div>\n            </div>\n            <div className=\"sidebar_bottom\">\n                <p>Recent</p>\n                {recentItem(\"Reactjs\")}\n                {recentItem(\"Programming\")}\n                {recentItem(\"SoftwareEngineering\")}\n                {recentItem(\"Design\")}\n                {recentItem(\"Developer\")}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Sidebar\n\n","/home/bobhhy/forum-last/src/Components/Network/Feed/Feed.jsx",["522","523","524","525","526","527","528","529","530","531","532","533","534","535"],"import { Avatar } from \"@material-ui/core\";\nimport React, { useEffect, useState, initialState } from \"react\";\nimport styles from \"./Feed.module.css\";\nimport Button from \"@material-ui/core/Button\";\nimport userService from \"../../../services/userService\";\nimport { useHistory } from \"react-router\";\nfunction Feed({ user }) {\n  const history = useHistory();\n  const [companies, setCompanies] = useState(initialState);\n  const [recommnededCompanies, setRecommendedCompanies] = useState(\n    initialState\n  );\n  const [students, setStudents] = useState(initialState);\n  const [recommendedStudents, setRecommendedStudents] = useState(initialState);\n  useEffect(() => {\n    async function getAllCompanies() {\n      await userService.getAllCompanies().then((response) => {\n        setCompanies(response?.data);\n        setRecommendedCompanies(\n          response?.data?.filter(\n            (company) =>\n              company.enabled &&\n              company?.company?.aboutCompany?.domaine ==\n              user?.cv?.about?.domaine\n          )\n        );\n      });\n    }\n    async function getAllStudents() {\n      await userService.getAllStudents().then(\n        (response) => {\n          setStudents(response?.data);\n          if (user?.roles[0]?.id == 3) {\n            setRecommendedStudents(\n              response?.data?.filter(\n                (student) =>\n                  student.enabled &&\n                  student?.cv?.about?.domaine ==\n                  user?.company?.aboutCompany?.domaine\n              )\n            );\n          }\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n    }\n    getAllCompanies();\n    getAllStudents();\n  }, []);\n  const handleClick = (id) => {\n    history.push(\"/view/\" + id);\n    window.location.reload();\n  };\n  return (\n    <div className={styles.feed}>\n      <div className={styles.block}>\n        <h1 className={styles.title}>All Companies</h1>\n        {companies\n          ?.filter((company) => company.enabled && company.company.flag)\n          ?.map(\n            (company, index) =>\n              user?.id != company?.id && (\n                <div className={styles.company}>\n                  <img\n                    src={\"https://picsum.photos/400/200?random=\" + index++}\n                    alt=\"\"\n                  />\n                  <Avatar\n                    src={\n                      userService.imageLink +\n                      company.company.companyImage\n                    }\n                    className={styles.company_avatar}\n                    alt=\"Image of \"\n                  />\n                  <h2>{company?.companyName}</h2>\n                  <h5>{company?.email}</h5>\n                  <h6>{Math.floor(Math.random() * 1000)}</h6>\n                  <Button\n                    className={styles.Button}\n                    onClick={() => handleClick(company?.id)}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                  >\n                    View Profile\n                  </Button>\n                </div>\n              )\n          )}\n      </div>\n\n      {user?.roles[0]?.id == 1 && recommnededCompanies?.length != 0 && (\n        <div className={styles.block}>\n          <h1 className={styles.title}>Recommended Companies for you</h1>\n          {companies\n            ?.filter(\n              (company) =>\n                company.enabled &&\n                company?.company?.aboutCompany?.domaine ==\n                user?.cv?.about?.domaine\n            )\n            ?.map(\n              (company, index) =>\n                user?.id != company?.id && (\n                  <div className={styles.company}>\n                    <img\n                      src={\"https://picsum.photos/400/200?random=\" + index++}\n                      alt=\"\"\n                    />\n                    <Avatar\n                      src={\n                        userService.imageLink +\n                        company.company.companyImage\n                      }\n                      className={styles.company_avatar}\n                      alt=\"Image of \"\n                    />\n                    <h2>{company?.companyName}</h2>\n                    <h5>{company?.email}</h5>\n                    <h6>{Math.floor(Math.random() * 1000)}</h6>\n                    <Button\n                      className={styles.Button}\n                      onClick={() => handleClick(company?.id)}\n                      variant=\"outlined\"\n                      color=\"primary\"\n                    >\n                      View Profile\n                    </Button>\n                  </div>\n                )\n            )}\n        </div>\n      )}\n\n      {user?.roles[0]?.id == 3 && recommendedStudents?.length != 0 && (\n        <div className={styles.block}>\n\n          <h1 className={styles.title}>Recommended Students for you</h1>\n          {students\n            ?.filter(\n              (student) =>\n                student.enabled &&\n                student?.cv?.about?.domaine ==\n                user?.company?.aboutCompany?.domaine\n            )\n            ?.map(\n              (student, index) =>\n                user?.id != student?.id && (\n                  <div className={styles.company}>\n                    <img\n                      src={\"https://picsum.photos/400/200?blur?random=\" + index}\n                      alt=\"\"\n                    />\n                    <Avatar\n                      src={\n                        userService.imageLink +\n                        student.cv.image\n                      }\n                      className={styles.company_avatar2}\n                      alt=\"Image of \"\n                    />\n                    <h2>{student?.cv.name}</h2>\n                    <h5>{student?.email}</h5>\n                    <h6>{Math.floor(Math.random() * 1000)}</h6>\n                    <Button\n                      className={styles.Button}\n                      variant=\"outlined\"\n                      onClick={() => handleClick(student?.id)}\n                      color=\"primary\"\n                    >\n                      View Profile\n                    </Button>\n                  </div>\n                )\n            )}\n        </div>\n      )}\n      <div className={styles.block}>\n        <h1 className={styles.title}>Students</h1>\n        {students\n          ?.filter((student) => student.enabled && student.cv.flag)\n          ?.map(\n            (student, index) =>\n              user?.id != student?.id && (\n                <div className={styles.company}>\n                  <img\n                    src={\"https://picsum.photos/400/200?blur?random=\" + index}\n                    alt=\"\"\n                  />\n                  <Avatar\n                    src={\n                      userService.imageLink +\n                      student.cv.image\n                    }\n                    className={styles.company_avatar2}\n                    alt=\"Image of \"\n                  />\n                  <h2>{student?.cv.name}</h2>\n                  <h5>{student?.email}</h5>\n                  <h6>{Math.floor(Math.random() * 1000)}</h6>\n                  <Button\n                    className={styles.Button}\n                    variant=\"outlined\"\n                    onClick={() => handleClick(student?.id)}\n                    color=\"primary\"\n                  >\n                    View Profile\n                  </Button>\n                </div>\n              )\n          )}\n      </div>\n    </div>\n  );\n}\n\nexport default Feed;\n","/home/bobhhy/forum-last/src/Components/Messages/Feed/Feed.jsx",["536","537","538","539","540"],"import React, { useMemo, useState, useEffect, useRef, initialValue } from 'react'\nimport styles from './Feed.module.css'\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Avatar from '@material-ui/core/Avatar';\nimport userService from '../../../services/userService';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport SendIcon from '@material-ui/icons/Send';\nimport Button from '@material-ui/core/Button';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport ImageIcon from '@material-ui/icons/Image';\nimport GifIcon from '@material-ui/icons/Gif';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\nimport VideoCallIcon from '@material-ui/icons/VideoCall';\nimport authHeader from '../../../services/authHeader';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nfunction Feed({ id, isNew, name, date, img, user }) {\n    const [input, setInput] = useState(\"\")\n    const [profiles, setProfiles] = useState(\"\")\n    const [flag, setFlag] = useState(false)\n    const [loading, setLoading] = useState(false)\n    const [loading1, setLoading1] = useState(false)\n    const [loading2, setLoading2] = useState(false)\n    const [open, setOpen] = useState(false)\n    const [messagex, setMessage] = useState(\"\")\n    const [messages, setMessages] = useState([])\n    const [count, setCount] = useState(0)\n    const [top, setTop] = useState(false)\n    const feed = useRef(initialValue)\n    const handleClose = (e) => {\n        setOpen(!open);\n        setProfiles([]);\n        setInput(\"\");\n        setFlag(false);\n    };\n    const handleChange = (e) => {\n        const message = e.target.value\n        setMessage(message)\n    }\n    const sendMessage = async () => {\n        const messagePayload = {\n            jwt: authHeader().Authorization,\n            message: messagex,\n            receiverId: id\n        }\n        setLoading2(true)\n        await userService.sendMessage(messagePayload).then((response) => {\n            setTimeout(() => {\n                setMessage(\"\")\n                setLoading2(false)\n                setCount(count + 1)\n            }, 200);\n        })\n        // clientRef.sendMessage(\"/app/chat.sendMessage\", JSON.stringify(messagePayload))\n    }\n    // setInterval(() => {\n    //     setCount(count + 1)\n    // }, 10000);\n    useMemo(() => {\n    }, [id, isNew, name, date, img]);\n    useEffect(() => {\n        const getMessages = async () => {\n            setLoading1(true)\n            console.log(id)\n            await userService.getMessages(id).then((response) => {\n                console.log(response.data)\n                setMessages(response.data)\n                setLoading1(false)\n            },\n                (error) => {\n                    console.log(error)\n                })\n        }\n        getMessages();\n        console.log(\"ok\")\n    }, [id, count]);\n    const handleSearchChange = (e) => {\n        const inputx = e.target.value;\n        setInput(inputx);\n        if (inputx) {\n            setOpen(true)\n            setLoading(true)\n            userService.getUsersLike(inputx).then((response) => {\n                setProfiles(response.data);\n                setFlag(true);\n            });\n            setLoading(false)\n        } else {\n            setProfiles([]);\n        }\n    }\n    const handleMessageReceived = (msg) => {\n        console.log(msg)\n        setMessages([...messages, msg])\n    }\n    const handleScroll = (e) => {\n        console.log(top)\n        if (e.target.scrollTop < 50) {\n            setTop(false)\n        }\n        else {\n            setTop(true)\n        }\n    }\n    const handleTop = () => {\n        feed.current.scroll({ top: 0, left: 0, behavior: 'smooth' })\n    }\n    const deleteMessage = async (id) => {\n        console.log(id)\n        userService.deleteMesssage(id).then((response) => console.log(response))\n        setCount(count + 1)\n    }\n    return (\n        <div className={styles.container}>\n            {isNew ? (<>\n                <div className={styles.sidebarNav}>\n                    <div className={styles.infos}>\n                        <h4>New Message</h4>\n                    </div>\n                    <div className={styles.actions}>\n                        <IconButton aria-label=\"More\" >\n                            <MoreHorizIcon />\n                        </IconButton>\n                    </div>\n                </div>\n                <div className={styles.searchBar}>\n                    <input type=\"text\" className={styles.search} value={input} onChange={handleSearchChange} placeholder=\"Type a name or multiple name\" />\n                    {open && <CloseIcon className={styles.close} onClick={handleClose} />}\n                </div>\n                <div className={styles.output}>\n                    {flag ? (\n                        <>\n                            {profiles?.length !== 0 ? (\n                                profiles?.map((profile) =>\n                                    profile.roles[0].id === 1 && profile.enabled ? (\n                                        <ProfileInfo\n                                            id={profile?.id}\n                                            name={profile?.name}\n                                            company={profile?.companyName}\n                                            role={profile?.roles[0]?.id}\n                                            image={\n                                                userService.imageLink +\n                                                profile?.cv?.image\n                                            }\n                                        />\n                                    ) : (\n                                        profile.roles[0].id === 3 &&\n                                        profile.enabled && (\n                                            <ProfileInfo\n                                                id={profile?.id}\n                                                name={profile?.name}\n                                                company={profile?.companyName}\n                                                role={profile?.roles[0]?.id}\n                                                image={\n                                                    userService.imageLink +\n                                                    profile?.company?.companyImage\n                                                }\n                                            />\n                                        )\n                                    )\n                                )\n                            ) : (\n                                <h1>No Result</h1>\n                            )}\n                        </>) : loading && (<CircularProgress />)}\n                </div>\n            </>) : (\n                <>\n                    <div className={styles.sidebarNav}>\n                        <div className={styles.infos}>\n                            <h4>{name}</h4>\n                            <h6>Mobile • 3h ago</h6>\n                        </div>\n                        <div className={styles.actions}>\n                            <IconButton aria-label=\"Delete\" color=\"secondary\" >\n                                <DeleteIcon />\n                            </IconButton>\n                            <IconButton aria-label=\"More\" >\n                                <MoreHorizIcon />\n                            </IconButton>\n                        </div>\n                    </div>\n                    <div className={styles.infos1}>\n                        <Avatar alt={name} className={styles.avatar} src={userService.imageLink + img} />\n                        <h2>{name} <span> · {id}st</span></h2>\n                        <h6>DevOps Engineer at AB Conseils</h6>\n                    </div>\n                    <div className={styles.separator}>{date}</div>\n                    <div className={styles.feed} ref={feed} onScroll={handleScroll}>\n                        {\n                            top && (<IconButton className={styles.top} onClick={handleTop} aria-label=\"delete\">\n                                <ArrowUpwardIcon size=\"medium\" />\n                            </IconButton>)\n                        }\n\n                        {messages != \"Friendship not found\" && messages?.map((message) => {\n                            return message.senderId == id ? (<div className={styles.singleMessage}>\n                                <Avatar alt={name} className={styles.avatar} src={userService.imageLink + img} />\n                                <h6>{message.message}</h6>\n                                <IconButton aria-label=\"More\" >\n                                    <MoreHorizIcon />\n                                </IconButton>\n                            </div>) : (\n                                <div className={`${styles.singleMessage} ${styles.mine}`}>\n                                    <IconButton onClick={() => { deleteMessage(message.id) }} aria-label=\"Delete\" color=\"secondary\" >\n                                        <DeleteIcon />\n                                    </IconButton>\n                                    <IconButton aria-label=\"More\" >\n                                        <MoreHorizIcon />\n                                    </IconButton>\n                                    <h6>{message.message}</h6>\n                                </div>\n                            )\n\n                        })}\n                    </div>\n                    <div className={styles.message}>\n                        <TextareaAutosize className={styles.textarea} placeholder=\"Write a message\" onKeyPress={(e) => e.key === 'Enter' && sendMessage()} value={messagex} onChange={handleChange} rowsMin=\"2\" rowsMax=\"2\" />\n                        <div className={styles.footer}>\n                            <div className={styles.types}>\n                                <IconButton aria-label=\"File\" >\n                                    <AttachFileIcon />\n                                </IconButton>\n                                <IconButton aria-label=\"Image\" >\n                                    <ImageIcon />\n                                </IconButton>\n                                <IconButton aria-label=\"Gif\" >\n                                    <GifIcon />\n                                </IconButton>\n                                <IconButton aria-label=\"Gif\" >\n                                    <EmojiEmotionsIcon />\n                                </IconButton>\n                                <IconButton aria-label=\"Videos\" >\n                                    <VideoCallIcon />\n                                </IconButton>\n                            </div>\n                            <div className={styles.actions1}>\n                                <Button\n                                    onClick={sendMessage}\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    disabled={loading2}\n                                    endIcon={<SendIcon />}\n                                >\n                                    Send\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n\n                </>)}\n\n        </div>\n    )\n}\n\nexport default Feed\n","/home/bobhhy/forum-last/src/Components/Home/Sidebarl/Sidebarl.jsx",[],"/home/bobhhy/forum-last/src/Components/Notification/Feed/Feed.jsx",["541","542","543","544","545"],"import { Avatar, Button } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add';\nimport React, { useState, useEffect } from 'react'\nimport styles from './Feed.module.css'\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport userService from '../../../services/userService';\nimport { useHistory } from \"react-router-dom\";\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport MessageIcon from '@material-ui/icons/Message';\nimport { Link } from \"react-router-dom\";\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\nimport createPalette from '@material-ui/core/styles/createPalette';\nfunction Feed() {\n    const [loading, setLoading] = useState(false);\n    const [count, setCount] = useState(0);\n    const [notifications, setNotifications] = useState([])\n    const history = useHistory();\n    useEffect(() => {\n        const getNotifications = async () => {\n            await userService.getAllNotifications().then((response) => {\n                setNotifications(response.data);\n            })\n        }\n        getNotifications()\n    }, [count]);\n    const accept = async (e, id) => {\n        try {\n            setLoading(true)\n            const resp = await userService.accept(id);\n            setLoading(false)\n            setCount(count + 1)\n        } catch (err) {\n            // Handle Error Here\n            console.error(err);\n        }\n    }\n    const handleClick = (id,idNotif=0,message=\"\") => {\n        if(message==\"has viewed your profile\")\n        {\n            handleSingleNotif(idNotif)\n        }\n        history.push('/view/' + id)\n        // window.location.reload()\n    }\n    const handleMessage = (id) => {\n        history.push('/Messages/' + id)\n    }\n    const deleteNotification = async (id) => {\n        try {\n            setLoading(true)\n            const resp = await userService.deleteNotification(id);\n            setLoading(false)\n            setCount(count + 1)\n        }\n        catch (err) {\n            // Handle Error Here\n            console.error(err);\n        }\n    }\n    const handleSingleNotif = async (id) => {\n        try {\n            setLoading(true)\n            const resp = await userService.handleSingleNotif(id);\n            setLoading(false)\n            setCount(count + 1)\n        }\n        catch (err) {\n            // Handle Error Here\n            console.error(err);\n        }\n    }\n    return (\n        <div className={styles.feed}>\n            <div className={styles.feedContainer}>\n                {notifications?.map(notification => (\n                    <div className={`${styles.notif} ${!notification.status && styles.new}`} >\n                        <Avatar className={styles.image} src={userService.imageLink + notification.ownerImage} />\n                        <div className={styles.info}>\n                            <h3><span className={styles.name} onClick={() => handleClick(notification.ownersId,notification.id,notification.message)}>{notification.ownerName}</span> <span className={styles.follow}>{notification.message}</span></h3>\n                            <div className=\"buttons\">\n                                {notification.message === \"Followed you\" && notification.status === false && <Button\n                                    size=\"small\"\n                                    variant=\"contained\"\n                                    style={{\n                                        borderRadius: 15,\n                                        backgroundColor: \"#21b6ae\",\n                                        marginRight: 10\n                                    }}\n                                    disabled={loading === true ? \"disabled\" : \"\"}\n                                    startIcon={<AddIcon fontSize='inherit' />}\n                                    onClick={(e) => accept(e, notification.ownersId)}\n                                >\n                                    Accept\n                                </Button>}\n                                {notification.message === \"Followed you\" && notification.status === true && <Button\n                                    size=\"small\"\n                                    style={{ color: \"#5cb85c\" }}\n                                    disabled\n                                    startIcon={<CheckCircleIcon style={{ color: 'inherit' }} fontSize='inherit' />}\n                                >\n                                    Connected\n                                </Button>}\n                                {notification.message === \"has commented on your post\" && (\n                                    <Link\n                                        to={\"/post/\" + notification.postId}\n                                        style={{ textDecoration: \"none\" }}\n                                        onClick={() => {\n                                            handleSingleNotif(notification.id)\n                                        }}\n                                    >\n                                        <Button\n                                            startIcon={<ArrowRightAltIcon />}\n                                            variant=\"contained\"\n                                        >\n                                            Go to post\n                                        </Button>\n                                    </Link>\n                                )}\n                                {notification.message === \"has liked your post\" && (\n                                    <Link\n                                        to={\"/post/\" + notification.postId}\n                                        style={{ textDecoration: \"none\" }}\n                                        onClick={() => {\n                                            handleSingleNotif(notification.id)\n                                        }}\n                                    >\n                                        <Button\n                                            startIcon={<ArrowRightAltIcon />}\n                                            variant=\"contained\"\n                                            onClick={() => {\n                                                handleSingleNotif(notification.id)\n                                            }}\n                                        >\n                                            Go to post\n                                        </Button>\n                                    </Link>\n                                )}\n                                {notification.message === \"has liked your comment\" && (\n                                    <Link\n                                        to={\"/post/\" + notification.postId}\n                                        style={{ textDecoration: \"none\" }}\n                                        onClick={() => {\n                                            handleSingleNotif(notification.id)\n                                        }}\n                                    >\n                                        <Button\n                                            startIcon={<ArrowRightAltIcon />}\n                                            variant=\"contained\"\n                                        >\n                                            Go to post\n                                        </Button>\n                                    </Link>\n                                )}\n                            </div>\n                        </div>\n                        <div className={styles.actions}>\n                            <IconButton color=\"secondary\" disabled={loading === true ? \"disabled\" : \"\"} onClick={() => deleteNotification(notification.id)} aria-label=\"delete\">\n                                <DeleteIcon />\n                            </IconButton>\n                            <IconButton color=\"primary\" aria-label=\"message\" onClick={() => handleMessage(notification.ownersId)}>\n                                <MessageIcon />\n                            </IconButton>\n                        </div>\n                    </div>\n\n                ))}\n\n            </div>\n        </div >\n    )\n}\n\nexport default Feed\n","/home/bobhhy/forum-last/src/Components/Header/HeaderOption/HeaderOption.jsx",["546"],"import { Avatar } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./HeaderOption.css\";\nimport Badge from \"@material-ui/core/Badge\";\nimport { NavLink } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { withStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles((theme) => ({\n  large: {\n    width: theme.spacing(7),\n    height: theme.spacing(7),\n  },\n}));\nconst StyledBadge = withStyles((theme) => ({\n  badge: {\n    right: -3,\n    top: 13,\n  },\n}))(Badge);\n\nfunction HeaderOption({\n  image,\n  Icon,\n  title,\n  isMobile,\n  titleIcon,\n  children,\n  badge,\n  onClick,\n}) {\n  const [open, setOpen] = useState(false);\n  const classes = useStyles();\n\n  return (\n    <>\n      {!titleIcon && (\n        <NavLink\n          exact\n          to={\"/\" + title}\n          className=\"headerOption\"\n          onClick={onClick}\n          activeClassName=\"active\"\n        >\n          <StyledBadge badgeContent={badge} color=\"secondary\">\n            {Icon && (\n              <Icon\n                className={\n                  isMobile ? \"headerOption_icon2\" : \"headerOption_icon\"\n                }\n              />\n            )}\n          </StyledBadge>\n          {!Icon && <Avatar className=\"headerOption_icon\" src={image} />}\n          {!isMobile && (\n            <h5\n              onClick={() => {\n                setOpen(!open);\n              }}\n              className=\"headerOption_title\"\n            >\n              {title}\n              {titleIcon}\n            </h5>\n          )}\n          {open && children}\n        </NavLink>\n      )}\n      {titleIcon && (\n        <div className=\"headerOption\">\n          {Icon && <Icon className=\"headerOption_icon\" />}\n          {/* {!Icon && <img src={`data:image/png;base64,${image}`} alt=\"\" />} */}\n          {!Icon && (\n            <Avatar\n              className={\"headerOption_icon \" + classes.large}\n              src={image}\n            />\n          )}\n          <h5\n            onClick={() => {\n              setOpen(!open);\n            }}\n            className=\"headerOption_title\"\n          >\n            {title}\n            {titleIcon}\n          </h5>\n          {open && children}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default HeaderOption;\n","/home/bobhhy/forum-last/src/Components/Home/Sidebar/Sidebar.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditImage.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCompany/EditAboutCompany.jsx",["547"],"import React, { useState, initialState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n// import \"../../css/cv.css\";\nimport Input from \"react-phone-number-input/input\";\nimport \"react-phone-number-input/style.css\";\nimport axios from \"axios\";\nimport userService from \"../../../../services/userService\";\nimport Socials from \"../../SetProfile/SetCompany/AddCompany Components/CompanySocials\"\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    fontSize: \"30\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  route: {\n    width: \"85%\",\n  },\n}));\n\nconst About = (props) => {\n  // MATERIAL UI STYLING AL3ABD\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleClick = (e) => {\n    const errors1 = [];\n    if (address.length === 0 || city.length === 0)\n      errors1.push(\"Adrress cannot be empty\");\n    if (!number) errors1.push(\"Number cannot be empty\");\n    if (number?.length < 11)\n      errors1.push(\"Your number should be like 0663-123123\");\n    if (bio?.length === 0) errors1.push(\"Bio must not be empty\");\n    if (errors1.length > 0) {\n      setMessage(errors1);\n      setTimeout(setOpen(true), 500);\n      return 0;\n    }\n    update(e);\n    setTimeout(setOpen(true), 500);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n    setSuccessful(false);\n  };\n\n  const [bio, setBio] = useState(props?.data?.bio);\n  const [address, setAddress] = useState(props?.data?.address);\n  const [city, setCity] = useState(props?.data?.city);\n  const [number, setNumber] = useState(props?.data?.number);\n\n  const [successful, setSuccessful] = useState(false);\n  const [message, setMessage] = useState(initialState);\n\n  const handleAddressChange = (e) => {\n    const value = e.target.value;\n    setAddress(value);\n  };\n\n  const handleCityChange = (e) => {\n    setCity(e.target.value);\n  };\n\n  const handleNumberChange = (e) => {\n    const value = e;\n    setNumber(value);\n  };\n\n  const handleBioChange = (e) => {\n    setBio(e.target.value);\n  };\n\n  const update = (e) => {\n    let about = {\n      address: address,\n      city: city,\n      number: number,\n      bio: bio,\n    };\n    userService.updateAboutCompany(props?.id, about)\n  };\n\n  return (\n    <div className={classes.route}>\n      <form>\n        <div className=\"form-group row  align-items-center\">\n          <label for=\"number\" className=\"col-1 col-form-label\">\n            Enterprise location:\n          </label>\n          <div className=\"col-7 mr-2\">\n            {\" \"}\n            <input\n              className=\"form-control mr-2 mt-2\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              type=\"text\"\n              placeholder=\"Address\"\n              value={address}\n              onChange={handleAddressChange}\n              required\n            />\n          </div>\n          <div className=\"col-2\">\n            <input\n              className=\"form-control mr-2 mt-2\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              type=\"text\"\n              placeholder=\"City\"\n              value={city}\n              onChange={handleCityChange}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"form-group row  align-items-center\">\n          <label for=\"example-tel-input\" class=\"col-2 col-form-label\">\n            Telephone :\n          </label>\n          <div className=\"col-6\">\n            <Input\n              className=\"form-control mt-2\"\n              country=\"MA\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              value={number}\n              placeholder=\"Number\"\n              onChange={handleNumberChange}\n              id=\"example-tel-input\"\n            />\n          </div>\n        </div>\n\n        <div class=\"form-group row  align-items-center\">\n          <label for=\"bio\" class=\"col-2 col-form-label\">\n            Enterprise Bio:\n          </label>\n          <br />\n          <textarea\n            className=\"inputs form-control col-sm-12 mt-2\"\n            rows=\"4\"\n            name=\"bio\"\n            id=\"comment\"\n            maxLength=\"400\"\n            placeholder=\"Bio\"\n            style={{\n              backgroundColor: \"#f3f2ef\",\n              resize: \"none\",\n            }}\n            value={bio}\n            onChange={handleBioChange}\n          ></textarea>\n        </div>\n        <Socials />\n        <div className={classes.root + \" btnholder\"}>\n          <Button\n            variant=\"outlined\"\n            onClick={(e) => {\n              props.onChange(true);\n              handleClick();\n            }}\n          >\n            Edit\n          </Button>\n          <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n            <Alert\n              onClose={handleClose}\n              severity={successful ? \"success\" : \"error\"}\n            >\n              {typeof message == \"string\"\n                ? message\n                : message?.map((message1) => (\n                  <span>\n                    -{message1}\n                    <br />\n                  </span>\n                ))}\n            </Alert>\n          </Snackbar>\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default About;\n","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditSoftware.jsx",["548","549"],"import React, { useState, useEffect } from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"react-select\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\nimport authHeader from \"../../../../services/authHeader\";\nimport axios from \"axios\";\nimport userService from \"../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst statusOptions = [\n  { value: \"Photoshop\", label: \"Photoshop\", icon: \"fab fa-fonticons\" },\n  { value: \"Git\", label: \"Git\", icon: \"fab fa-git-alt\" },\n  { value: \"Wordpress\", label: \"Wordpress\", icon: \"fab fa-wordpress\" },\n  {\n    value: \"RasbperryPi\",\n    label: \"RasbperryPi\",\n    icon: \"fab fa-raspberry-pi\",\n  },\n];\n\nconst marks = [\n  {\n    value: 1,\n    label: \"1\",\n  },\n  {\n    value: 5,\n    label: \"5\",\n  },\n  {\n    value: 10,\n    label: \"10\",\n  },\n];\n\nconst SkillForm = (props) => {\n  //skill comp\n  // const classes = useStyles();\n  const [data, setData] = useState();\n  const [successful, setSuccessful] = useState(false);\n  const [name, setName] = useState(\"Photoshop\");\n  const [skillValue, setSkillValue] = useState();\n  const [icon, setIcon] = useState(\"fab fa-fonticons fa-3x\");\n  let selected = [];\n  const [disabled, setDisabled] = useState(false);\n  //snackbar\n  const [open, setOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await userService.getSoftware()\n      setData(result.data);\n      setSuccessful(false);\n    };\n    fetchData();\n  }, [successful]);\n  const upload = () => {\n    const value = skillValue;\n    userService.uploadSoftware(name, value, icon)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n          setMessage(\"Added\");\n          handleClick();\n          setDisabled(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n  };\n  const deleteById = (id) => {\n    userService.deleteSoftware(id)\n      .then((response) => {\n        setSuccessful(true);\n        setMessage(\"Deleted!\");\n        handleClick();\n        setSuccessful(false);\n      });\n  };\n\n  const handleClose = (reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const skillPicker = (e) => {\n    setName(e.value);\n    setIcon(e.icon);\n    setDisabled(false);\n  };\n  // const deleteByType = (type) => {\n  //   setSkills(skills.filter((skill) => skill.type !== type));\n  //   setSelected(selected.filter((select) => select !== type));\n  //   setDisabled(!disabled);\n  // };\n  const skValue = (value) => {\n    setSkillValue(value);\n  };\n  const singleOption = ({ data }) => (\n    <div className=\"input-select\">\n      <div className=\"input-select__single-value d-flex justify-content-center\">\n        <i className={data.icon} />\n        &nbsp; &nbsp;\n        <span style={{ fontSize: \"1.5vw\" }}>&nbsp;{data.label}</span>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"container\">\n      <FormControl className=\"col-12\">\n        <div className=\"form\">\n          <div className=\"form-group col-md-12\">\n            <label>Software :</label>\n            <Select\n              defaultValue={statusOptions[0]}\n              options={statusOptions}\n              onChange={skillPicker}\n              components={{ SingleValue: singleOption }}\n              isOptionDisabled={(option) =>\n                selected.indexOf(option.value) !== -1\n              }\n            />\n          </div>\n          <div className=\"col-md-10\">\n            <Typography id=\"discrete-slider\" gutterBottom>\n              Proficiency:\n            </Typography>\n            <Slider\n              defaultValue={5}\n              getAriaValueText={skValue}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={1}\n              marks={marks}\n              min={1}\n              max={10}\n            />\n          </div>\n          <div className=\"row col-md-10 justify-content-around\">\n            <div className=\"col-3\">\n              <Button\n                onClick={() => {\n                  upload();\n                }}\n                variant=\"outlined\"\n                color=\"primary\"\n                size=\"medium\"\n                disabled={disabled}\n                startIcon={\n                  <AddCircleOutlinedIcon\n                    style={{\n                      maxWidth: \"30px\",\n                      maxHeight: \"30px\",\n                      minWidth: \"30px\",\n                      minHeight: \"30px\",\n                    }}\n                  />\n                }\n              >\n                Add\n              </Button>\n            </div>\n          </div>\n        </div>\n      </FormControl>\n      <div className=\"responsive-table flex-fill\">\n        <table class=\"table\">\n          <thead>\n            <th>Skill / Software</th>\n            <th>Proficiency</th>\n            <th>Delete</th>\n          </thead>\n          <tbody>\n            {data?.map((dev) => (\n              <tr className=\"mt-10\">\n                <td>\n                  <i class={dev.icon} />{\" \"}\n                  <span style={{ fontSize: \"18px\" }}>{dev.name}</span>\n                </td>\n                <td>\n                  <span style={{ fontSize: \"18px\" }}>{dev.value}</span>\n                </td>\n                <td>\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\n                    <DeleteIcon\n                      className=\"pt-0\"\n                      style={{ color: \"#df4759\" }}\n                      onClick={() => {\n                        setTimeout(deleteById(dev.id), 500);\n                      }}\n                    />\n                  </IconButton>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\nexport default SkillForm;\n","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditAwards.jsx",["550","551"],"import \"date-fns\";\nimport React, { useState, useEffect } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { TextField } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"react-bootstrap/Modal\";\nimport axios from \"axios\";\nimport authHeader from \"../../../../services/authHeader\";\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport userService from \"../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  textfield: {\n    marginTop: \"10px\",\n    marginRight: \"1vw\",\n    width: \"100%\",\n  },\n  table: {\n    minWidth: \"39vw\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(20),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  button: {\n    margin: \"1vw 1vh\",\n    justifyContent: \"center\",\n    outline: \"none\",\n  },\n}));\n\nconst Award = (props) => {\n  //POST STATES\n  const [organizer, setOrganizer] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [position, setPosition] = useState(\"\");\n\n  // STYLE STATES\n  const [open, setOpen] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n\n  // RESPONSE STATES\n  const [successful, setSuccessful] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [data, setData] = useState();\n\n  //MAKESTYLES\n  const classes = useStyles();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await userService.getAward();\n      setData(result.data);\n    };\n    fetchData();\n  }, [successful]);\n\n  const handleOrganizer = (e) => {\n    setOrganizer(e.target.value);\n  };\n  const handleName = (e) => {\n    setName(e.target.value);\n  };\n  const handlePosition = (e) => {\n    setPosition(e.target.value);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n  const upload = () => {\n    const errors = [];\n    if (organizer.length === 0) errors.push(\"Fields must not be empty.\\n\");\n    if (name.length === 0) errors.push(\"Fields must not be empty.\\n\");\n    if (!position.match(\"^[0-9]+$\")) errors.push(\"Position must be a number.\");\n    if (errors.length !== 0) {\n      setMessage(errors);\n      setOpen(true);\n      return 0;\n    }\n    // console.log(typeof parseInt(position));\n    setModalShow(false);\n    userService.uploadAward(organizer, name, position)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n    setOrganizer(\"\");\n    setName(\"\");\n    setPosition(\"\");\n  };\n\n  const deleteById = (id) => {\n    userService.deleteAward(id)\n      .then((response) => {\n        setSuccessful(true);\n        setSuccessful(false);\n      });\n  };\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <Button\n          onClick={() => setModalShow(true)}\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"medium\"\n          startIcon={\n            <AddCircleOutlinedIcon\n              style={{\n                maxWidth: \"30px\",\n                maxHeight: \"30px\",\n                minWidth: \"30px\",\n                minHeight: \"30px\",\n              }}\n            />\n          }\n        >\n          Add New\n        </Button>\n        <Modal\n          show={modalShow}\n          color=\"primary\"\n          onHide={() => setModalShow(false)}\n          size=\"md\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Body>\n            <FormControl>\n              <Grid container justify=\"center\">\n                <Grid item xs={6}>\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Organizer\"\n                    value={organizer}\n                    onChange={handleOrganizer}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Name\"\n                    value={name}\n                    onChange={handleName}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Position\"\n                    value={position}\n                    onChange={handlePosition}\n                    className={classes.textfield}\n                  />\n                </Grid>\n              </Grid>\n            </FormControl>\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n              <Alert severity=\"error\">{message}</Alert>\n            </Snackbar>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                upload();\n                setSuccessful(false);\n              }}\n            >\n              Upload\n            </Button>\n          </Modal.Footer>\n        </Modal>\n\n        <TableContainer component={Paper}>\n          <Table\n            className={classes.table}\n            size=\"small\"\n            aria-label=\"simple table\"\n          >\n            <TableHead>\n              <TableRow>\n                <TableCell>Organizer</TableCell>\n                <TableCell>Competition Name</TableCell>\n                <TableCell>Position</TableCell>\n                <TableCell>Delete</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data?.map((obj) => (\n                <TableRow key={obj}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {obj.organizer}\n                  </TableCell>\n                  <TableCell>{obj.name}</TableCell>\n                  <TableCell>{obj.position}</TableCell>\n                  <TableCell>\n                    <IconButton aria-label=\"delete\">\n                      <DeleteIcon\n                        style={{ color: \"#df4759\" }}\n                        onClick={() => {\n                          setTimeout(deleteById(obj.id), 500);\n                        }}\n                      />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    </div>\n  );\n};\nexport default Award;\n","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditNormalLanguages.jsx",["552","553"],"import React, { useState, useEffect } from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"react-select\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport authHeader from \"../../../../services/authHeader\";\nimport axios from \"axios\";\nimport userService from \"../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst statusOptions = [\n  { value: \"French\", label: \"French\" },\n  { value: \"English\", label: \"English\" },\n  { value: \"Arabic\", label: \"Arabic\" },\n  { value: \"Spanish\", label: \"Spanish\" },\n];\n\nconst marks = [\n  {\n    value: 1,\n    label: \"1\",\n  },\n  {\n    value: 5,\n    label: \"5\",\n  },\n  {\n    value: 10,\n    label: \"10\",\n  },\n];\n\nconst SkillForm = (props) => {\n  //skill comp\n  const [data, setData] = useState();\n  const [successful, setSuccessful] = useState(false);\n  const [name, setName] = useState(\"French\");\n  const [skillValue, setSkillValue] = useState();\n  let selected = [];\n  const [disabled, setDisabled] = useState(false);\n\n  //snackbar\n  const [open, setOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const handleClick = () => {\n    setOpen(true);\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await userService.getNormalLang();\n      setData(result.data);\n      setSuccessful(false);\n    };\n    fetchData();\n  }, [successful]);\n  const upload = () => {\n    const value = skillValue;\n    userService.uploadNormalLang(name, value)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n          setMessage(\"Added\");\n          handleClick();\n          setDisabled(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n  };\n  const deleteById = (id) => {\n    userService.deleteNormalLang(id)\n      .then((response) => {\n        setSuccessful(true);\n        setMessage(\"Deleted!\");\n        handleClick();\n        setSuccessful(false);\n      });\n  };\n\n  const handleClose = (reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const skillPicker = (e) => {\n    setName(e.value);\n    setDisabled(false);\n  };\n\n  const skValue = (value) => {\n    setSkillValue(value);\n  };\n\n  const singleOption = ({ data }) => (\n    <div className=\"input-select\">\n      <div className=\"input-select__single-value d-flex justify-content-center\">\n        <span style={{ fontSize: \"1.5vw\" }}>&nbsp;{data.label}</span>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"container\">\n      <FormControl>\n        <div className=\"form\">\n          <div className=\"form-group col-12\">\n            <label>Languages :</label>\n            <Select\n              defaultValue={statusOptions[0]}\n              options={statusOptions}\n              onChange={skillPicker}\n              components={{ SingleValue: singleOption }}\n              isOptionDisabled={(option) =>\n                selected.indexOf(option.value) !== -1\n              }\n            />\n          </div>\n          <div className=\"col-10\">\n            <Typography id=\"discrete-slider\" gutterBottom>\n              Proficiency:\n            </Typography>\n            <Slider\n              defaultValue={5}\n              getAriaValueText={skValue}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={1}\n              marks={marks}\n              min={1}\n              max={10}\n            />\n          </div>\n          <div className=\"row col-md-10 justify-content-around\">\n            <div className=\"col-3\">\n              <Button\n                onClick={upload}\n                variant=\"outlined\"\n                color=\"primary\"\n                size=\"medium\"\n                disabled={disabled}\n                startIcon={\n                  <AddCircleOutlinedIcon\n                    style={{\n                      maxWidth: \"30px\",\n                      maxHeight: \"30px\",\n                      minWidth: \"30px\",\n                      minHeight: \"30px\",\n                    }}\n                  />\n                }\n              >\n                Add\n              </Button>\n            </div>\n          </div>\n        </div>\n      </FormControl>\n      <div className=\"responsive-table flex-fill\">\n        <table class=\"table\">\n          <thead>\n            <th>Skill</th>\n            <th>Proficiency</th>\n            <th>Delete</th>\n          </thead>\n          <tbody>\n            {data?.map((lng) => (\n              <tr className=\"mt-10\">\n                <td>{lng.name}</td>\n                <td>{lng.value}</td>\n                <td>\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\n                    <DeleteIcon\n                      style={{ color: \"#df4759\" }}\n                      className=\"pt-0\"\n                      onClick={() => {\n                        setTimeout(deleteById(lng.id), 500);\n                      }}\n                    />\n                  </IconButton>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\nexport default SkillForm;\n","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditDevLanguages.jsx",["554","555"],"import React, { useState, useEffect } from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"react-select\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\nimport authHeader from \"../../../../services/authHeader\";\nimport axios from \"axios\";\nimport userService from \"../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst statusOptions = [\n  { value: \"HTML5\", label: \"HTML5\", icon: \"fab fa-html5\" },\n  { value: \"CSS3\", label: \"CSS3\", icon: \"fab fa-css3-alt\" },\n  { value: \"Java\", label: \"Java\", icon: \"fab fa-java\" },\n  { value: \"JavaScript\", label: \"JavaScript\", icon: \"fab fa-js-square\" },\n  { value: \"PHP\", label: \"PHP\", icon: \"fab fa-php\" },\n  { value: \"Laravel\", label: \"Laravel\", icon: \"fab fa-laravel\" },\n  { value: \"Python\", label: \"Python\", icon: \"fab fa-python\" },\n  { value: \"Angular\", label: \"Angular\", icon: \"fab fa-angular\" },\n  { value: \"ReactJS\", label: \"ReactJS\", icon: \"fab fa-react\" },\n];\n\nconst marks = [\n  {\n    value: 1,\n    label: \"1\",\n  },\n  {\n    value: 5,\n    label: \"5\",\n  },\n  {\n    value: 10,\n    label: \"10\",\n  },\n];\n\nconst SkillForm = (props) => {\n  //skill comp\n  // const classes = useStyles();\n  const [data, setData] = useState();\n  const [successful, setSuccessful] = useState(false);\n  const [name, setName] = useState(\"HTML5\");\n  const [skillValue, setSkillValue] = useState();\n  const [icon, setIcon] = useState(\"fab fa-html5 fa-3x\");\n  let selected = [];\n  const [disabled, setDisabled] = useState(false);\n  //snackbar\n  const [open, setOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await userService.getDevLang()\n      setData(result.data);\n      setSuccessful(false);\n    };\n    fetchData();\n  }, [successful]);\n  const upload = () => {\n    const value = skillValue;\n    userService.uploadDevLang(name, value, icon)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n          setMessage(\"Added\");\n          handleClick();\n          setDisabled(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n  };\n  const deleteById = (id) => {\n    userService.deleteDevLang(id).then((response) => {\n      setSuccessful(true);\n      setMessage(\"Deleted!\");\n      handleClick();\n      setSuccessful(false);\n    });\n  };\n\n  const handleClose = (reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const skillPicker = (e) => {\n    setName(e.value);\n    setIcon(e.icon);\n    setDisabled(false);\n  };\n\n  const skValue = (value) => {\n    setSkillValue(value);\n  };\n  const singleOption = ({ data }) => (\n    <div className=\"input-select\">\n      <div className=\"input-select__single-value d-flex justify-content-center\">\n        <i className={data.icon + \" fa-2x\"} />\n        &nbsp; &nbsp;\n        <span style={{ fontSize: \"1.5vw\" }}>&nbsp;{data.label}</span>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"container\">\n      <FormControl className=\"w-100\">\n        <div className=\"form\">\n          <div className=\"form-group col-12\">\n            <label>Developing Skills :</label>\n            <Select\n              defaultValue={statusOptions[0]}\n              options={statusOptions}\n              onChange={skillPicker}\n              components={{ SingleValue: singleOption }}\n              isOptionDisabled={(option) =>\n                selected.indexOf(option.value) !== -1\n              }\n            />\n          </div>\n          <div className=\"col-md-12\">\n            <Typography id=\"discrete-slider\" gutterBottom>\n              Proficiency:\n            </Typography>\n            <Slider\n              defaultValue={5}\n              getAriaValueText={skValue}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={1}\n              marks={marks}\n              min={1}\n              max={10}\n            />\n          </div>\n          <div className=\"row col-md-10 justify-content-around\">\n            <div className=\"col-2 mb-2\">\n              <Button\n                onClick={() => {\n                  upload();\n                }}\n                variant=\"outlined\"\n                color=\"primary\"\n                size=\"medium\"\n                disabled={disabled}\n                startIcon={\n                  <AddCircleOutlinedIcon\n                    style={{\n                      maxWidth: \"30px\",\n                      maxHeight: \"30px\",\n                      minWidth: \"30px\",\n                      minHeight: \"30px\",\n                    }}\n                  />\n                }\n              >\n                Add\n              </Button>\n            </div>\n          </div>\n        </div>\n      </FormControl>\n      <div className=\"responsive-table flex-fill row\">\n        <table class=\"table\">\n          <thead>\n            <th>Language</th>\n            <th>Proficiency</th>\n            <th>Delete</th>\n          </thead>\n          <tbody>\n            {data?.map((dev) => (\n              <tr className=\"mt-10\">\n                <td>\n                  <i class={`${dev.icon} fa-3x`} />{\" \"}\n                  <span style={{ fontSize: \"18px\" }}>{dev.name}</span>\n                </td>\n                <td>\n                  <span style={{ fontSize: \"18px\" }}>{dev.value}</span>\n                </td>\n                <td>\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\n                    <DeleteIcon\n                      className=\"pt-0\"\n                      style={{ color: \"#df4759\" }}\n                      onClick={() => {\n                        setTimeout(deleteById(dev.id), 500);\n                      }}\n                    />\n                  </IconButton>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\nexport default SkillForm;\n","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditEducation.jsx",["556","557"],"import \"date-fns\";\nimport React, { useState, useEffect } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { TextField } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"react-bootstrap/Modal\";\nimport axios from \"axios\";\nimport authHeader from \"../../../../services/authHeader\";\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport userService from \"../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  textfield: {\n    marginTop: \"10px\",\n    marginRight: \"1vw\",\n    width: \"100%\",\n  },\n  table: {\n    minWidth: \"54vw\",\n  },\n  dates: {\n    paddingTop: \"10px\",\n    marginLeft: \"5vw\",\n    width: \"60%\",\n    outline: \"none\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(20),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  button: {\n    margin: \"1vw 1vh\",\n    justifyContent: \"center\",\n    outline: \"none\",\n  },\n}));\n\nconst EditEducation = (props) => {\n  //POST STATES\n  let [dateStart, setStartDate] = useState(new Date());\n  let [dateEnd, setEndDate] = useState(new Date());\n  const [school, setSchool] = useState(\"\");\n  const [diploma, setDiploma] = useState(\"\");\n  const [field, setField] = useState(\"\");\n\n  // STYLE STATES\n  const [open, setOpen] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n\n  // RESPONSE STATES\n  const [successful, setSuccessful] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  // whole profile from parent\n  // const data = props.data;\n\n  //Get data to fill table\n  const [getRequest, setGetRequest] = useState();\n\n  //MAKESTYLES\n  const classes = useStyles();\n\n  //toggle to show update or upload\n  const [toggle, setToggle] = useState(false);\n\n  //currently editing education id\n  const [editId, setEditId] = useState();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await userService.getEducation()\n      setGetRequest(result.data);\n    };\n    fetchData();\n  }, [successful]);\n\n  const handleStart = (date) => {\n    setStartDate(date);\n  };\n\n  const handleEnd = (date) => {\n    setEndDate(date);\n  };\n\n  const handleSchool = (e) => {\n    setSchool(e.target.value);\n  };\n  const handleDiploma = (e) => {\n    setDiploma(e.target.value);\n  };\n  const handleField = (e) => {\n    setField(e.target.value);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const upload = () => {\n    const errors = [];\n    if (school.length === 0) errors.push(\"Fields must not be empty\");\n    if (dateEnd <= dateStart) {\n      errors.push(\"End date can't be inferior or equal to start date!\");\n    }\n    if (diploma.length === 0) errors.push(\"Fields must not be empty\");\n    if (field.length === 0) errors.push(\"Fields must not be empty\");\n    if (errors.length !== 0) {\n      setMessage(errors);\n      setOpen(true);\n      return 0;\n    }\n    setModalShow(false);\n    dateStart = dateStart.toString().substring(4, 15);\n    dateEnd = dateEnd.toString().substring(4, 15);\n    userService.uploadEducation(school, diploma, dateStart, dateEnd, field)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n          props.onChange(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n    setSchool(\"\");\n    setDiploma(\"\");\n    setField(\"\");\n    setStartDate(new Date());\n    setEndDate(new Date());\n  };\n\n  const openUpdate = (id) => {\n    const getData = async (id) => {\n      const res = await userService.getEducationById(id)\n      setSchool(res?.data?.school);\n      setDiploma(res?.data?.diploma);\n      setField(res?.data?.field);\n      setStartDate(res?.data?.dateStart);\n      setEndDate(res?.data?.dateEnd);\n    };\n    getData(id);\n    setTimeout(setModalShow(true), 500);\n  };\n\n  const update = (id) => {\n    const errors = [];\n    if (school.length === 0) errors.push(\"Fields must not be empty\");\n    if (dateEnd <= dateStart) {\n      errors.push(\"End date can't be inferior or equal to start date!\");\n    }\n    if (diploma.length === 0) errors.push(\"Fields must not be empty\");\n    if (field.length === 0) errors.push(\"Fields must not be emepty\");\n    if (errors.length !== 0) {\n      setMessage(errors);\n      setOpen(true);\n      return 0;\n    }\n    dateStart = dateStart.toString().substring(4, 15);\n    dateEnd = dateEnd.toString().substring(4, 15);\n    const education = {\n      school: school,\n      diploma: diploma,\n      dateStart: dateStart,\n      dateEnd: dateEnd,\n      field: field,\n    };\n    userService.editEducation(id, education)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(!props.toggle);\n          props.onChange(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n    setModalShow(false);\n  };\n\n  const deleteById = (id) => {\n    userService.deleteEducation(id)\n      .then((response) => {\n        setSuccessful(true);\n        setSuccessful(false);\n      });\n  };\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <Button\n          onClick={() => {\n            setSchool(\"\");\n            setDiploma(\"\");\n            setField(\"\");\n            setStartDate(new Date());\n            setEndDate(new Date());\n            setModalShow(true);\n            setToggle(false);\n          }}\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"medium\"\n          startIcon={\n            <AddCircleOutlinedIcon\n              style={{\n                maxWidth: \"30px\",\n                maxHeight: \"30px\",\n                minWidth: \"30px\",\n                minHeight: \"30px\",\n              }}\n            />\n          }\n        >\n          Add New\n        </Button>\n        <Modal\n          show={modalShow}\n          color=\"primary\"\n          onHide={() => setModalShow(false)}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Body>\n            <FormControl>\n              <Grid container justify=\"space-between\">\n                <Grid item xs={6}>\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"School\"\n                    value={school}\n                    onChange={handleSchool}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Diploma\"\n                    value={diploma}\n                    onChange={handleDiploma}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Field\"\n                    value={field}\n                    onChange={handleField}\n                    className={classes.textfield}\n                  />\n                </Grid>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid item xs={6}>\n                    <KeyboardDatePicker\n                      disableToolbar\n                      className={classes.dates}\n                      variant=\"inline\"\n                      format=\"dd/MM/yyyy\"\n                      margin=\"normal\"\n                      label=\"Start Date\"\n                      value={dateStart}\n                      onChange={handleStart}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                    <KeyboardDatePicker\n                      disableToolbar\n                      className={classes.dates}\n                      variant=\"inline\"\n                      format=\"dd/MM/yyyy\"\n                      margin=\"normal\"\n                      label=\"End Date\"\n                      value={dateEnd}\n                      onChange={handleEnd}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </Grid>\n            </FormControl>\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n              <Alert\n                onClose={handleClose}\n                severity={successful ? \"success\" : \"error\"}\n              >\n                {typeof message == \"string\"\n                  ? message\n                  : message?.map((message1) => (\n                    <span>\n                      -{message1}\n                      <br />\n                    </span>\n                  ))}\n              </Alert>\n            </Snackbar>\n          </Modal.Body>\n          <Modal.Footer>\n            {toggle && (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  update(editId);\n                  setSuccessful(false);\n                }}\n              >\n                Update\n              </Button>\n            )}\n            {!toggle && (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  upload();\n                  setSuccessful(false);\n                }}\n              >\n                Upload\n              </Button>\n            )}\n          </Modal.Footer>\n        </Modal>\n\n        <TableContainer component={Paper}>\n          <Table\n            className={classes.table}\n            size=\"small\"\n            aria-label=\"simple table\"\n          >\n            <TableHead>\n              <TableRow>\n                <TableCell>School</TableCell>\n                <TableCell>Diploma</TableCell>\n                <TableCell>Edit</TableCell>\n                <TableCell>Delete</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {getRequest?.map((obj) => (\n                <TableRow key={obj}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {obj.school}\n                  </TableCell>\n                  <TableCell>{obj.diploma}</TableCell>\n                  <TableCell>\n                    <IconButton aria-label=\"delete\">\n                      <EditIcon\n                        style={{ color: \"#df4759\" }}\n                        onClick={() => {\n                          setToggle(true);\n                          setEditId(obj.id);\n                          setTimeout(openUpdate(obj.id), 500);\n                        }}\n                      />\n                    </IconButton>\n                  </TableCell>\n                  <TableCell>\n                    <IconButton aria-label=\"delete\">\n                      <DeleteIcon\n                        style={{ color: \"#df4759\" }}\n                        onClick={() => {\n                          setTimeout(deleteById(obj.id), 500);\n                        }}\n                      />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    </div>\n  );\n};\nexport default EditEducation;\n","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditExperience.jsx",["558","559"],"import \"date-fns\";\nimport React, { useState, useEffect } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { TextField } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"react-bootstrap/Modal\";\nimport axios from \"axios\";\nimport authHeader from \"../../../../services/authHeader\";\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport userService from \"../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  textfield: {\n    marginTop: \"10px\",\n    marginRight: \"1vw\",\n    width: \"100%\",\n  },\n  table: {\n    minWidth: \"54vw\",\n  },\n  dates: {\n    paddingTop: \"10px\",\n    marginLeft: \"5vw\",\n    width: \"60%\",\n    outline: \"none\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(20),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  button: {\n    margin: \"1vw 1vh\",\n    justifyContent: \"center\",\n    outline: \"none\",\n  },\n}));\n\nconst EditExperience = (props) => {\n  //POST STATES\n  let [dateStart, setStartDate] = useState(new Date());\n  let [dateEnd, setEndDate] = useState(new Date());\n  const [occupation, setOccupaton] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [company, setCompany] = useState(\"\");\n\n  // STYLE STATES\n  const [open, setOpen] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n\n  // RESPONSE STATES\n  const [successful, setSuccessful] = useState(false);\n  const [message, setMessage] = useState(\"\");\n\n  // whole profile from parent\n  // const data = props.data;\n\n  //Get data to fill table\n  const [getRequest, setGetRequest] = useState();\n\n  //MAKESTYLES\n  const classes = useStyles();\n\n  //toggle to show update or upload\n  const [toggle, setToggle] = useState(false);\n\n  //currently editing experience id\n  const [editId, setEditId] = useState();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await userService.getExperience()\n      setGetRequest(result.data);\n    };\n    fetchData();\n  }, [successful]);\n\n  const handleStart = (date) => {\n    setStartDate(date);\n  };\n\n  const handleEnd = (date) => {\n    setEndDate(date);\n  };\n\n  const handleOccupation = (e) => {\n    setOccupaton(e.target.value);\n  };\n  const handleCompany = (e) => {\n    setCompany(e.target.value);\n  };\n  const handleDescription = (e) => {\n    setDescription(e.target.value);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const upload = () => {\n    const errors = [];\n    if (occupation.length === 0) errors.push(\"Occupation must not be empty\");\n    if (dateEnd <= dateStart) {\n      errors.push(\"End date can't be inferior or equal to start date!\");\n    }\n    if (company.length === 0) errors.push(\"Company must not be empty\");\n    if (description.length === 0) errors.push(\"Description must not be emepty\");\n    if (errors.length !== 0) {\n      setMessage(errors);\n      setOpen(true);\n      return 0;\n    }\n    setModalShow(false);\n    dateStart = dateStart.toString().substring(4, 15);\n    dateEnd = dateEnd.toString().substring(4, 15);\n    userService.uploadExperience(occupation, company, dateStart, dateEnd, description)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n          props.onChange(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n    setCompany(\"\");\n    setOccupaton(\"\");\n    setDescription(\"\");\n    setStartDate(new Date());\n    setEndDate(new Date());\n  };\n\n  const openUpdate = (id) => {\n    const getData = async (id) => {\n      const res = await userService.getExperienceById(id);\n      setCompany(res?.data?.company);\n      setOccupaton(res?.data?.occupation);\n      setDescription(res?.data?.description);\n      setStartDate(res?.data?.dateStart);\n      setEndDate(res?.data?.dateEnd);\n    };\n    getData(id);\n    setTimeout(setModalShow(true), 500);\n  };\n\n  const update = (id) => {\n    const errors = [];\n    if (occupation.length === 0) errors.push(\"Occupation must not be empty\");\n    if (dateEnd <= dateStart) {\n      errors.push(\"End date can't be inferior or equal to start date!\");\n    }\n    if (company.length === 0) errors.push(\"Company must not be empty\");\n    if (description.length === 0) errors.push(\"Description must not be emepty\");\n    if (errors.length !== 0) {\n      setMessage(errors);\n      setOpen(true);\n      return 0;\n    }\n\n    dateStart = dateStart.toString().substring(4, 15);\n    dateEnd = dateEnd.toString().substring(4, 15);\n    const experience = {\n      occupation: occupation,\n      company: company,\n      dateStart: dateStart,\n      dateEnd: dateEnd,\n      description: description,\n    };\n    userService.editExperience(id, experience)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(!props.toggle);\n          props.onChange(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n    setModalShow(false);\n  };\n\n  const deleteById = (id) => {\n    userService.deleteExperience(id)\n      .then((response) => {\n        setSuccessful(true);\n        setSuccessful(false);\n      });\n  };\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <Button\n          onClick={() => {\n            setCompany(\"\");\n            setOccupaton(\"\");\n            setDescription(\"\");\n            setStartDate(new Date());\n            setEndDate(new Date());\n            setModalShow(true);\n            setToggle(false);\n          }}\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"medium\"\n          startIcon={\n            <AddCircleOutlinedIcon\n              style={{\n                maxWidth: \"30px\",\n                maxHeight: \"30px\",\n                minWidth: \"30px\",\n                minHeight: \"30px\",\n              }}\n            />\n          }\n        >\n          Add New\n        </Button>\n        <Modal\n          show={modalShow}\n          color=\"primary\"\n          onHide={() => setModalShow(false)}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Body>\n            <FormControl>\n              <Grid container justify=\"space-between\">\n                <Grid item xs={6}>\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Company\"\n                    value={company}\n                    onChange={handleCompany}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Occupation\"\n                    value={occupation}\n                    onChange={handleOccupation}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Description\"\n                    value={description}\n                    onChange={handleDescription}\n                    className={classes.textfield}\n                  />\n                </Grid>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid item xs={6}>\n                    <KeyboardDatePicker\n                      disableToolbar\n                      className={classes.dates}\n                      variant=\"inline\"\n                      format=\"dd/MM/yyyy\"\n                      margin=\"normal\"\n                      label=\"Start Date\"\n                      value={dateStart}\n                      onChange={handleStart}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                    <KeyboardDatePicker\n                      disableToolbar\n                      className={classes.dates}\n                      variant=\"inline\"\n                      format=\"dd/MM/yyyy\"\n                      margin=\"normal\"\n                      label=\"End Date\"\n                      value={dateEnd}\n                      onChange={handleEnd}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </Grid>\n            </FormControl>\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n              <Alert\n                onClose={handleClose}\n                severity={successful ? \"success\" : \"error\"}\n              >\n                {typeof message == \"string\"\n                  ? message\n                  : message?.map((message1) => (\n                    <span>\n                      -{message1}\n                      <br />\n                    </span>\n                  ))}\n              </Alert>\n            </Snackbar>\n          </Modal.Body>\n          <Modal.Footer>\n            {toggle && (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  update(editId);\n                  setSuccessful(false);\n                }}\n              >\n                Update\n              </Button>\n            )}\n            {!toggle && (\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  upload();\n                  setSuccessful(false);\n                }}\n              >\n                Upload\n              </Button>\n            )}\n          </Modal.Footer>\n        </Modal>\n\n        <TableContainer component={Paper}>\n          <Table\n            className={classes.table}\n            size=\"small\"\n            aria-label=\"simple table\"\n          >\n            <TableHead>\n              <TableRow>\n                <TableCell>Company</TableCell>\n                <TableCell>Occupation</TableCell>\n                <TableCell>Edit</TableCell>\n                <TableCell>Delete</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {getRequest?.map((obj) => (\n                <TableRow key={obj}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {obj.company}\n                  </TableCell>\n                  <TableCell>{obj.occupation}</TableCell>\n                  <TableCell>\n                    <IconButton aria-label=\"delete\">\n                      <EditIcon\n                        style={{ color: \"#df4759\" }}\n                        onClick={() => {\n                          setToggle(true);\n                          setEditId(obj.id);\n                          setTimeout(openUpdate(obj.id), 500);\n                        }}\n                      />\n                    </IconButton>\n                  </TableCell>\n                  <TableCell>\n                    <IconButton aria-label=\"delete\">\n                      <DeleteIcon\n                        style={{ color: \"#df4759\" }}\n                        onClick={() => {\n                          setTimeout(deleteById(obj.id), 500);\n                        }}\n                      />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    </div>\n  );\n};\nexport default EditExperience;\n","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditAbout.jsx",["560","561"],"import React, { useState, initialState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Input from \"react-phone-number-input/input\";\nimport \"react-phone-number-input/style.css\";\nimport Socials from \"./EditSocials\";\nimport Form from \"react-bootstrap/Form\";\nimport userService from \"../../../../services/userService\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  route: {\n    width: \"100%\",\n  },\n}));\n\nconst EditAbout = (props) => {\n  // MATERIAL UI STYLING AL3ABD\n  const classes = useStyles();\n  const data = props.data;\n\n  const handleClick = (e) => {\n    const errors1 = [];\n\n    // if (bio?.length === 0) errors1.push(\"Bio must not be empty\");\n    // if (interests?.length === 0) errors1.push(\"Interests must not be empty\");\n    if (errors1.length > 0) {\n      setMessage(errors1);\n      return 0;\n    }\n    update(e);\n  };\n\n  const [bio, setBio] = useState(data?.bio);\n  const [address, setAddress] = useState(data?.address);\n  const [city, setCity] = useState(data?.city);\n  const [number, setNumber] = useState(data?.number);\n  const [interests, setInterests] = useState(data?.interests);\n  const [domaine, setDomaine] = useState(data?.domaine);\n\n  const [successful, setSuccessful] = useState(false);\n  const [message, setMessage] = useState(initialState);\n\n  const handleAddressChange = (e) => {\n    const value = e.target.value;\n    setAddress(value);\n  };\n\n  const handleCityChange = (e) => {\n    setCity(e.target.value);\n  };\n\n  const handleNumberChange = (e) => {\n    const value = e;\n    setNumber(value);\n  };\n\n  const handleBioChange = (e) => {\n    setBio(e.target.value);\n  };\n\n  const handleInterestsChange = (e) => {\n    const value = e.target.value;\n    setInterests(value);\n  };\n  const handleDomaineChange = (e) => {\n    setDomaine(e.target.value);\n  };\n\n  const update = (e) => {\n    let abut = {\n      firstName:data?.firstName,\n      lastName:data?.lastName,\n      address: address,\n      city: city,\n      number: number,\n      bio: bio,\n      interests: interests,\n      domaine: domaine,\n    };\n    console.log(abut);\n    userService.updateAbout(props?.id, abut).then(\n      (response) => {\n        setMessage(response.data.message);\n        setSuccessful(!props.toggle);\n        props.onChange(true);\n      },\n      (error) => {\n        const resMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString();\n        setMessage(resMessage);\n        setSuccessful(false);\n      }\n    );\n  };\n\n  return (\n    <div className=\"container\">\n      <form>\n        <div className=\"form-group row  align-items-center\">\n          <label for=\"number\" className=\"col-1 col-form-label\">\n            Address:\n          </label>\n          <div className=\"col-7 mr-2\">\n            {\" \"}\n            <input\n              className=\"form-control mt-2\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              type=\"text\"\n              placeholder=\"Address\"\n              value={address}\n              onChange={handleAddressChange}\n              required\n            />\n          </div>\n          <div className=\"col-3\">\n            <input\n              className=\"form-control mr-2 mt-2\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              type=\"text\"\n              placeholder=\"City\"\n              value={city}\n              onChange={handleCityChange}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"form-group row  align-items-center\">\n          <label for=\"example-tel-input\" class=\"col-3 col-form-label\">\n            Telephone :\n          </label>\n          <div className=\"col-5\">\n            <Input\n              className=\"form-control mt-2\"\n              country=\"MA\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              value={number}\n              placeholder=\"Number\"\n              onChange={handleNumberChange}\n              id=\"example-tel-input\"\n            />\n          </div>\n        </div>\n        <div className=\"form-group row align-items-center\">\n          <label for=\"example-tel-input\" class=\"col-sm-2 col-form-label\">\n            Filière:\n          </label>\n          <div className=\"col-sm-5\">\n            <Form.Control\n              as=\"select\"\n              onChange={handleDomaineChange}\n              defaultValue={domaine}\n            >\n              <option value=\"Informatique\">Informatique</option>\n              <option value=\"Electrique\">Electrique</option>\n              <option value=\"Mécanique\">Mécanique</option>\n              <option value=\"Industriel\">Industriel</option>\n              <option value=\"Réseau et Télecommunications\">\n                Réseau et Télecommunications\n              </option>\n              <option value=\"Economie\">Economie</option>\n              <option value=\"Autre\">Autre</option>\n            </Form.Control>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"bio\" class=\"col-sm-2 col-form-label\">\n            Bio:\n          </label>\n          <br />\n          <textarea\n            className=\"inputs form-control col-sm-12 mt-2\"\n            rows=\"4\"\n            name=\"bio\"\n            id=\"comment\"\n            maxLength=\"400\"\n            placeholder=\"Bio\"\n            style={{\n              backgroundColor: \"#f3f2ef\",\n              resize: \"none\",\n            }}\n            value={bio}\n            onChange={handleBioChange}\n          ></textarea>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"bio\" class=\"col-sm-2 col-form-label\">\n            Interests:\n          </label>\n          <br />\n          <textarea\n            className=\"inputs form-control col-sm-12\"\n            rows=\"4\"\n            name=\"bio\"\n            id=\"comment\"\n            maxLength=\"400\"\n            placeholder=\"What interests you?\"\n            style={{\n              backgroundColor: \"#f3f2ef\",\n              resize: \"none\",\n            }}\n            value={interests}\n            onChange={handleInterestsChange}\n          ></textarea>\n        </div>\n        <Socials />\n        <div className={classes.root + \" btnholder\"}>\n          <Button\n            variant=\"outlined\"\n            onClick={(e) => {\n              handleClick();\n            }}\n          >\n            Edit\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default EditAbout;\n","/home/bobhhy/forum-last/src/Components/Dashboard/Title.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCv.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCompany/SetCompany.jsx",["562"],"import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Link } from \"react-router-dom\";\n//CHILDREN\nimport CompanyImage from \"./AddCompany Components/CompanyImage\";\nimport AboutCompany from \"./AddCompany Components/AboutCompany\";\n\n// import \"../css/cv.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  layout: {\n    width: \"90% !important\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    width: \"auto\",\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\nconst steps = [\"Photo\", \"Company Info\"];\n\nexport default function SetCompany(props) {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = useState(0);\n\n  const user = props?.user;\n\n  const [toggle, setToggle] = useState(false);\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  function getStepContent(step) {\n    switch (step) {\n      case 0:\n        return (\n          <CompanyImage\n            onChange={(value) => {\n              setToggle(value);\n            }}\n            id={user?.id}\n          />\n        );\n      case 1:\n        return (\n          <AboutCompany\n            user={user}\n            onChange={(value) => {\n              setToggle(value);\n            }}\n          />\n        );\n      default:\n        throw new Error(\"Unknown step\");\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          {/* <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n            Title\n          </Typography> */}\n          <div className=\"d-flex flex-wrap\">\n            <Stepper\n              activeStep={activeStep}\n              orientation=\"vertical\"\n              className={classes.stepper}\n            >\n              {steps.map((label) => (\n                <Step key={label}>\n                  <StepLabel>{label}</StepLabel>\n                </Step>\n              ))}\n            </Stepper>\n            <React.Fragment>\n              {activeStep === steps.length ? (\n                <React.Fragment>\n                  <div className=\"flex-fill mt-4 ml-4\">\n                    <Typography variant=\"h5\" gutterBottom>\n                      Thank you for your Time.\n                    </Typography>\n                  </div>\n\n                  <Typography variant=\"subtitle1\" decor>\n                    The info you have input is now visible to everyone\n                  </Typography>\n                  <div className={classes.buttons}>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className={classes.button}\n                      onClick={() => window.location.reload()}\n                    >\n                      View your Profile\n                    </Button>\n                  </div>\n                </React.Fragment>\n              ) : (\n                <React.Fragment>\n                  <div className=\"flex-fill mt-4  d-flex justify-content-center\">\n                    {getStepContent(activeStep)}\n                  </div>\n                  <div className={classes.buttons}>\n                    {activeStep !== 0 && (\n                      <Button\n                        onClick={() => {\n                          handleBack();\n                          setToggle(true);\n                        }}\n                        className={classes.button}\n                      >\n                        Back\n                      </Button>\n                    )}\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={!toggle}\n                      onClick={() => {\n                        handleNext();\n                        setToggle(false);\n                      }}\n                      className={classes.button}\n                    >\n                      {activeStep === steps.length - 1 ? \"Confirm\" : \"Next\"}\n                    </Button>\n                  </div>\n                </React.Fragment>\n              )}\n            </React.Fragment>\n          </div>\n        </Paper>\n      </main>\n    </React.Fragment>\n  );\n}\n","/home/bobhhy/forum-last/src/Components/Messages/Sidebar/MessageConversation/MessageConversation.jsx",["563"],"import React, { useEffect, useState, useMemo } from 'react'\nimport styles from './MessageConversation.module.css'\nimport Avatar from '@material-ui/core/Avatar';\nfunction MessageConversation({ isActive, name, image, message, lastDate, onClick }) {\n    const [active, setActive] = useState(false)\n    useMemo(() => {\n        setActive(isActive ? styles.active : \"\")\n    }, [isActive]);\n    return (\n        <div onClick={onClick} className={`${styles.container} ${active}`}>\n            <Avatar className={styles.avatar} alt={name} src={image} />\n            <div className={styles.infos}>\n                <h4>{name}</h4>\n                <h6>{message}</h6>\n                <div className={styles.date}>{lastDate}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default MessageConversation\n","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCompany/AddCompany Components/CompanySocials.jsx",["564","565","566","567","568"],"import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { MDBContainer, MDBBtn } from \"mdbreact\";\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport userService from \"../../../../../services/userService\";\nimport LanguageIcon from \"@material-ui/icons/Language\";\n\nconst Socials = (props) => {\n  const [id, setId] = useState(\"\");\n  const [toggle, setToggle] = useState(false);\n  const [url, setUrl] = useState(\"\");\n\n  const fbToggler = (e) => {\n    setId(\"Facebook\");\n    if (!toggle) {\n      setToggle(true);\n    } else {\n      if (id == \"Facebook\") {\n        setToggle(false);\n        setId(\"Facebook\");\n      }\n    }\n  };\n\n  const inToggler = (e) => {\n    setId(\"LinkedIn\");\n    if (!toggle) {\n      setToggle(true);\n    } else {\n      if (id == \"LinkedIn\") {\n        setId(\"LinkedIn\");\n        setToggle(false);\n      }\n    }\n  };\n\n  const webToggler = (e) => {\n    setId(\"Website\");\n    if (!toggle) {\n      setToggle(true);\n    } else {\n      if (id == \"Website\") {\n        setToggle(false);\n        setId(\"Website\");\n      }\n    }\n  };\n\n\n  const onChangeHandler = (e) => {\n    setUrl(e.target.value);\n  };\n\n  const upload = () => {\n    let ur = url;\n    if(!url.startsWith(\"https://\")){\n        ur = \"https://\" + url\n    }\n    const link = { name: id, url: ur };\n    console.log(link);\n    userService.uploadCompanyLink(link).then((res) => {\n      setId(\"\");\n      setUrl(\"\");\n      setToggle(false);\n    });\n  };\n\n  return (\n    <div>\n      <div class=\"form-group row col-sm-12 align-items-center\">\n        <label class=\"col-sm-2 col-form-label\">Add Socials:</label>\n        <MDBContainer className=\"col-sm-10 flex-row mt-3\">\n          <Tooltip title=\"Lien pour le profil Facebook\">\n            <MDBBtn\n              size=\"lg\"\n              className=\"col-sm-3 col-4\"\n              social=\"fb\"\n              onClick={fbToggler}\n            >\n              <FacebookIcon />\n            </MDBBtn>\n          </Tooltip>\n          <Tooltip title=\"Lien pour le profil LinkedIn\">\n            <MDBBtn\n              size=\"lg\"\n              className=\"col-sm-3 col-4\"\n              social=\"li\"\n              onClick={inToggler}\n            >\n              <LinkedInIcon />\n            </MDBBtn>\n          </Tooltip>\n          <Tooltip title=\"Lien pour votre site Web\">\n            <MDBBtn\n              size=\"lg\"\n              className=\"col-sm-3 col-4\"\n              social=\"git\"\n              onClick={webToggler}\n            >\n              <LanguageIcon />\n            </MDBBtn>\n          </Tooltip>\n        </MDBContainer>\n      </div>\n      {toggle && (\n        <div class=\"form-group\" style={{ display: \"flex\" }}>\n          {id && (\n            <input\n              class=\"form-control col-sm-8\"\n              type=\"text\"\n              placeholder={`Lien ${id}`}\n              style={{ backgroundColor: \"#f3f2ef\" }}\n              id={id}\n              value={url}\n              onChange={onChangeHandler}\n              required\n            />\n          )}\n          <Button\n            variant=\"contained\"\n            color=\"info\"\n            style={{ marginLeft: \"3px\", fontWeight: \"bolder\" }}\n            onClick={() => {\n              upload();\n            }}\n          >\n            Add\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Socials;\n","/home/bobhhy/forum-last/src/Components/Messages/Feed/ProfileInfo/ProfileInfo.jsx",["569","570"],"import React from \"react\";\nimport styles from \"./ProfileInfo.module.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction ProfileInfo({ id, name, company, role, image }) {\n  const history = useHistory();\n  const handleClick = () => {\n  };\n  function capitalizeTheFirstLetterOfEachWord(words) {\n    var separateWord = words?.toLowerCase().split(\" \");\n    for (var i = 0; i < separateWord?.length; i++) {\n      separateWord[i] =\n        separateWord[i]?.charAt(0).toUpperCase() +\n        separateWord[i]?.substring(1);\n    }\n    return separateWord?.join(\" \");\n  }\n\n  return (\n    <div className={styles.profile_info} onClick={handleClick}>\n      {role == 1 ? (\n        <Avatar className={styles.image} src={image} />\n      ) : (\n        <Avatar className={`${styles.image} ${styles.square}`} src={image} />\n      )}\n\n      {role === 1 && (\n        <h5>\n          {capitalizeTheFirstLetterOfEachWord(name)} - <span>Etudiant</span>\n        </h5>\n      )}\n      {role === 3 && (\n        <h5>\n          {capitalizeTheFirstLetterOfEachWord(company)} -{\" \"}\n          <span>Entreprise</span>\n        </h5>\n      )}\n    </div>\n  );\n}\n\nexport default ProfileInfo;\n","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/EditCv/EditSocials.jsx",["571","572","573","574"],"import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { MDBContainer, MDBBtn } from \"mdbreact\";\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport userService from \"../../../../services/userService\";\nconst Socials = (props) => {\n  const [id, setId] = useState(\"\");\n  const [toggle, setToggle] = useState(false);\n  const [url, setUrl] = useState(\"\");\n\n  const fbToggler = (e) => {\n    setId(\"Facebook\");\n    if (!toggle) {\n      setToggle(true);\n    } else {\n      if (id == \"Facebook\") {\n        setToggle(false);\n        setId(\"Facebook\");\n      }\n    }\n  };\n\n  const inToggler = (e) => {\n    setId(\"LinkedIn\");\n    if (!toggle) {\n      setToggle(true);\n    } else {\n      if (id == \"LinkedIn\") {\n        setId(\"LinkedIn\");\n        setToggle(false);\n      }\n    }\n  };\n\n  const gitToggler = (e) => {\n    setId(\"GitHub\");\n    if (!toggle) {\n      setToggle(true);\n    } else {\n      if (id == \"GitHub\") {\n        setToggle(false);\n        setId(\"GitHub\");\n      }\n    }\n  };\n\n  const ytToggler = () => {\n    setId(\"YouTube\");\n    if (!toggle) {\n      setToggle(true);\n    } else {\n      if (id == \"YouTube\") {\n        setToggle(false);\n        setId(\"YouTube\");\n      }\n    }\n  };\n\n  const onChangeHandler = (e) => {\n    setUrl(e.target.value);\n  };\n\n  const upload = () => {\n    let ur = url;\n    if(!url.startsWith(\"https://\")){\n        ur = \"https://\" + url\n    }\n    const link = { name: id, url: ur };\n    userService.uploadCvLink(link).then(\n      (res) => {\n        setId(\"\");\n        setUrl(\"\");\n        setToggle(false);\n        console.log(res);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  };\n\n  return (\n    <div>\n      <div class=\"form-group row col-sm-12 align-items-center\">\n        <label class=\"col-sm-2 col-form-label\">Add Socials:</label>\n        <MDBContainer className=\"col-sm-10 flex-row mt-3\">\n          <Tooltip title=\"Lien pour votre profil Facebook\">\n            <MDBBtn\n              size=\"lg\"\n              className=\"col-sm-3 col-4\"\n              social=\"fb\"\n              onClick={fbToggler}\n            >\n              <FacebookIcon />\n            </MDBBtn>\n          </Tooltip>\n          <Tooltip title=\"Lien pour votre profil LinkedIn\">\n            <MDBBtn\n              size=\"lg\"\n              className=\"col-sm-3 col-4\"\n              social=\"li\"\n              onClick={inToggler}\n            >\n              <LinkedInIcon />\n            </MDBBtn>\n          </Tooltip>\n          <Tooltip title=\"Lien pour votre compte GitHub\">\n            <MDBBtn\n              size=\"lg\"\n              className=\"col-sm-3 col-4\"\n              social=\"git\"\n              onClick={gitToggler}\n            >\n              <GitHubIcon />\n            </MDBBtn>\n          </Tooltip>\n          <Tooltip title=\"Lien pour votre CV video\">\n            <MDBBtn\n              size=\"lg\"\n              className=\"col-sm-3 col-4\"\n              social=\"git\"\n              onClick={ytToggler}\n            >\n              <YouTubeIcon />\n            </MDBBtn>\n          </Tooltip>\n        </MDBContainer>\n      </div>\n      {toggle && (\n        <div class=\"form-group\" style={{ display: \"flex\" }}>\n          {id && (\n            <input\n              class=\"form-control col-sm-8\"\n              type=\"text\"\n              placeholder={`Lien ${id}`}\n              style={{ backgroundColor: \"#f3f2ef\" }}\n              id={id}\n              value={url}\n              onChange={onChangeHandler}\n              required\n            />\n          )}\n          <Button\n            variant=\"contained\"\n            color=\"info\"\n            style={{ marginLeft: \"3px\", fontWeight: \"bolder\" }}\n            onClick={() => {\n              upload();\n            }}\n          >\n            Modifier\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Socials;\n","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCompany/AddCompany Components/AboutCompany.jsx",["575","576"],"import React, { useState, initialState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n// import \"../../css/cv.css\";\nimport Input from \"react-phone-number-input/input\";\nimport \"react-phone-number-input/style.css\";\nimport CompanySocials from \"./CompanySocials\";\nimport axios from \"axios\";\nimport authHeader from \"../../../../../services/authHeader\";\nimport userService from \"../../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  route: {\n    width: \"55%\",\n  },\n}));\n\nconst About = (props) => {\n  // MATERIAL UI STYLING AL3ABD\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleClick = (e) => {\n    const errors1 = [];\n    if (address.length === 0 || city.length === 0)\n      errors1.push(\"Adrress cannot be empty\");\n    if (!number) errors1.push(\"Number cannot be empty\");\n    if (number?.length < 11)\n      errors1.push(\"Your number should be like 0663-123123\");\n    if (bio?.length === 0) errors1.push(\"Bio must not be empty\");\n    if (errors1.length > 0) {\n      setMessage(errors1);\n      setTimeout(setOpen(true), 500);\n      return 0;\n    }\n    upload(e);\n    setTimeout(setOpen(true), 500);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n    setSuccessful(false);\n  };\n\n  const [bio, setBio] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [social, setSocials] = useState({});\n\n  const [successful, setSuccessful] = useState(false);\n  const [message, setMessage] = useState(initialState);\n\n  const [flag, setFlag] = useState(initialState);\n  const [id, setId] = useState();\n\n  useEffect(() => {\n    async function getUserData() {\n      await userService.getUserData().then((response) => {\n        setFlag(response?.data?.cv?.flag);\n        setId(response?.data?.id);\n      });\n    }\n    getUserData();\n  }, []);\n\n  const handleAddressChange = (e) => {\n    const value = e.target.value;\n    setAddress(value);\n  };\n\n  const handleCityChange = (e) => {\n    setCity(e.target.value);\n  };\n\n  const handleNumberChange = (e) => {\n    const value = e;\n    setNumber(value);\n  };\n\n  const handleBioChange = (e) => {\n    setBio(e.target.value);\n  };\n\n  const upload = (e) => {\n    const socials = JSON.stringify(social);\n    userService.uploadAboutCompany(\n      address,\n      city,\n      number,\n      bio,\n      socials).then(\n        (response) => {\n          if (!flag) {\n            userService.flagCompany(id)\n          }\n          setMessage(response.data.message);\n          setSuccessful(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n  };\n\n  return (\n    <div className={classes.route}>\n      <form>\n        <div className=\"form-group row\">\n          <label for=\"number\" className=\"col-sm-2 col-form-label\">\n            Enterprise location:\n          </label>\n          <div className=\"col-sm-8\">\n            {\" \"}\n            <input\n              className=\"form-control mr-2 mt-2\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              type=\"text\"\n              placeholder=\"Address\"\n              value={address}\n              onChange={handleAddressChange}\n              required\n            />\n          </div>\n          <div className=\"col-sm-2\">\n            <input\n              className=\"form-control mr-2 mt-2\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              type=\"text\"\n              placeholder=\"City\"\n              value={city}\n              onChange={handleCityChange}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"form-group row\">\n          <label for=\"example-tel-input\" class=\"col-sm-2 col-form-label\">\n            Telephone :\n          </label>\n          <div className=\"col-sm-5\">\n            <Input\n              className=\"form-control mt-2\"\n              country=\"MA\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              value={number}\n              placeholder=\"Number\"\n              onChange={handleNumberChange}\n              id=\"example-tel-input\"\n            />\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"bio\" class=\"col-sm-2 col-form-label\">\n            Enterprise Bio:\n          </label>\n          <br />\n          <textarea\n            className=\"inputs form-control col-sm-12 mt-2\"\n            rows=\"4\"\n            name=\"bio\"\n            id=\"comment\"\n            maxLength=\"400\"\n            placeholder=\"Bio\"\n            style={{\n              backgroundColor: \"#f3f2ef\",\n              resize: \"none\",\n            }}\n            value={bio}\n            onChange={handleBioChange}\n          ></textarea>\n        </div>\n        <CompanySocials onChange={(value) => setSocials(value)} />\n        <div className={classes.root + \" btnholder\"}>\n          <Button\n            variant=\"outlined\"\n            onClick={(e) => {\n              props.onChange(true);\n              handleClick();\n            }}\n          >\n            UPLOAD\n          </Button>\n          <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n            <Alert\n              onClose={handleClose}\n              severity={successful ? \"success\" : \"error\"}\n            >\n              {typeof message == \"string\"\n                ? message\n                : message?.map((message1) => (\n                  <span>\n                    -{message1}\n                    <br />\n                  </span>\n                ))}\n            </Alert>\n          </Snackbar>\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default About;\n","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCompany/AddCompany Components/CompanyImage.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/Award.jsx",["577","578","579"],"import \"date-fns\";\nimport React, { useState, useEffect } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { TextField } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"react-bootstrap/Modal\";\nimport axios from \"axios\";\nimport authHeader from \"../../../../../services/authHeader\";\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport userService from \"../../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  textfield: {\n    marginTop: \"10px\",\n    marginRight: \"1vw\",\n    width: \"100%\",\n  },\n  table: {\n    minWidth: \"40vw\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(20),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  button: {\n    margin: \"1vw 1vh\",\n    justifyContent: \"center\",\n    outline: \"none\",\n  },\n}));\n\nconst Award = (props) => {\n  //POST STATES\n  const [organizer, setOrganizer] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [position, setPosition] = useState(\"\");\n\n  // STYLE STATES\n  const [open, setOpen] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n\n  // RESPONSE STATES\n  const [successful, setSuccessful] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [data, setData] = useState();\n\n  //MAKESTYLES\n  const classes = useStyles();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await userService.getAward();\n      setData(result.data);\n    };\n    props.onChange(true);\n    fetchData();\n  }, [successful]);\n\n  const handleOrganizer = (e) => {\n    setOrganizer(e.target.value);\n  };\n  const handleName = (e) => {\n    setName(e.target.value);\n  };\n  const handlePosition = (e) => {\n    setPosition(e.target.value);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n  const upload = () => {\n    const errors = [];\n    if (organizer.length === 0) errors.push(\"Fields must not be empty.\\n\");\n    if (name.length === 0) errors.push(\"Fields must not be empty.\\n\");\n    if (!position.match(\"^[0-9]+$\")) errors.push(\"Position must be a number.\");\n    if (errors.length !== 0) {\n      setMessage(errors);\n      setOpen(true);\n      return 0;\n    }\n    setModalShow(false);\n    userService.uploadAward(organizer, name, position)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n    setOrganizer(\"\");\n    setName(\"\");\n    setPosition(\"\");\n  };\n\n  const deleteById = (id) => {\n    userService.deleteAward(id)\n      .then((response) => {\n        setSuccessful(true);\n        setSuccessful(false);\n      });\n  };\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <Button\n          onClick={() => setModalShow(true)}\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"medium\"\n          startIcon={\n            <AddCircleOutlinedIcon\n              style={{\n                maxWidth: \"30px\",\n                maxHeight: \"30px\",\n                minWidth: \"30px\",\n                minHeight: \"30px\",\n              }}\n            />\n          }\n        >\n          Add New\n        </Button>\n        <Modal\n          show={modalShow}\n          color=\"primary\"\n          onHide={() => setModalShow(false)}\n          size=\"md\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Body>\n            <FormControl>\n              <Grid container justify=\"center\">\n                <Grid item xs={6}>\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Organizer\"\n                    value={organizer}\n                    onChange={handleOrganizer}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Name\"\n                    value={name}\n                    onChange={handleName}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Position\"\n                    value={position}\n                    onChange={handlePosition}\n                    className={classes.textfield}\n                  />\n                </Grid>\n              </Grid>\n            </FormControl>\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n              <Alert severity=\"error\">{message}</Alert>\n            </Snackbar>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                upload();\n                setSuccessful(false);\n              }}\n            >\n              Upload\n            </Button>\n          </Modal.Footer>\n        </Modal>\n\n        <TableContainer component={Paper}>\n          <Table\n            className={classes.table}\n            size=\"small\"\n            aria-label=\"simple table\"\n          >\n            <TableHead>\n              <TableRow>\n                <TableCell>Organizer</TableCell>\n                <TableCell>Competition Name</TableCell>\n                <TableCell>Position</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data?.map((obj) => (\n                <TableRow key={obj}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {obj.organizer}\n                  </TableCell>\n                  <TableCell>{obj.name}</TableCell>\n                  <TableCell>{obj.position}</TableCell>\n                  <TableCell>\n                    <IconButton aria-label=\"delete\">\n                      <DeleteIcon\n                        style={{ color: \"#df4759\" }}\n                        onClick={() => {\n                          setTimeout(deleteById(obj.id), 500);\n                        }}\n                      />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    </div>\n  );\n};\nexport default Award;\n","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/SkillForm.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/Education.jsx",["580","581","582","583"],"import \"date-fns\";\nimport React, { useState, useEffect } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { TextField } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"react-bootstrap/Modal\";\nimport axios from \"axios\";\nimport authHeader from \"../../../../../services/authHeader\";\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport userService from \"../../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  textfield: {\n    marginTop: \"10px\",\n    marginRight: \"1vw\",\n    width: \"100%\",\n  },\n  table: {\n    minWidth: \"60vw\",\n  },\n  dates: {\n    paddingTop: \"10px\",\n    marginLeft: \"2vw\",\n    width: \"60%\",\n    outline: \"none\",\n  },\n  checkbox: {\n    paddingTop: \"40px\",\n    marginLeft: \"5px\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(20),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  button: {\n    margin: \"1vw 1vh\",\n    justifyContent: \"center\",\n    outline: \"none\",\n  },\n}));\n\nconst FormModal = (props) => {\n  //POST STATES\n  let [dateStart, setStartDate] = useState(new Date());\n  let [dateEnd, setEndDate] = useState(new Date());\n  const [school, setSchool] = useState(\"\");\n  const [diploma, setDiploma] = useState(\"\");\n  const [field, setField] = useState(\"\");\n  const [checked, setChecked] = useState(false);\n\n  // STYLE STATES\n  const [open, setOpen] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n\n  // RESPONSE STATES\n  const [successful, setSuccessful] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [data, setData] = useState();\n\n  //MAKESTYLES\n  const classes = useStyles();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await userService.getEducation();\n      if (result.data.length != 0) {\n        props.onChange(true);\n      }\n      setData(result.data);\n    };\n    fetchData();\n  }, [successful]);\n\n  const handleStart = (date) => {\n    setStartDate(date);\n  };\n  const handleChecked = (e) => {\n    setChecked(!checked);\n  };\n  const handleEnd = (date) => {\n    setEndDate(date);\n  };\n\n  const handleSchool = (e) => {\n    setSchool(e.target.value);\n  };\n  const handleDiploma = (e) => {\n    setDiploma(e.target.value);\n  };\n  const handleField = (e) => {\n    setField(e.target.value);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n  const upload = () => {\n    const errors = [];\n    if (school.length === 0) errors.push(\"School must not be empty\");\n\n    if (dateEnd <= dateStart && !checked) {\n      errors.push(\"End date can't be inferior or equal to start date!\");\n    }\n    if (diploma.length === 0) errors.push(\"Diploma must not be empty\");\n    if (field.length === 0) errors.push(\"field must not be emepty\");\n    if (errors.length !== 0) {\n      setMessage(errors);\n      setOpen(true);\n      return 0;\n    }\n    setModalShow(false);\n    dateStart = dateStart.toString().substring(4, 15);\n    if (checked) {\n      dateEnd = \"Present\";\n    } else {\n      dateEnd = dateEnd.toString().substring(4, 15);\n    }\n    console.log(dateEnd);\n    setChecked(false);\n\n    userService\n      .uploadEducation(school, diploma, dateStart, dateEnd, field)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n          props.onChange(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n    setSchool(\"\");\n    setDiploma(\"\");\n    setField(\"\");\n    setStartDate(new Date());\n    setEndDate(new Date());\n  };\n  const deleteById = (id) => {\n    userService.deleteEducation(id).then((response) => {\n      setSuccessful(true);\n      setSuccessful(false);\n    });\n  };\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <Button\n          onClick={() => setModalShow(true)}\n          variant=\"outlined\"\n          color=\"primary\"\n          size=\"medium\"\n          style={{ marginBottom: \"10px\" }}\n          startIcon={\n            <AddCircleOutlinedIcon\n              style={{\n                maxWidth: \"30px\",\n                maxHeight: \"30px\",\n                minWidth: \"30px\",\n                minHeight: \"30px\",\n              }}\n            />\n          }\n        >\n          Add New\n        </Button>\n        <Modal\n          show={modalShow}\n          color=\"primary\"\n          onHide={() => setModalShow(false)}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Body>\n            <FormControl>\n              <Grid container justify=\"space-between\">\n                <Grid item xs={6}>\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"School\"\n                    value={school}\n                    onChange={handleSchool}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Diploma\"\n                    value={diploma}\n                    onChange={handleDiploma}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Field\"\n                    value={field}\n                    onChange={handleField}\n                    className={classes.textfield}\n                  />\n                </Grid>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid item xs={6}>\n                    <KeyboardDatePicker\n                      disableToolbar\n                      className={classes.dates}\n                      variant=\"inline\"\n                      format=\"dd/MM/yyyy\"\n                      margin=\"normal\"\n                      label=\"Start Date\"\n                      value={dateStart}\n                      onChange={handleStart}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                    <KeyboardDatePicker\n                      disabled={checked ? true : false}\n                      disableToolbar\n                      className={classes.dates}\n                      variant=\"inline\"\n                      format=\"dd/MM/yyyy\"\n                      margin=\"normal\"\n                      label=\"End Date\"\n                      value={dateEnd}\n                      onChange={handleEnd}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                    <FormControlLabel\n                      className={classes.checkbox}\n                      value=\"end\"\n                      control={\n                        <Checkbox\n                          checked={checked}\n                          onChange={handleChecked}\n                          color=\"primary\"\n                        />\n                      }\n                      label=\"Present\"\n                      labelPlacement=\"end\"\n                    />\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </Grid>\n            </FormControl>\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n              <Alert\n                onClose={handleClose}\n                severity={successful ? \"success\" : \"error\"}\n              >\n                {typeof message == \"string\"\n                  ? message\n                  : message?.map((message1) => (\n                      <span>\n                        -{message1}\n                        <br />\n                      </span>\n                    ))}\n              </Alert>\n            </Snackbar>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                upload();\n                setSuccessful(false);\n              }}\n            >\n              Upload\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        {data && (\n          <TableContainer component={Paper}>\n            <Table\n              className={classes.table}\n              size=\"small\"\n              aria-label=\"simple table\"\n            >\n              <TableHead>\n                <TableRow>\n                  <TableCell>School</TableCell>\n                  <TableCell>Diploma</TableCell>\n                  <TableCell>Start Date</TableCell>\n                  <TableCell>End Date</TableCell>\n                  <TableCell>Field</TableCell>\n                  <TableCell>Action</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data?.map((obj) => (\n                  <TableRow key={obj}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {obj.school}\n                    </TableCell>\n                    <TableCell>{obj.diploma}</TableCell>\n                    <TableCell>{obj.dateStart}</TableCell>\n                    <TableCell>{obj.dateEnd}</TableCell>\n                    <TableCell>{obj.field}</TableCell>\n\n                    <TableCell>\n                      <IconButton aria-label=\"delete\">\n                        <DeleteIcon\n                          style={{ color: \"#df4759\" }}\n                          onClick={() => {\n                            setTimeout(deleteById(obj.id), 500);\n                          }}\n                        />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default FormModal;\n","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/Experience.jsx",["584"],"import \"date-fns\";\nimport React, { useState, useEffect } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { TextField } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"react-bootstrap/Modal\";\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport userService from \"../../../../../services/userService\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  textfield: {\n    marginTop: \"25px\",\n    marginRight: \"1vw\",\n    width: \"100%\",\n  },\n  table: {\n    minWidth: \"60vw\",\n  },\n  dates: {\n    paddingTop: \"10px\",\n    marginLeft: \"2vw\",\n    width: \"60%\",\n    outline: \"none\",\n  },\n  checkbox: {\n    paddingTop: \"40px\",\n    marginLeft: \"5px\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(20),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  button: {\n    margin: \"1vw 1vh\",\n    justifyContent: \"center\",\n    outline: \"none\",\n  },\n}));\n\nconst FormModal = (props) => {\n  //POST STATES\n  let [dateStart, setStartDate] = useState(new Date());\n  let [dateEnd, setEndDate] = useState(new Date());\n  const [occupation, setOccupaton] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [company, setCompany] = useState(\"\");\n  const [checked, setChecked] = useState(false);\n  const [isProject, setIsProject] = useState(false);\n\n  // STYLE STATES\n  const [open, setOpen] = useState(false);\n  const [modalShow, setModalShow] = useState(false);\n  const [modal2Show, setModal2Show] = useState(false);\n\n  // RESPONSE STATES\n  const [successful, setSuccessful] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [data, setData] = useState();\n\n  //MAKESTYLES\n  const classes = useStyles();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await userService.getExperience();\n      setData(result.data);\n    };\n    fetchData();\n    props.onChange(true);\n  }, [successful]);\n\n  const handleStart = (date) => {\n    setStartDate(date);\n  };\n  const handleChecked = (e) => {\n    setChecked(!checked);\n  };\n\n  const handleEnd = (date) => {\n    setEndDate(date);\n  };\n\n  const handleOccupation = (e) => {\n    setOccupaton(e.target.value);\n  };\n  const handleCompany = (e) => {\n    setCompany(e.target.value);\n  };\n  const handleDescription = (e) => {\n    setDescription(e.target.value);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n  const upload = () => {\n    const errors = [];\n    if (occupation.length === 0) errors.push(\"Occupation must not be empty\");\n\n    if (dateEnd <= dateStart && !checked) {\n      errors.push(\"End date can't be inferior or equal to start date!\");\n    }\n    if (company.length === 0) errors.push(\"Company must not be empty\");\n    if (description.length === 0) errors.push(\"Description must not be emepty\");\n    if (errors.length !== 0) {\n      setMessage(errors);\n      setOpen(true);\n      return 0;\n    }\n    setModalShow(false);\n    dateStart = dateStart.toString().substring(4, 15);\n    if (checked) {\n      dateEnd = \"Present\";\n    } else {\n      dateEnd = dateEnd.toString().substring(4, 15);\n    }\n    setChecked(false);\n    userService\n      .uploadExperience(\n        occupation,\n        company,\n        dateStart,\n        dateEnd,\n        description,\n        isProject\n      )\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n          props.onChange(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n    setCompany(\"\");\n    setOccupaton(\"\");\n    setDescription(\"\");\n    setStartDate(new Date());\n    setEndDate(new Date());\n  };\n\n  const deleteById = (id) => {\n    userService.deleteExperience(id).then((response) => {\n      setSuccessful(true);\n      setSuccessful(false);\n    });\n  };\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <ButtonGroup\n          color=\"primary\"\n          aria-label=\"contained  primary button group\"\n          style={{ marginBottom: \"10px\" }}\n        >\n          <Button\n            onClick={() => {\n              setModalShow(true);\n              setIsProject(false);\n            }}\n            startIcon={\n              <AddCircleOutlinedIcon\n                style={{\n                  maxWidth: \"30px\",\n                  maxHeight: \"30px\",\n                  minWidth: \"30px\",\n                  minHeight: \"30px\",\n                }}\n              />\n            }\n          >\n            Ajoutez une experience\n          </Button>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              setModal2Show(true);\n              setIsProject(true);\n              setCompany(\" \");\n            }}\n          >\n            Ou un projet que vous avez réalisé\n          </Button>\n        </ButtonGroup>\n        <Modal\n          show={modalShow}\n          color=\"primary\"\n          onHide={() => setModalShow(false)}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Body>\n            <FormControl>\n              <Grid container justify=\"space-between\">\n                <Grid item xs={6}>\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Company\"\n                    value={company}\n                    onChange={handleCompany}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Occupation\"\n                    value={occupation}\n                    onChange={handleOccupation}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Description\"\n                    value={description}\n                    onChange={handleDescription}\n                    className={classes.textfield}\n                  />\n                </Grid>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid item xs={6}>\n                    <KeyboardDatePicker\n                      disableToolbar\n                      className={classes.dates}\n                      variant=\"inline\"\n                      format=\"dd/MM/yyyy\"\n                      margin=\"normal\"\n                      label=\"Start Date\"\n                      value={dateStart}\n                      onChange={handleStart}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                    <KeyboardDatePicker\n                      disabled={checked ? true : false}\n                      disableToolbar\n                      className={classes.dates}\n                      variant=\"inline\"\n                      format=\"dd/MM/yyyy\"\n                      margin=\"normal\"\n                      label=\"End Date\"\n                      value={dateEnd}\n                      onChange={handleEnd}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                    <FormControlLabel\n                      className={classes.checkbox}\n                      value=\"end\"\n                      control={\n                        <Checkbox\n                          checked={checked}\n                          onChange={handleChecked}\n                          color=\"primary\"\n                        />\n                      }\n                      label=\"Present\"\n                      labelPlacement=\"end\"\n                    />\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </Grid>\n            </FormControl>\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n              <Alert\n                onClose={handleClose}\n                severity={successful ? \"success\" : \"error\"}\n              >\n                {typeof message == \"string\"\n                  ? message\n                  : message?.map((message1) => (\n                      <span>\n                        -{message1}\n                        <br />\n                      </span>\n                    ))}\n              </Alert>\n            </Snackbar>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                upload();\n                setSuccessful(false);\n              }}\n            >\n              Upload\n            </Button>\n          </Modal.Footer>\n        </Modal>\n\n        <Modal\n          show={modal2Show}\n          color=\"primary\"\n          onHide={() => setModal2Show(false)}\n          size=\"lg\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n        >\n          <Modal.Body>\n            <FormControl>\n              <Grid container justify=\"space-between\">\n                <Grid item xs={6}>\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Titre\"\n                    value={occupation}\n                    onChange={handleOccupation}\n                    className={classes.textfield}\n                  />\n                  <TextField\n                    variant=\"outlined\"\n                    label=\"Description\"\n                    value={description}\n                    onChange={handleDescription}\n                    className={classes.textfield}\n                  />\n                </Grid>\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <Grid item xs={6}>\n                    <KeyboardDatePicker\n                      disableToolbar\n                      className={classes.dates}\n                      variant=\"inline\"\n                      format=\"dd/MM/yyyy\"\n                      margin=\"normal\"\n                      label=\"Start Date\"\n                      value={dateStart}\n                      onChange={handleStart}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                    <KeyboardDatePicker\n                      disabled={checked ? true : false}\n                      disableToolbar\n                      className={classes.dates}\n                      variant=\"inline\"\n                      format=\"dd/MM/yyyy\"\n                      margin=\"normal\"\n                      label=\"End Date\"\n                      value={dateEnd}\n                      onChange={handleEnd}\n                      KeyboardButtonProps={{\n                        \"aria-label\": \"change date\",\n                      }}\n                    />\n                  </Grid>\n                </MuiPickersUtilsProvider>\n              </Grid>\n            </FormControl>\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n              <Alert\n                onClose={handleClose}\n                severity={successful ? \"success\" : \"error\"}\n              >\n                {typeof message == \"string\"\n                  ? message\n                  : message?.map((message1) => (\n                      <span>\n                        -{message1}\n                        <br />\n                      </span>\n                    ))}\n              </Alert>\n            </Snackbar>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                upload();\n                setSuccessful(false);\n                setModal2Show(false);\n              }}\n            >\n              Upload\n            </Button>\n          </Modal.Footer>\n        </Modal>\n\n        <TableContainer component={Paper}>\n          <Table\n            className={classes.table}\n            size=\"small\"\n            aria-label=\"simple table\"\n          >\n            <TableHead>\n              <TableRow>\n                <TableCell>Company</TableCell>\n                <TableCell>Occupation (Titre)</TableCell>\n                <TableCell>Start Date</TableCell>\n                <TableCell>End Date</TableCell>\n                <TableCell>Description</TableCell>\n                <TableCell>Action</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data?.map((obj) => (\n                <TableRow key={obj}>\n                  <TableCell>{obj.company}</TableCell>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {obj.occupation}\n                  </TableCell>\n                  <TableCell>{obj.dateStart}</TableCell>\n                  <TableCell>{obj.dateEnd}</TableCell>\n                  <TableCell>{obj.description}</TableCell>\n                  <TableCell>\n                    <IconButton aria-label=\"delete\">\n                      <DeleteIcon\n                        style={{ color: \"#df4759\" }}\n                        onClick={() => {\n                          setTimeout(deleteById(obj.id), 500);\n                        }}\n                      />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    </div>\n  );\n};\nexport default FormModal;\n","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/About.jsx",["585"],"import React, { useState, initialState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Input from \"react-phone-number-input/input\";\nimport \"react-phone-number-input/style.css\";\nimport Socials from \"./Socials\";\nimport \"../SetCv.css\";\nimport Form from \"react-bootstrap/Form\";\nimport userService from \"../../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  route: {\n    width: \"55%\",\n  },\n}));\n\nconst About = (props) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  // const [fullAbout, setFullAbout] = useState();\n\n  const handleClick = (e) => {\n    const errors1 = [];\n    if (firstName.length === 0 || lastName.length === 0)\n      errors1.push(\"Name cannot be empty\");\n    // if (address.length === 0 || city.length === 0)\n    //   errors1.push(\"Adrress cannot be empty\");\n    // if (!number) errors1.push(\"Number cannot be empty\");\n    // if (number?.length < 11)\n    //   errors1.push(\"Your number should be like 0663-123123\");\n    if (bio?.length === 0) errors1.push(\"Bio must not be empty\");\n    // if (interests?.length === 0) errors1.push(\"Interests must not be empty\");\n    if (errors1.length > 0) {\n      setMessage(errors1);\n      setTimeout(setOpen(true), 500);\n      return 0;\n    }\n    upload(e);\n    setTimeout(setOpen(true), 500);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n    setSuccessful(false);\n  };\n\n  // DATA TO UPLOAD AL3ABD\n  const [bio, setBio] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const [interests, setInterests] = useState(\"\");\n  const [domaine, setDomaine] = useState(\"\");\n  const [gottenName, setGottenName] = useState(\"\");\n\n  // RESPONSE MESSAGE AL3ABD\n  const [successful, setSuccessful] = useState(false);\n  const [message, setMessage] = useState(initialState);\n\n  const handleFirstNameChange = (e) => {\n    const value = e.target.value;\n    setFirstName(value);\n  };\n\n  const handleLastNameChange = (e) => {\n    const value = e.target.value;\n    setLastName(value);\n  };\n\n  const handleAddressChange = (e) => {\n    const value = e.target.value;\n    setAddress(value);\n  };\n\n  const handleCityChange = (e) => {\n    setCity(e.target.value);\n  };\n\n  const handleNumberChange = (e) => {\n    const value = e;\n    setNumber(value);\n  };\n\n  const handleBioChange = (e) => {\n    setBio(e.target.value);\n  };\n\n  const handleInterestsChange = (e) => {\n    const value = e.target.value;\n    setInterests(value);\n  };\n\n  const handleDomaineChange = (e) => {\n    setDomaine(e.target.value);\n  };\n\n  const upload = (e) => {\n    userService\n      .uploadAbout(\n        firstName,\n        lastName,\n        address,\n        city,\n        number,\n        bio,\n        interests,\n        domaine\n      )\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          props.onChange(true);\n          setSuccessful(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n  };\n\n  useEffect(() => {\n    // userService.getAbout().then((response) => {\n    //   setFullAbout(response?.data?.cv);\n    //   console.log(\"hh\");\n    //   console.log(response?.data?.cv);\n    // });\n    userService.getUserData().then((res) => {\n      setGottenName(res?.data?.name);\n      setFirstName(\n        res?.data?.name\n          ?.split(\" \")\n          .slice(0, 1)\n          ?.map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n          .join(\" \")\n      );\n      setLastName(\n        res?.data?.name\n          ?.split(\" \")\n          ?.slice(1)\n          ?.map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n          .join(\" \")\n      );\n    });\n  }, []);\n\n  return (\n    <div className={classes.route}>\n      <form>\n        <div className=\"form-group row align-items-center\">\n          <label for=\"number\" className=\"col-sm-2  col-form-label\">\n            Full Name:\n          </label>\n          <div className=\"col-sm-5 mt-2 \">\n            <input\n              className=\"form-control mr-2\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              type=\"text\"\n              placeholder=\"First Name\"\n              defaultValue={firstName}\n              value={firstName\n                .split(\" \")\n                .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                .join(\" \")}\n              onChange={handleFirstNameChange}\n              required\n            />\n          </div>\n          <div className=\"col-sm-5 mt-2\">\n            <input\n              className=\"form-control mr-2\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              type=\"text\"\n              id=\"number\"\n              placeholder=\"Last Name\"\n              defaultValue={lastName}\n              value={lastName\n                .split(\" \")\n                .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                .join(\" \")}\n              onChange={handleLastNameChange}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"form-group row align-items-center\">\n          <label for=\"number\" className=\"col-sm-2 col-form-label\">\n            Address:\n          </label>\n          <div className=\"col-sm-8\">\n            {\" \"}\n            <input\n              className=\"form-control mr-2 mt-2\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              type=\"text\"\n              placeholder=\"Address\"\n              value={address}\n              onChange={handleAddressChange}\n              required\n            />\n          </div>\n          <div className=\"col-sm-2\">\n            <input\n              className=\"form-control mr-2 mt-2\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              type=\"text\"\n              placeholder=\"City\"\n              value={city}\n              onChange={handleCityChange}\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"form-group row align-items-center\">\n          <label for=\"example-tel-input\" class=\"col-sm-2 col-form-label\">\n            Telephone :\n          </label>\n          <div className=\"col-sm-5\">\n            <Input\n              className=\"form-control mt-2\"\n              country=\"MA\"\n              style={{\n                backgroundColor: \"#f3f2ef\",\n              }}\n              value={number}\n              placeholder=\"Number\"\n              onChange={handleNumberChange}\n              id=\"example-tel-input\"\n            />\n          </div>\n        </div>\n        <div className=\"form-group row align-items-center\">\n          <label for=\"example-tel-input\" class=\"col-sm-2 col-form-label\">\n            Filiere :\n          </label>\n          <div className=\"col-sm-5\">\n            <Form.Control as=\"select\" onChange={handleDomaineChange}>\n              <option value=\"Informatique\">Informatique</option>\n              <option value=\"Electrique\">Electrique</option>\n              <option value=\"Mécanique\">Mécanique</option>\n              <option value=\"Industriel\">Industriel</option>\n              <option value=\"Réseau et Télecommunications\">\n                Réseau et Télecommunications\n              </option>\n              <option value=\"Economie\">Economie</option>\n              <option value=\"Autre\">Autre</option>\n            </Form.Control>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"bio\" class=\"col-sm-2 col-form-label\">\n            Bio:\n          </label>\n          <br />\n          <textarea\n            className=\"inputs form-control col-sm-12 mt-2\"\n            rows=\"4\"\n            name=\"bio\"\n            id=\"comment\"\n            maxLength=\"800\"\n            placeholder=\"Bio\"\n            style={{\n              backgroundColor: \"#f3f2ef\",\n              resize: \"none\",\n            }}\n            value={bio}\n            onChange={handleBioChange}\n          ></textarea>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"interests\" class=\"col-sm-2 col-form-label\">\n            Interests:\n          </label>\n          <br />\n          <textarea\n            className=\"inputs form-control col-sm-12\"\n            rows=\"4\"\n            name=\"interests\"\n            id=\"comment\"\n            maxLength=\"800\"\n            placeholder=\"What interests you?\"\n            style={{\n              backgroundColor: \"#f3f2ef\",\n              resize: \"none\",\n            }}\n            value={interests}\n            onChange={handleInterestsChange}\n          ></textarea>\n        </div>\n        <Socials />\n        <div className={classes.root + \" btnholder\"}>\n          <Button\n            variant=\"outlined\"\n            onClick={(e) => {\n              handleClick();\n            }}\n          >\n            UPLOAD\n          </Button>\n          <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n            <Alert\n              onClose={handleClose}\n              severity={successful ? \"success\" : \"error\"}\n            >\n              {typeof message == \"string\"\n                ? message\n                : message?.map((message1) => (\n                    <span>\n                      -{message1}\n                      <br />\n                    </span>\n                  ))}\n            </Alert>\n          </Snackbar>\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default About;\n","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/Image.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/SkillForm Children/NormalLanguage.jsx",["586","587","588"],"import React, { useState, useEffect } from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"react-select\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport TextField from '@material-ui/core/TextField';\nimport authHeader from \"../../../../../../services/authHeader\";\nimport axios from \"axios\";\nimport userService from \"../../../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst statusOptions = [\n  { value: \"French\", label: \"French\" },\n  { value: \"English\", label: \"English\" },\n  { value: \"Arabic\", label: \"Arabic\" },\n  { value: \"Spanish\", label: \"Spanish\" },\n  { value: \"Autre\", label: \"Autre\" }\n];\n\nconst marks = [\n  {\n    value: 1,\n    label: \"1\",\n  },\n  {\n    value: 5,\n    label: \"5\",\n  },\n  {\n    value: 10,\n    label: \"10\",\n  },\n];\n\nconst SkillForm = (props) => {\n  //skill comp\n  const [data, setData] = useState();\n  const [successful, setSuccessful] = useState(false);\n  const [name, setName] = useState(\"French\");\n  const [skillValue, setSkillValue] = useState();\n  const [isOther, setIsOther] = useState(false)\n  let selected = [];\n  const [disabled, setDisabled] = useState(false);\n\n  //snackbar\n  const [open, setOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const handleClick = () => {\n    setOpen(true);\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await userService.getNormalLang();\n      setData(result.data);\n      setSuccessful(false);\n      console.log(result);\n    };\n    fetchData();\n  }, [successful]);\n  const handleChange = (e) => {\n    const value = e.target.value\n    setName(value)\n    setDisabled(false)\n  }\n  const upload = () => {\n    const value = skillValue;\n    userService.uploadNormalLang(name, value)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n          setMessage(\"Added\");\n          handleClick();\n          setDisabled(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n  };\n  const deleteById = (id) => {\n    userService.deleteNormalLang(id)\n      .then((response) => {\n        setSuccessful(true);\n        setMessage(\"Deleted!\");\n        handleClick();\n        setSuccessful(false);\n      });\n  };\n\n  const handleClose = (reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const skillPicker = (e) => {\n    if (e.value == \"Autre\") {\n      setIsOther(true)\n    }\n    else {\n      setIsOther(false);\n      setName(e.value);\n      setDisabled(false);\n    }\n  };\n\n  const skValue = (value) => {\n    setSkillValue(value);\n  };\n\n  const singleOption = ({ data }) => (\n    <div className=\"input-select\">\n      <div className=\"input-select__single-value d-flex justify-content-center\">\n        <span style={{ fontSize: \"18px\" }}>&nbsp;{data.label}</span>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"container d-flex flex-row\">\n      <FormControl className=\"col-5\">\n        <div className=\"form\">\n          <div className=\"form-group col-md-10 \">\n            <label>Languages :</label>\n            <Select\n              defaultValue={statusOptions[0]}\n              options={statusOptions}\n              onChange={skillPicker}\n              components={{ SingleValue: singleOption }}\n              isOptionDisabled={(option) =>\n                selected.indexOf(option.value) !== -1\n              }\n            />\n          </div>\n          {isOther &&\n            <div className=\"col-md-10 mb-3\">\n              <TextField id=\"standard-basic\" label=\"Your Other Skill\" required onChange={handleChange} />\n            </div>\n          }\n          <div className=\"col-md-10\">\n            <Typography id=\"discrete-slider\" gutterBottom>\n              Proficiency:\n            </Typography>\n            <Slider\n              defaultValue={5}\n              getAriaValueText={skValue}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={1}\n              marks={marks}\n              min={1}\n              max={10}\n            />\n          </div>\n          <div className=\"row col-md-10 justify-content-around\">\n            <div className=\"col-3\">\n              <Button\n                onClick={upload}\n                variant=\"outlined\"\n                color=\"primary\"\n                size=\"medium\"\n                disabled={disabled}\n                startIcon={\n                  <AddCircleOutlinedIcon\n                    style={{\n                      maxWidth: \"30px\",\n                      maxHeight: \"30px\",\n                      minWidth: \"30px\",\n                      minHeight: \"30px\",\n                    }}\n                  />\n                }\n              >\n                Add\n              </Button>\n            </div>\n          </div>\n        </div>\n      </FormControl>\n      <div className=\"responsive-table flex-fill\">\n        <table class=\"table\">\n          <thead>\n            <th>Skill</th>\n            <th>Proficiency</th>\n            <th>Delete</th>\n          </thead>\n          <tbody>\n            {data?.map((lng) => (\n              <tr className=\"mt-10\">\n                <td>{lng.name}</td>\n                <td>{lng.value}</td>\n                <td>\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\n                    <DeleteIcon\n                      style={{ color: \"#df4759\" }}\n                      className=\"pt-0\"\n                      onClick={() => {\n                        setTimeout(deleteById(lng.id), 500);\n                      }}\n                    />\n                  </IconButton>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\nexport default SkillForm;\n","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/SkillForm Children/Software.jsx",["589","590","591"],"import React, { useState, useEffect } from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"react-select\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\nimport authHeader from \"../../../../../../services/authHeader\";\nimport axios from \"axios\";\nimport TextField from '@material-ui/core/TextField';\nimport userService from \"../../../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst statusOptions = [\n  { value: \"Photoshop\", label: \"Photoshop\", icon: \"fab fa-fonticons\" },\n  { value: \"Git\", label: \"Git\", icon: \"fab fa-git-alt\" },\n  { value: \"Wordpress\", label: \"Wordpress\", icon: \"fab fa-wordpress\" },\n  {\n    value: \"Autre\",\n    label: \"Autre\",\n    icon: \"\",\n  },\n];\n\nconst marks = [\n  {\n    value: 1,\n    label: \"1\",\n  },\n  {\n    value: 5,\n    label: \"5\",\n  },\n  {\n    value: 10,\n    label: \"10\",\n  },\n];\n\nconst SkillForm = (props) => {\n  //skill comp\n  // const classes = useStyles();\n  const [data, setData] = useState();\n  const [successful, setSuccessful] = useState(false);\n  const [name, setName] = useState(\"Photoshop\");\n  const [skillValue, setSkillValue] = useState();\n  const [icon, setIcon] = useState(\"fab fa-fonticons fa-2x\");\n  let selected = [];\n  const [disabled, setDisabled] = useState(false);\n  const [isOther, setIsOther] = useState(false)\n\n  //snackbar\n  const [open, setOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const handleClick = () => {\n    setOpen(true);\n  };\n  const handleChange = (e) => {\n    const value = e.target.value\n    setName(value)\n    setIcon(' ')\n    setDisabled(false)\n  }\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await userService.getSoftware();\n      setData(result.data);\n      setSuccessful(false);\n    };\n    fetchData();\n  }, [successful]);\n  const upload = () => {\n    const value = skillValue;\n    userService.uploadSoftware(name, value, icon)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n          setMessage(\"Added\");\n          handleClick();\n          setDisabled(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n  };\n  const deleteById = (id) => {\n    userService.deleteSoftware(id)\n      .then((response) => {\n        setSuccessful(true);\n        setMessage(\"Deleted!\");\n        handleClick();\n        setSuccessful(false);\n      });\n  };\n\n  const handleClose = (reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const skillPicker = (e) => {\n    if (e.value == \"Autre\") {\n      setIsOther(true);\n    }\n    else {\n      setIsOther(false)\n      setName(e.value);\n      setIcon(e.icon);\n      setDisabled(false);\n    }\n\n  };\n  // const deleteByType = (type) => {\n  //   setSkills(skills.filter((skill) => skill.type !== type));\n  //   setSelected(selected.filter((select) => select !== type));\n  //   setDisabled(!disabled);\n  // };\n  const skValue = (value) => {\n    setSkillValue(value);\n  };\n  const singleOption = ({ data }) => (\n    <div className=\"input-select\">\n      <div className=\"input-select__single-value d-flex justify-content-center\">\n        <i className={data.icon} />\n        &nbsp; &nbsp;\n        <span style={{ fontSize: \"18px\" }}>&nbsp;{data.label}</span>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"container d-flex flex-row\">\n      <FormControl className=\"col-5\">\n        <div className=\"form\">\n          <div className=\"form-group col-md-10 \">\n            <label>Software :</label>\n            <Select\n              defaultValue={statusOptions[0]}\n              options={statusOptions}\n              onChange={skillPicker}\n              components={{ SingleValue: singleOption }}\n              isOptionDisabled={(option) =>\n                selected.indexOf(option.value) !== -1\n              }\n            />\n          </div>\n          {isOther &&\n            <div className=\"col-md-10 mb-3\">\n              <TextField id=\"standard-basic\" label=\"Your Other Skill\" required onChange={handleChange} />\n            </div>\n          }\n          <div className=\"col-md-10\">\n            <Typography id=\"discrete-slider\" gutterBottom>\n              Proficiency:\n            </Typography>\n            <Slider\n              defaultValue={5}\n              getAriaValueText={skValue}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={1}\n              marks={marks}\n              min={1}\n              max={10}\n            />\n          </div>\n          <div className=\"row col-md-10 justify-content-around\">\n            <div className=\"col-3\">\n              <Button\n                onClick={() => {\n                  upload();\n                }}\n                variant=\"outlined\"\n                color=\"primary\"\n                size=\"medium\"\n                disabled={disabled}\n                startIcon={\n                  <AddCircleOutlinedIcon\n                    style={{\n                      maxWidth: \"30px\",\n                      maxHeight: \"30px\",\n                      minWidth: \"30px\",\n                      minHeight: \"30px\",\n                    }}\n                  />\n                }\n              >\n                Add\n              </Button>\n            </div>\n          </div>\n        </div>\n      </FormControl>\n      <div className=\"responsive-table flex-fill\">\n        <table class=\"table\">\n          <thead>\n            <th>Skill / Software</th>\n            <th>Proficiency</th>\n            <th>Delete</th>\n          </thead>\n          <tbody>\n            {data?.map((dev) => (\n              <tr className=\"mt-10\">\n                <td>\n                  <i class={dev.icon} />{\" \"}\n                  <span style={{ fontSize: \"18px\" }}>{dev.name}</span>\n                </td>\n                <td>\n                  <span style={{ fontSize: \"18px\" }}>{dev.value}</span>\n                </td>\n                <td>\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\n                    <DeleteIcon\n                      className=\"pt-0\"\n                      style={{ color: \"#df4759\" }}\n                      onClick={() => {\n                        setTimeout(deleteById(dev.id), 500);\n                      }}\n                    />\n                  </IconButton>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\nexport default SkillForm;\n","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/SkillForm Children/Other.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/SkillForm Children/DevLanguage.jsx",["592","593","594","595"],"import React, { useState, useEffect, initialState } from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Select from \"react-select\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\nimport authHeader from \"../../../../../../services/authHeader\";\nimport axios from \"axios\";\nimport TextField from '@material-ui/core/TextField';\nimport userService from \"../../../../../../services/userService\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst statusOptions = [\n  { value: \"HTML5\", label: \"HTML5\", icon: \"fab fa-html5\" },\n  { value: \"CSS3\", label: \"CSS3\", icon: \"fab fa-css3-alt\" },\n  { value: \"Java\", label: \"Java\", icon: \"fab fa-java\" },\n  { value: \"JavaScript\", label: \"JavaScript\", icon: \"fab fa-js-square\" },\n  { value: \"PHP\", label: \"PHP\", icon: \"fab fa-php\" },\n  { value: \"Laravel\", label: \"Laravel\", icon: \"fab fa-laravel\" },\n  { value: \"Python\", label: \"Python\", icon: \"fab fa-python\" },\n  { value: \"Angular\", label: \"Angular\", icon: \"fab fa-angular\" },\n  { value: \"ReactJS\", label: \"ReactJS\", icon: \"fab fa-react\" },\n  { value: \"Autre\", label: \"Autre\" }\n];\n\nconst marks = [\n  {\n    value: 1,\n    label: \"1\",\n  },\n  {\n    value: 5,\n    label: \"5\",\n  },\n  {\n    value: 10,\n    label: \"10\",\n  },\n];\n\nconst SkillForm = (props) => {\n  const [data, setData] = useState();\n  const [successful, setSuccessful] = useState(false);\n  const [name, setName] = useState(\"HTML5\");\n  const [skillValue, setSkillValue] = useState();\n  const [isOther, setIsOther] = useState(false)\n  const [icon, setIcon] = useState(\"fab fa-html5 fa-2x\");\n  let selected = [];\n  const [disabled, setDisabled] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [flag, setFlag] = useState(initialState);\n  const [id, setId] = useState();\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await userService.getDevLang();\n      setData(result.data);\n      setSuccessful(false);\n      console.log(result);\n    };\n    fetchData();\n    async function getUserData() {\n      await userService.getUserData().then((response) => {\n        setFlag(response?.data?.cv?.flag);\n        setId(response?.data?.id);\n      });\n    }\n    getUserData();\n  }, [successful]);\n\n  const upload = () => {\n    if (!flag) {\n      userService.flagStudent(id)\n    }\n    const value = skillValue;\n    userService.uploadDevLang(name, value, icon)\n      .then(\n        (response) => {\n          setMessage(response.data.message);\n          setSuccessful(true);\n          setMessage(\"Added\");\n          handleClick();\n          setDisabled(true);\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n          setMessage(resMessage);\n          setSuccessful(false);\n        }\n      );\n  };\n  const deleteById = (id) => {\n    userService.deleteDevLang(id).then((response) => {\n      setSuccessful(true);\n      setMessage(\"Deleted!\");\n      handleClick();\n      setSuccessful(false);\n    });\n  };\n  const handleChange = (e) => {\n    const value = e.target.value\n    setName(value)\n    setIcon(' ')\n    setDisabled(false)\n  }\n  const handleClose = (reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const skillPicker = (e) => {\n    if (e.value == \"Autre\") {\n      setIsOther(true);\n    }\n    else {\n      setIsOther(false);\n      setName(e.value);\n      setIcon(e.icon);\n      setDisabled(false);\n    }\n\n  };\n\n  const skValue = (value) => {\n    setSkillValue(value);\n  };\n  const singleOption = ({ data }) => (\n    <div className=\"input-select\">\n      <div className=\"input-select__single-value d-flex justify-content-center\">\n        <i className={data.icon + \" fa-2x\"} />\n        &nbsp; &nbsp;\n        <span style={{ fontSize: \"18px\" }}>&nbsp;{data.label}</span>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"container d-flex flex-row\">\n      <FormControl className=\"col-5\">\n        <div className=\"form\">\n          <div className=\"form-group col-md-10 \">\n            <label>Developing Skills :</label>\n            <Select\n              defaultValue={statusOptions[0]}\n              options={statusOptions}\n              onChange={skillPicker}\n              components={{ SingleValue: singleOption }}\n              isOptionDisabled={(option) =>\n                selected.indexOf(option.value) !== -1\n              }\n            />\n          </div>\n          {isOther &&\n            <div className=\"col-md-10 mb-3\">\n              <TextField id=\"standard-basic\" label=\"Your Other Skill\" required onChange={handleChange} />\n            </div>\n          }\n          <div className=\"col-md-10\">\n            <Typography id=\"discrete-slider\" gutterBottom>\n              Proficiency:\n            </Typography>\n            <Slider\n              defaultValue={5}\n              getAriaValueText={skValue}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={1}\n              marks={marks}\n              min={1}\n              max={10}\n            />\n          </div>\n          <div className=\"row col-md-10 justify-content-around\">\n            <div className=\"col-3\">\n              <Button\n                onClick={() => {\n                  upload();\n                }}\n                variant=\"outlined\"\n                color=\"primary\"\n                size=\"medium\"\n                disabled={disabled}\n                startIcon={\n                  <AddCircleOutlinedIcon\n                    style={{\n                      maxWidth: \"30px\",\n                      maxHeight: \"30px\",\n                      minWidth: \"30px\",\n                      minHeight: \"30px\",\n                    }}\n                  />\n                }\n              >\n                Add\n              </Button>\n            </div>\n          </div>\n        </div>\n      </FormControl>\n      <div className=\"responsive-table flex-fill\">\n        <table class=\"table\">\n          <thead>\n            <th>Language</th>\n            <th>Proficiency</th>\n            <th>Delete</th>\n          </thead>\n          <tbody>\n            {data?.map((dev) => (\n              <tr className=\"mt-10\">\n                <td>\n                  {\n                    dev.icon == ' ' ? (<><i class={`${dev.icon} fa-x`} />{\" \"}</>) : (<><i class={`${dev.icon} fa-2x`} />{\" \"}</>)\n                  }\n                  <span style={{ fontSize: \"18px\" }}>{dev.name}</span>\n                </td>\n                <td>\n                  <span style={{ fontSize: \"18px\" }}>{dev.value}</span>\n                </td>\n                <td>\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\n                    <DeleteIcon\n                      className=\"pt-0\"\n                      style={{ color: \"#df4759\" }}\n                      onClick={() => {\n                        setTimeout(deleteById(dev.id), 500);\n                      }}\n                    />\n                  </IconButton>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          {message}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\nexport default SkillForm;\n","/home/bobhhy/forum-last/src/Components/Profile/SetProfile/SetCv/SetCvChildren/Socials.jsx",["596","597","598","599"],"import React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { MDBContainer, MDBBtn } from \"mdbreact\";\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport userService from \"../../../../../services/userService\";\n\nconst Socials = (props) => {\n  const [id, setId] = useState(\"\");\n  const [toggle, setToggle] = useState(false);\n  const [url, setUrl] = useState(\"\");\n\n  const fbToggler = (e) => {\n    setId(\"Facebook\");\n    if (!toggle) {\n      setToggle(true);\n    } else {\n      if (id == \"Facebook\") {\n        setToggle(false);\n        setId(\"Facebook\");\n      }\n    }\n  };\n\n  const inToggler = (e) => {\n    setId(\"LinkedIn\");\n    if (!toggle) {\n      setToggle(true);\n    } else {\n      if (id == \"LinkedIn\") {\n        setId(\"LinkedIn\");\n        setToggle(false);\n      }\n    }\n  };\n\n  const gitToggler = (e) => {\n    setId(\"GitHub\");\n    if (!toggle) {\n      setToggle(true);\n    } else {\n      if (id == \"GitHub\") {\n        setToggle(false);\n        setId(\"GitHub\");\n      }\n    }\n  };\n\n  const ytToggler = () => {\n    setId(\"YouTube\");\n    if (!toggle) {\n      setToggle(true);\n    } else {\n      if (id == \"YouTube\") {\n        setToggle(false);\n        setId(\"YouTube\");\n      }\n    }\n  };\n\n  const onChangeHandler = (e) => {\n    setUrl(e.target.value);\n  };\n\n  const upload = () => {\n    let ur = url;\n    if(!url.startsWith(\"https://\")){\n        ur = \"https://\" + url\n    }\n    const link = { name: id, url: ur };\n    userService.uploadCvLink(link).then(\n      (res) => {\n        setId(\"\");\n        setUrl(\"\");\n        setToggle(false);\n        console.log(res);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  };\n\n  return (\n    <div>\n      <div class=\"form-group row col-sm-12 align-items-center\">\n        <label class=\"col-sm-2 col-form-label\">Add Socials:</label>\n        <MDBContainer className=\"col-sm-10 flex-row mt-3\">\n          <Tooltip title=\"Lien pour votre profil Facebook\">\n            <MDBBtn\n              size=\"lg\"\n              className=\"col-sm-3 col-4\"\n              social=\"fb\"\n              onClick={fbToggler}\n            >\n              <FacebookIcon />\n            </MDBBtn>\n          </Tooltip>\n          <Tooltip title=\"Lien pour votre profil LinkedIn\">\n            <MDBBtn\n              size=\"lg\"\n              className=\"col-sm-3 col-4\"\n              social=\"li\"\n              onClick={inToggler}\n            >\n              <LinkedInIcon />\n            </MDBBtn>\n          </Tooltip>\n          <Tooltip title=\"Lien pour votre compte GitHub\">\n            <MDBBtn\n              size=\"lg\"\n              className=\"col-sm-3 col-4\"\n              social=\"git\"\n              onClick={gitToggler}\n            >\n              <GitHubIcon />\n            </MDBBtn>\n          </Tooltip>\n          <Tooltip title=\"Lien pour votre CV video\">\n            <MDBBtn\n              size=\"lg\"\n              className=\"col-sm-3 col-4\"\n              social=\"git\"\n              onClick={ytToggler}\n            >\n              <YouTubeIcon />\n            </MDBBtn>\n          </Tooltip>\n        </MDBContainer>\n      </div>\n      {toggle && (\n        <div class=\"form-group\" style={{ display: \"flex\" }}>\n          {id && (\n            <input\n              class=\"form-control col-sm-8\"\n              type=\"text\"\n              placeholder={`Lien ${id}`}\n              style={{ backgroundColor: \"#f3f2ef\" }}\n              id={id}\n              value={url}\n              onChange={onChangeHandler}\n              required\n            />\n          )}\n          <Button\n            variant=\"contained\"\n            color=\"info\"\n            style={{ marginLeft: \"3px\", fontWeight: \"bolder\" }}\n            onClick={() => {\n              upload();\n            }}\n          >\n            Add\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Socials;\n","/home/bobhhy/forum-last/src/Components/Home/Feed/InputOption/InputOption.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/Interest.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/Award.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/Skill.jsx",["600","601","602","603","604"],"import React from \"react\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport \"./Skill.css\";\nimport Box from '@material-ui/core/Box';\nimport Rating, { IconContainerProps } from '@material-ui/lab/Rating';\nimport Typography from '@material-ui/core/Typography';\n\nconst Skill = (props) => {\n  const dev = props.dev;\n  const normal = props.normal;\n  const software = props.software;\n\n  return (\n    <section className=\"resume-section m-0\" id=\"skills\">\n      <div className=\"resume-section-content\">\n        <h2 className=\"mb-5\">Skills</h2>\n        {\n          dev.length!=0 && (<>\n          <div className=\"subheading mb-3\">Programming Languages</div>\n        <div className=\"d-flex flex-row\" style={{ flexWrap: \"wrap\" }}>\n          {dev?.map((e) => (\n            <div className=\"col-2 mr-4 d-block mb-2\">\n              <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                <Typography component=\"legend\" className=\"d-flex align-items-center space-between flex-nowrap justify-content-start\"><i className={e.icon + \" fa-2x\"} /><span className=\"ml-2\">{e.name}</span></Typography>\n                <Rating readOnly name=\"customized-10\" defaultValue={e.value / 2} max={5} />\n              </Box>\n            </div>\n          ))}\n        </div>\n          </>)\n        }\n        {\n          software.length!=0 && (<>\n          <div className=\"subheading mb-3 mt-3\">Softwares and Other Skills</div>\n        <div className=\"d-flex flex-row\" style={{ flexWrap: \"wrap\" }}>\n          {software?.map((e) => (\n            <div className=\"col-2 mr-4 d-block\">\n              <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                <Typography component=\"legend\" className=\"d-flex align-items-center space-between flex-nowrap justify-content-start\"><i className={e.icon + \" fa-2x\"} /><span className=\"ml-2\">{e.name}</span></Typography>\n                <Rating readOnly name=\"customized-10\" defaultValue={e.value / 2} max={5} />\n              </Box>\n            </div>\n          ))}\n        </div>\n          </>)\n        }\n        {\n          normal?.length !=0 &&\n          (<>\n          <div className=\"subheading mb-3 mt-3\">Languages</div>\n        <div className=\"d-flex flex-row\" style={{ flexWrap: \"wrap\" }}>\n          {normal?.map((e) => (\n            <div className=\"col-5 mr-4 d-block\">\n              <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                <Typography component=\"legend\">{e.name}</Typography>\n                <Rating readOnly name=\"customized-10\" defaultValue={e.value} max={10} />\n              </Box>\n            </div>\n          ))}\n        </div>\n          </>)\n        }\n        \n        \n      </div>\n    </section >\n  );\n};\nexport default Skill;\n","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/Experience.jsx",["605","606"],"import React from \"react\";\nimport \"./Experience.css\";\nconst Experience = (props) => {\n  const data = props.data;\n  return (\n    <>\n      <section className=\"resume-section\" id=\"experience\">\n        <div className=\"resume-section-content\">\n          <h2 className=\"mb-5\">\n            Experiences Professionnelles et Projets\n            universitaires/professionnels\n          </h2>\n          {data\n            ?.filter((e) => !e?.isProject)\n            ?.map((experience) => (\n              <div className=\"d-flex flex-column flex-md-row justify-content-between mb-5\">\n                <div className=\"flex-grow-1\">\n                  <h3 className=\"mb-0\">{experience?.occupation}</h3>\n                  <div className=\"subheading mb-3\">{experience?.company}</div>\n                  <p>{experience?.description}</p>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <span className=\"text-primary\">\n                    {experience?.dateStart?.split(\" \")[0] +\n                      \" \" +\n                      experience?.dateStart?.split(\" \")[2]}{\" \"}\n                    -{\" \"}\n                    {experience?.dateEnd == \"Present\"\n                      ? experience?.dateEnd\n                      : experience?.dateEnd?.split(\" \")[0] +\n                        \" \" +\n                        experience?.dateEnd?.split(\" \")[2]}\n                  </span>\n                </div>\n              </div>\n            ))}\n          {data\n            ?.filter((e) => e?.isProject)\n            ?.map((experience) => (\n              <div className=\"d-flex flex-column flex-md-row justify-content-between mb-5\">\n                <div className=\"flex-grow-1\">\n                  <h3 className=\"mb-0\">{experience?.occupation}</h3>\n                  <p>{experience?.description}</p>\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <span className=\"text-primary\">\n                    {experience?.dateStart?.split(\" \")[0] +\n                      \" \" +\n                      experience?.dateStart?.split(\" \")[2]}{\" \"}\n                    -{\" \"}\n                    {experience?.dateEnd == \"Present\"\n                      ? experience?.dateEnd\n                      : experience?.dateEnd?.split(\" \")[0] +\n                        \" \" +\n                        experience?.dateEnd?.split(\" \")[2]}\n                  </span>\n                </div>\n              </div>\n            ))}\n        </div>\n      </section>\n    </>\n  );\n};\nexport default Experience;\n","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/About.jsx",["607","608","609","610","611","612","613"],"import React, { useState, useEffect } from \"react\";\nimport userService from \"../../../../services/userService\";\nimport \"./About.css\";\n\nconst About = (props) => {\n  const etablishment = props?.data?.etablishment?.name;\n  const data = props?.data?.cv?.about;\n  const email = props.email;\n\n  const Fb = () => {\n    for (let i = 0; i < props?.data?.cv?.links?.length; i++) {\n      if (props?.data?.cv?.links[i]?.name == \"Facebook\") {\n        return (\n          <a\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            className=\"social-icon\"\n            href={`${props?.data?.cv?.links[i]?.url}`}\n          >\n            <i className=\"fab fa-facebook-f\" />\n          </a>\n        );\n      }\n    }\n    return <></>;\n  };\n  const Ln = () => {\n    for (let i = 0; i < props?.data?.cv?.links?.length; i++) {\n      if (props?.data?.cv?.links[i]?.name == \"LinkedIn\") {\n        return (\n          <a\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            className=\"social-icon\"\n            href={`${props?.data?.cv?.links[i]?.url}`}\n          >\n            <i className=\"fab fa-linkedin-in\" />\n          </a>\n        );\n      }\n    }\n    return <></>;\n  };\n  const Git = () => {\n    for (let i = 0; i < props?.data?.cv?.links?.length; i++) {\n      if (props?.data?.cv?.links[i]?.name == \"GitHub\") {\n        return (\n          <a\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            className=\"social-icon\"\n            href={`${props?.data?.cv?.links[i]?.url}`}\n          >\n            <i className=\"fab fa-github\" />\n          </a>\n        );\n      }\n    }\n    return <></>;\n  };\n  const Yt = () => {\n    for (let i = 0; i < props?.data?.cv?.links?.length; i++) {\n      if (props?.data?.cv?.links[i]?.name == \"YouTube\") {\n        return (\n          <a\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            className=\"social-icon\"\n            href={`${props?.data?.cv?.links[i]?.url}`}\n          >\n            <i class=\"fab fa-youtube\"></i>\n          </a>\n        );\n      }\n    }\n    return <></>;\n  };\n\n  return (\n    <section className=\"resume-section\" id=\"about\">\n      <div className=\"resume-section-content\">\n        <h1 className=\"mb-0\">\n          {data?.firstName}\n          <span className=\"text-primary\">\n            &nbsp;\n            {data?.lastName}\n          </span>\n        </h1>\n        <div className=\"subheading mb-5\">\n          {data?.address + \"· \" + data?.city + \"· \" + data?.number + \"· \"}\n          <span className=\"text-primary\">{email}</span>\n        </div>\n        {/* <p className=\" mb-3\">\n          Domaine d'étude:{\" \"}\n          {data?.domaine[0].toUpperCase() +\n            data?.domaine.slice(1, data?.domaine.length)}\n        </p> */}\n        <p className=\"p-3 h5 text-primary\">{etablishment}.</p>\n\n        <p className=\"lead mb-5\">{data?.bio}</p>\n        <div className=\"social-icons d-flex\">\n          <Fb />\n          <Git />\n          <Ln />\n          <Yt />\n        </div>\n      </div>\n    </section>\n  );\n};\nexport default About;\n","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/Education.jsx",["614"],"import React from \"react\";\nconst Education = (props) => {\n  const data = props.data;\n\n  return (\n    <section className=\"resume-section mt-0\" id=\"education\">\n      <div className=\"resume-section-content\">\n        <h2 className=\"mb-5\">Education</h2>\n        {data?.map((educ, index) => (\n          <div className=\"d-flex flex-column flex-md-row justify-content-between mb-5\">\n            <div className=\"flex-grow-1\">\n              <h3 className=\"mb-0\">{educ?.school}</h3>\n              <div className=\"subheading mb-3\">{educ?.diploma}</div>\n              <div>{educ?.field}</div>\n            </div>\n            <div className=\"flex-shrink-0\">\n              <span className=\"text-primary\">\n                {educ?.dateStart?.split(\" \")[0] +\n                  \" \" +\n                  educ?.dateStart?.split(\" \")[2]}{\" \"}\n                -{\" \"}\n                {educ?.dateEnd == \"Present\" ? educ?.dateEnd : educ?.dateEnd?.split(\" \")[0] +\n                  \" \" +\n                  educ?.dateEnd?.split(\" \")[2]}\n              </span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n};\nexport default Education;\n","/home/bobhhy/forum-last/src/Components/Profile/js/cv.js",[],"/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/company/Nav.jsx",[],"/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/company/About.jsx",["615","616","617"],"import React from \"react\";\n\nconst About = (props) => {\n  const data = props?.data?.aboutCompany;\n  const email = props?.email;\n\n  \nconst Fb = () => {\n    for (let i = 0; i < props?.data?.links?.length; i++) {\n      if (props?.data?.links[i]?.name == \"Facebook\") {\n        return (\n          <a\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            className=\"social-icon\"\n            href={`${props?.data?.links[i]?.url}`}\n          >\n            <i className=\"fab fa-facebook-f\" />\n          </a>\n        );\n      }\n    }\n    return <></>;\n  };\n  const Ln = () => {\n    for (let i = 0; i < props?.data?.links?.length; i++) {\n      if (props?.data?.links[i]?.name == \"LinkedIn\") {\n        return (\n          <a\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            className=\"social-icon\"\n            href={`${props?.data?.links[i]?.url}`}\n          >\n            <i className=\"fab fa-linkedin-in\" />\n          </a>\n        );\n      }\n    }\n    return <></>;\n  };\nconst Web = () => {\n    for (let i = 0; i < props?.data?.links?.length; i++) {\n      if (props?.data?.links[i]?.name == \"Website\") {\n        return (\n          <a\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            className=\"social-icon\"\n            href={`${props?.data?.links[i]?.url}`}\n          >\n            <i className=\"fas fa-globe\" />\n          </a>\n        );\n      }\n    }\n    return <></>;\n  };\n\n  return (\n    <section className=\"resume-section\" id=\"about\">\n      <div className=\"resume-section-content\">\n        <h1 className=\"mb-0\">\n          <span className=\"text-primary\">\n            &nbsp;\n            {data?.name}\n          </span>\n        </h1>\n        <div className=\"lead mb-5\">\n          Address : {data?.address}&nbsp;\n          <span style={{ color: \"brown\", fontWeight: \"bolder\" }}>\n            {data?.city}\n          </span>\n          <br />\n          Email : {email} <br />\n          Phone : {data?.number} <br />\n        </div>\n        <h4>Company Bio :</h4>\n        <p className=\"lead mb-5\">{data?.bio}</p>\n        <div className=\"social-icons d-flex\">\n          <Fb />\n          <Web />\n          <Ln />\n        </div>\n      </div>\n    </section>\n  );\n};\nexport default About;\n","/home/bobhhy/forum-last/src/Components/Home/Feed/Post/Comments/Comment/Comment.jsx",["618","619","620","621","622","623","624"],"import React, { useState, useEffect, initialState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Comment.scss\";\nimport Button from \"@material-ui/core/Button\";\nimport ThumbUpOutlinedIcon from \"@material-ui/icons/ThumbUpOutlined\";\nimport { Avatar } from \"@material-ui/core\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\nimport userService from \"../../../../../../services/userService\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport axios from \"axios\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport authHeader from \"../../../../../../services/authHeader\";\nimport { set } from \"date-fns\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  small: {\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n  },\n  large: {\n    marginRight: \"10px\",\n  },\n  paper: {\n    position: \"absolute\",\n    width: \"70vw\",\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function Comment({\n  ownerImage,\n  onChange,\n  refresh,\n  user,\n  message,\n  commentId,\n  timestamp,\n  firstName,\n  lastName,\n  role,\n  ownerId,\n  likes,\n  currentUserId,\n}) {\n  const [image, setImage] = useState(\"\");\n  const [input, setInput] = useState(message);\n  const classes = useStyles();\n\n  const [modalStyle] = useState(getModalStyle);\n  const [open, setOpen] = useState(false);\n\n  const [successful, setSuccessful] = useState(true);\n  const [updateMessage, setUpdateMessage] = useState(\"\");\n  const [toggleLike, setToggleLike] = useState(false);\n  const [shownLikes, setShownLikes] = useState(likes?.length);\n  const [hh, setHh] = useState(false);\n\n  const [snackOpen, setSnackOpen] = useState(false);\n  const handleSnackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const deleteById = (id) => {\n    userService.deleteComment(id).then(\n      (response) => {\n        onChange(true);\n        onChange(false);\n        setHh(!hh);\n        setUpdateMessage(\"Comment deleted!\");\n        setSuccessful(true);\n        setSnackOpen(true);\n      },\n      (error) => {\n        setUpdateMessage(\"Couldn't delete comment!\");\n        setSuccessful(false);\n        setSnackOpen(true);\n      }\n    );\n  };\n\n  const updateComment = (id) => {\n    const errors = [];\n    if (input.length === 0) errors.push(\"Comment cannot be empty.\\n\");\n    if (errors.length !== 0) {\n      setUpdateMessage(errors);\n      setSuccessful(false);\n      setSnackOpen(true);\n      return 0;\n    }\n    const comment = {\n      message: input,\n      role: user?.roles[0]?.id,\n    };\n    if (user?.roles[0]?.id === 1) {\n      userService.updateStudentComment(id, comment).then(\n        (response) => {\n          onChange(!refresh);\n          setSuccessful(true);\n          setSnackOpen(true);\n          setInput(\"\");\n          setUpdateMessage(\"Comment updated successfully!\");\n          setOpen(false);\n        },\n        (error) => {\n          setUpdateMessage(\"Couldn't update comment!\");\n          setSuccessful(false);\n          setSnackOpen(true);\n        }\n      );\n    } else if (user?.roles[0]?.id === 3) {\n      userService.updateCompanyComment(id, comment).then(\n        (response) => {\n          onChange(!refresh);\n          setSuccessful(true);\n          setSnackOpen(true);\n          setInput(\"\");\n          setUpdateMessage(\"Comment updated successfully!\");\n          setOpen(false);\n        },\n        (error) => {\n          setUpdateMessage(\"Couldn't update comment!\");\n          setSuccessful(false);\n          setSnackOpen(true);\n        }\n      );\n    }\n  };\n\n  const likeComment = (commentId) => {\n    userService.likeComment(commentId, user?.id).then(\n      (response) => {\n        setToggleLike(!toggleLike);\n        setShownLikes(shownLikes + 1);\n        // onChange(true);\n        // onChange(false);\n      },\n      (error) => {\n        setSuccessful(false);\n        setUpdateMessage(\"Couldn't like post!\");\n        setSnackOpen(true);\n      }\n    );\n  };\n  const unlikeComment = (commentId) => {\n    userService.unlikeComment(commentId).then(\n      (response) => {\n        setToggleLike(!toggleLike);\n        // onChange(true);\n        // onChange(false);\n        setShownLikes(shownLikes - 1);\n      },\n      (error) => {\n        setSuccessful(false);\n        setUpdateMessage(\"Couldn't unlike comment\");\n        setSnackOpen(true);\n      }\n    );\n  };\n\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <h2 id=\"simple-modal-title\">Edit your Post</h2>\n      <p id=\"simple-modal-description\">\n        <textarea\n          className=\"inputs form-control col-sm-12 mt-2\"\n          rows=\"4\"\n          maxLength=\"1000\"\n          placeholder=\"Editing Comment\"\n          style={{\n            backgroundColor: \"#f3f2ef\",\n            resize: \"none\",\n          }}\n          defaultValue={message}\n          onChange={(e) => setInput(e.target.value)}\n        ></textarea>\n        <Button\n          color=\"primary\"\n          onClick={() => {\n            updateComment(commentId);\n          }}\n        >\n          Update\n        </Button>\n      </p>\n      {/* <SimpleModal /> */}\n    </div>\n  );\n\n  useEffect(() => {\n    const checkLiked = async () => {\n      for await (let e of likes) {\n        if (user?.id == e.likerId) {\n          setToggleLike(true);\n          break;\n        }\n      }\n    };\n    checkLiked();\n  }, []);\n\n  useEffect(() => {\n    async function getImageById() {\n      if (role === 1)\n        await userService.getImageById(ownerId).then((response) => {\n          setImage(`data:image/png;base64,${response?.data}`);\n        });\n      else if (role === 3)\n        await userService.getCompanyImageById(ownerId).then((response) => {\n          setImage(`data:image/png;base64,${response?.data}`);\n        });\n    }\n    getImageById();\n  }, []);\n\n  return (\n    <>\n      <div className=\"comment\">\n        <Modal\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          {body}\n        </Modal>\n        <Link to={`/view/${ownerId}`} style={{ textDecoration: \"none\" }}>\n          {role === 1 && (\n            <Avatar\n              src={image}\n              className={classes.large}\n            />\n          )}\n          {role === 3 && (\n            <Avatar\n              src={image}\n              variant=\"square\"\n              className={classes.large}\n            />\n          )}\n        </Link>\n        <div>\n          <div className=\"user-name\">\n            {role === 1 && firstName + \" \" + lastName}\n            {role === 3 &&\n              firstName\n                .split(\" \")\n                .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\n                .join(\" \") +\n                \" - \" +\n                lastName}\n          </div>\n          <p className=\"comment-timestamp\">{timestamp}</p>\n          <span className=\"message\">{message}</span>\n          <div className=\"comment-actions\">\n            <Tooltip title=\"Like\">\n              <IconButton\n                aria-label=\"edit\"\n                onClick={() => setToggleLike(!toggleLike)}\n              >\n                {!toggleLike && (\n                  <ThumbUpOutlinedIcon onClick={() => likeComment(commentId)} />\n                )}\n                {toggleLike && (\n                  <ThumbUpIcon\n                    color=\"primary\"\n                    onClick={() => unlikeComment(commentId)}\n                  />\n                )}\n              </IconButton>\n            </Tooltip>\n            <span style={{ fontSize: \"12px\" }}>{shownLikes}</span>\n            {currentUserId === ownerId && (\n              <>\n                <Tooltip title=\"Edit\">\n                  <IconButton aria-label=\"edit\" onClick={handleOpen}>\n                    <EditTwoToneIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Delete\">\n                  <IconButton\n                    aria-label=\"delete\"\n                    onClick={() => {\n                      deleteById(commentId);\n                    }}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </Tooltip>\n              </>\n            )}\n          </div>\n        </div>\n        <Snackbar\n          open={snackOpen}\n          autoHideDuration={1500}\n          onClose={handleSnackClose}\n        >\n          <Alert\n            onClose={handleClose}\n            severity={successful ? \"success\" : \"error\"}\n          >\n            {updateMessage}\n          </Alert>\n        </Snackbar>\n      </div>\n    </>\n  );\n}\n","/home/bobhhy/forum-last/src/Components/Profile/ShownProfile/cv/Navbar.jsx",[],"/home/bobhhy/forum-last/src/Components/Home/Feed/Feed.jsx",["625","626","627","628","629","630","631","632","633","634","635","636"],"import React, { useState, useEffect, initialState, useRef } from \"react\";\nimport \"./Feed.css\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport InputOption from \"./InputOption/InputOption\";\nimport PhotoIcon from \"@material-ui/icons/Photo\";\nimport PostAddIcon from \"@material-ui/icons/PostAdd\";\nimport Post from \"./Post/Post\";\nimport axios from \"axios\";\nimport authHeader from \"../../../services/authHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Shimmer from \"react-shimmer-effect\";\nimport userService from \"../../../services/userService\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Loader from \"react-loader-spinner\";\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n  button: {\n    border: \"none\",\n    outline: \"none\",\n  },\n  container: {\n    border: \"0px solid rgba(255, 255, 255, 1)\",\n    boxShadow: \"0px 0px 20px rgba(0, 0, 0, .1)\",\n    borderRadius: \"4px\",\n    backgroundColor: \"white\",\n    display: \"flex\",\n    padding: \"16px\",\n    width: \"100%\",\n    marginBottom: \"20px\",\n  },\n  circle: {\n    height: \"56px\",\n    width: \"56px\",\n    borderRadius: \"50%\",\n  },\n  line: {\n    width: \"15%\",\n    height: \"8px\",\n    alignSelf: \"center\",\n    marginLeft: \"16px\",\n    borderRadius: \"8px\",\n  },\n  longline: {\n    width: \"60%\",\n    height: \"8px\",\n    alignSelf: \"center\",\n    marginLeft: \"16px\",\n    borderRadius: \"8px\",\n  },\n  break: {\n    flexBasis: \"100%\",\n    width: \"0px\",\n    height: \"0px\",\n    overflow: \"hidden\",\n  },\n  content: {\n    width: \"100%\",\n    height: \"8px\",\n    alignSelf: \"center\",\n    marginLeft: \"16px\",\n    borderRadius: \"8px\",\n  },\n}));\n\nconst postsPerPage = 10;\nlet arrayForHoldingPosts = [];\n\nfunction Feed(props) {\n  const [input, setInput] = useState(\"\");\n  const [posts, setPosts] = useState([]);\n  const [res, setRes] = useState([]);\n  const user = props?.user;\n  const image = props?.image;\n\n  const [message, setMessage] = useState(initialState);\n  const [successful, setSuccessful] = useState(initialState);\n  const [refresh, setRefresh] = useState(false);\n  //const [loaded, setLoaded] = useState(false); // bash toggle shimmer\n\n  //if < 10 posts makibansh l button\n  const [toggleLoadMore, setToggleLoadMore] = useState(false);\n\n  const [childLoaderRefresh, setChildLoaderRefresh] = useState(false);\n\n  const [postsToShow, setPostsToShow] = useState([]);\n  const [count, setCount] = useState(1);\n\n  const [loading, setLoading] = useState(false);\n\n  //start img\n\n  const fileInputRef = useRef(null);\n  const uploadRef = useRef(null);\n  const [newImage, setNewImage] = useState(null);\n  const [fileType, setFileType] = useState(initialState);\n  const [fileContent, setFileContent] = useState([]);\n\n  const onChange = (e) => {\n    setFileContent(e.target.files[0]);\n    setFileType(e.target.files[0].type.split(\"/\")[1]);\n    // if (e.target.files && e.target.files[0]) {\n    //   let img = e.target.files[0];\n    //   setNewImage(URL.createObjectURL(img));\n    // }\n    setNewImage(URL.createObjectURL(e.target.files[0]));\n  };\n  const fileUpload = async (imageNameCounter) => {\n    const url = userService.uploadImageUrl;\n    const formData = new FormData();\n    const myRenamedFile = new File(\n      [fileContent],\n      \"post\" + imageNameCounter + \".\" + fileType\n    );\n    formData.append(\"file\", myRenamedFile);\n    const config = {\n      headers: {\n        Authorization: `Bearer ${authHeader()}`,\n        \"content-type\": \"multipart/form-data\",\n      },\n    };\n    return axios.post(url, formData, config);\n  };\n  const handleClick = (e) => {\n    fileUpload();\n  };\n  const triggerInputFile = () => {\n    fileInputRef.current.click();\n  };\n  const clearImage = () => {\n    setFileContent(null);\n    setFileType(null);\n    setNewImage(null);\n  };\n\n  const loadingSpinner = async () => {\n    setLoading(true);\n    setRefresh(!refresh);\n    clearImage();\n    setTimeout(() => {\n      setLoading(false);\n    }, 1500);\n    window.scrollTo(0, 0);\n  };\n\n  // fin img\n\n  //traitement showing posts\n  const loopThroughPosts = (count) => {\n    for (\n      let i = count * postsPerPage - postsPerPage;\n      i < postsPerPage * count;\n      i++\n    ) {\n      if (posts[i] !== undefined) {\n        arrayForHoldingPosts.push(posts[i]);\n      }\n    }\n    setPostsToShow(arrayForHoldingPosts);\n  };\n  useEffect(() => {\n    setCount((prevCount) => prevCount + 1);\n    loopThroughPosts(count);\n  }, []);\n\n  const handleShowMorePosts = () => {\n    setCount((prevCount) => prevCount + 1);\n    loopThroughPosts(count);\n  };\n\n  //snackbar\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpen(false);\n  };\n\n  const handleKeyDown = (e) => {\n    const keyCode = e.which || e.keyCode;\n    if (keyCode === 13 && !e.shiftKey) {\n      e.preventDefault();\n      uploadPost();\n    }\n  };\n\n  useEffect(() => {\n    const getPosts = async () => {\n      let result;\n      if (user?.roles[0]?.id == 1) {\n        result = await userService.getNonPrivatePosts();\n      } else {\n        result = await userService.getPosts();\n      }\n      setRes(result?.data);\n      setTimeout(() => {\n        // setLoaded(true);\n        if (result?.data?.length > 10) {\n          setToggleLoadMore(true);\n        }\n      }, 500);\n\n      arrayForHoldingPosts = result?.data?.slice(0, 10);\n      setPostsToShow(res?.slice(0, 10));\n    };\n    getPosts();\n  }, [refresh]);\n\n  useEffect(() => {\n    setPosts(res);\n    setPostsToShow(res?.slice(0, 10));\n  }, [res]);\n\n  useEffect(() => {\n    loadingSpinner();\n  }, [childLoaderRefresh, props?.refreshHome]);\n\n  const uploadPost = () => {\n    const errors = [];\n    if (input.length === 0) errors.push(\"Message cannot be empty.\\n\");\n    if (errors.length !== 0) {\n      setMessage(errors);\n      setSuccessful(false);\n      setOpen(true);\n      return 0;\n    }\n    let post = {\n      message: input,\n      role: user?.roles[0]?.id,\n      domaine: user?.cv?.about?.domaine,\n    };\n    if (newImage) {\n      post.imageType = fileType;\n    }\n\n    if (user?.roles[0]?.id === 1) {\n      userService.uploadStudentPost(post).then(\n        (response) => {\n          if (newImage) {\n            fileUpload(response?.data);\n          }\n          setSuccessful(true);\n          setMessage(\"Message uploaded!\");\n          setOpen(true);\n          loadingSpinner();\n          // window.location.reload();\n          setInput(\"\");\n        },\n        (error) => {\n          setSuccessful(false);\n          setMessage(\"Couldn't upload message\");\n          setOpen(true);\n        }\n      );\n    } else if (user?.roles[0]?.id === 3) {\n      userService.uploadCompanyPost(post).then(\n        (response) => {\n          if (newImage) {\n            fileUpload(response?.data);\n          }\n          setSuccessful(true);\n          setMessage(\"Message uploaded!\");\n          setOpen(true);\n          loadingSpinner();\n          // window.location.reload();\n          setInput(\"\");\n        },\n        (error) => {\n          setSuccessful(false);\n          setMessage(\"Couldn't upload message\");\n          setOpen(true);\n        }\n      );\n    }\n  };\n\n  return (\n    <div className=\"feed\">\n      {loading && (\n        <Loader\n          type=\"Oval\"\n          // color=\"rgb(63, 63, 63)\"\n          color=\"#6573c3\"\n          height={30}\n          width={30}\n          timeout={1500}\n          className=\"loading_spinner\"\n        />\n      )}\n      {!loading && (\n        <div className=\"feed\">\n          <div className=\"feed_inputContainer\">\n            <div className=\"feed_input\">\n              <CreateIcon />\n              <form>\n                <input\n                  type=\"text\"\n                  value={input}\n                  onChange={(e) => setInput(e.target.value)}\n                  style={{ cursor: \"text\", fontSize: \"18px\" }}\n                  placeholder=\"What do you want to talk about?\"\n                  onKeyDown={handleKeyDown}\n                />\n              </form>\n            </div>\n            {newImage && (\n              <div>\n                <img\n                  className=\"mx-auto d-block rounded border border-dark\"\n                  src={newImage}\n                  style={{\n                    maxHeight: \"90%\",\n                    maxWidth: \"90%\",\n                    margin: \"10px 10px\",\n                  }}\n                  alt=\"a\"\n                />\n              </div>\n            )}\n            <div className=\"feed_inputOptions\">\n              <InputOption\n                Icon={PhotoIcon}\n                title=\"Photo\"\n                color=\"#7085F9\"\n                onClick={triggerInputFile}\n              />\n              <div class=\"form-group mb-2 d-none\">\n                <label for=\"file-upload\" className=\"btn btn-outline-dark mt-2 \">\n                  <i class=\"fas fa-upload\"></i>Choose File\n                </label>\n                <input\n                  type=\"file\"\n                  id=\"file-upload\"\n                  className=\"d-none\"\n                  accept=\".jpeg,.png,.jpg,.tif,.svg,.jfif\"\n                  ref={fileInputRef}\n                  onChange={onChange}\n                />\n                <Button\n                  className=\"MuiButton-sizeSmall MuiButton-textPrimary mt-2\"\n                  variant=\"outlined\"\n                  ref={uploadRef}\n                  onClick={(e) => {\n                    handleClick(e);\n                  }}\n                >\n                  UPLOAD\n                </Button>\n              </div>\n              {newImage && (\n                <IconButton\n                  aria-label=\"delete\"\n                  className={classes.margin}\n                  onClick={clearImage}\n                >\n                  <CloseIcon backgroundColor=\"gray\" fontSize=\"large\" />\n                </IconButton>\n              )}\n              <InputOption\n                Icon={PostAddIcon}\n                title=\"Post\"\n                color=\"green\"\n                onClick={uploadPost}\n              />\n            </div>\n          </div>\n          <div className=\"feed_PostContainer\">\n            {/* {!loaded && ( // shimmer part\n              <>\n                <div className={classes.container}>\n                  <Shimmer>\n                    <div className={classes.circle} />\n                    <div className={classes.line} />\n                    <div className={classes.longline} />\n                  </Shimmer>\n                </div>\n                <div className={classes.container}>\n                  <Shimmer>\n                    <div className={classes.circle} />\n                    <div className={classes.line} />\n                    <div className={classes.longline} />\n                  </Shimmer>\n                </div>\n                <div className={classes.container}>\n                  <Shimmer>\n                    <div className={classes.circle} />\n                    <div className={classes.line} />\n                    <div className={classes.longline} />\n                  </Shimmer>\n                </div>\n                <div className={classes.container}>\n                  <Shimmer>\n                    <div className={classes.circle} />\n                    <div className={classes.line} />\n                    <div className={classes.longline} />\n                  </Shimmer>\n                </div>\n                <div className={classes.container}>\n                  <Shimmer>\n                    <div className={classes.circle} />\n                    <div className={classes.line} />\n                    <div className={classes.longline} />\n                  </Shimmer>\n                </div>\n                <div className={classes.container}>\n                  <Shimmer>\n                    <div className={classes.circle} />\n                    <div className={classes.line} />\n                    <div className={classes.longline} />\n                  </Shimmer>\n                </div>\n                <div className={classes.container}>\n                  <Shimmer>\n                    <div className={classes.circle} />\n                    <div className={classes.line} />\n                  </Shimmer>\n                </div>\n              </>\n            )} */}\n            {/* {loaded && */}\n            {postsToShow?.map((e, key) => (\n              <Post\n                key={key}\n                user={user}\n                postId={e?.id}\n                message={e?.message}\n                timestamp={e?.updatedAt.substring(0, 10)}\n                username={e?.ownerUsername}\n                name={e?.ownerName}\n                role={e?.role}\n                ownerId={e?.ownersId}\n                refresh={refresh}\n                currentUserId={user?.id}\n                ownerImage={image}\n                imageType={e?.imageType}\n                onChange={(value) => setChildLoaderRefresh(value)}\n              />\n            ))}\n          </div>\n          {toggleLoadMore && postsToShow.length != res.length && (\n            <Button\n              size=\"small\"\n              variant=\"contained\"\n              onClick={handleShowMorePosts}\n            >\n              Load more\n            </Button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Feed;\n","/home/bobhhy/forum-last/src/Components/Header/Search/Search.jsx",[],"/home/bobhhy/forum-last/src/Components/Header/HeaderOption/DropdowMenu/DropdownMenu.jsx",[],"/home/bobhhy/forum-last/src/Components/Header/Search/SearchMenu/SearchMenu.jsx",[],"/home/bobhhy/forum-last/src/Components/Home/Feed/Post/Post.jsx",["637","638","639","640","641","642","643"],"import { Avatar } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nimport React, { useEffect, useState, initialState, useRef } from \"react\";\nimport \"./Post.scss\";\nimport PublicIcon from \"@material-ui/icons/Public\";\nimport InputOption from \"../InputOption/InputOption\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\nimport CommentIcon from \"@material-ui/icons/Comment\";\nimport userService from \"../../../../services/userService\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Modal from \"@material-ui/core/Modal\";\nimport axios from \"axios\";\nimport DeleteTwoToneIcon from \"@material-ui/icons/DeleteTwoTone\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport authHeader from \"../../../../services/authHeader\";\nimport Comment from \"./Comments/Comment/Comment\";\nimport \"./Comments/AddComment/AddComment.scss\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport ThumbUpAltOutlinedIcon from \"@material-ui/icons/ThumbUpAltOutlined\";\nimport ModalB from \"react-bootstrap/Modal\";\nimport ModalImage from \"react-modal-image\";\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\nimport SendIcon from \"@material-ui/icons/Send\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  small: {\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n  },\n  large: {\n    width: theme.spacing(7),\n    height: theme.spacing(7),\n  },\n  paper: {\n    position: \"absolute\",\n    width: \"70vw\",\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction Post({\n  user,\n  postId,\n  message,\n  timestamp,\n  ownerId,\n  role,\n  username,\n  currentUserId,\n  ownerImage,\n  imageType,\n  onChange,\n}) {\n  const [input, setInput] = useState(message);\n  const [owner, setOwner] = useState();\n  const [commentInput, setCommentInput] = useState(\"\");\n  const classes = useStyles();\n  const [comments, setComments] = useState([]);\n\n  const [successful, setSuccessful] = useState(true);\n  const [uploadMessage, setUploadMessage] = useState(\"\");\n\n  const [refresh, setRefresh] = useState(false);\n  const [toggleComment, setToggleComment] = useState(false);\n\n  const [modalStyle] = useState(getModalStyle);\n  const [open, setOpen] = useState(false);\n\n  const [toggleLike, setToggleLike] = useState(false);\n  const [shownLikes, setShownLikes] = useState(initialState);\n  const [likes, setLikes] = useState(initialState);\n  const [snackOpen, setSnackOpen] = useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n\n  const handleSnackClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setSnackOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  // useEffect(() => {\n  //   const getPosts = async () => {\n  //     const result = await axios.get(\"http://localhost:5000/api/cv/getPosts\");\n  //     setRes(result?.data);\n  //     arrayForHoldingPosts = result?.data?.slice(0, 10);\n  //     setPostsToShow(res?.slice(0, 10));\n  //   };\n  //   getPosts();\n  // }, [refresh]);\n\n  useEffect(() => {\n    userService.getUserById(ownerId).then((response) => {\n      setOwner(response?.data);\n    });\n    async function bzaf() {\n      const result = await userService.getLikesByPost(postId);\n      setLikes(result?.data);\n      setShownLikes(result?.data?.length);\n      setRefresh(true);\n      for (let i = 0; i < result?.data?.length; i++) {\n        if (user?.id === result?.data[i]?.likerId) {\n          setToggleLike(true);\n          break;\n        }\n      }\n    }\n    bzaf();\n    userService.getPostComments(postId).then((response) => {\n      setComments(response?.data);\n      setToggleComment(!toggleComment);\n    });\n    setToggleComment(!toggleComment); //problem here\n  }, [refresh]);\n\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <h2 id=\"simple-modal-title\">Edit your Post</h2>\n      <p id=\"simple-modal-description\">\n        <textarea\n          className=\"inputs form-control col-sm-12 mt-2\"\n          rows=\"4\"\n          maxLength=\"1000\"\n          placeholder=\"Post\"\n          style={{\n            backgroundColor: \"#f3f2ef\",\n            resize: \"none\",\n          }}\n          defaultValue={input}\n          onChange={(e) => setInput(e.target.value)}\n        ></textarea>\n        <Button\n          color=\"primary\"\n          onClick={() => {\n            updatePost(postId);\n          }}\n        >\n          Update\n        </Button>\n      </p>\n      {/* <SimpleModal /> */}\n    </div>\n  );\n\n  //modalconst [modalShow, setModalShow] = useState(false);\n\n  // useEffect(() => {\n  //   async function getImageById() {\n  //     if (role === 1)\n  //       await userService.getImageById(ownerId).then((response) => {\n  //         setImaage(`data:image/png;base64,${response?.data}`);\n  //       });\n  //     else if (role === 3)\n  //       await userService.getCompanyImageById(ownerId).then((response) => {\n  //         setImaage(`data:image/png;base64,${response?.data}`);\n  //       });\n  //   }\n  //   getImageById();\n  // }, []);\n\n  function MyVerticallyCenteredModal(props) {\n    return (\n      <ModalB\n        {...props}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        dialogClassName=\"image_modal\"\n      >\n        <ModalB.Body className=\"image_modal_body\">\n          <img\n            className=\"post_image\"\n            onClick={() => setModalShow(true)}\n            src={userService.imageLink + postId + \".\" + imageType}\n          />\n        </ModalB.Body>\n      </ModalB>\n    );\n  }\n  const deleteById = (id) => {\n    userService.deletePostById(id).then((res) => {\n      // window.location.reload();\n      onChange(true);\n      onChange(false);\n    });\n  };\n\n  const updatePost = (id) => {\n    const post = {\n      message: input,\n      role: user?.roles[0]?.id,\n    };\n    if (user?.roles[0]?.id === 1) {\n      userService.updateStudentPost(id, post).then(\n        (response) => {\n          setSuccessful(true);\n          setSnackOpen(true);\n          setUploadMessage(\"Post Updated!\");\n          onChange(true);\n          onChange(false);\n          setOpen(false);\n        },\n        (error) => {\n          setSuccessful(false);\n          setSnackOpen(true);\n          setUploadMessage(\"Could not update post!\");\n        }\n      );\n    } else if (user?.roles[0]?.id === 3) {\n      userService.updateCompanyPost(id, post).then(\n        (response) => {\n          setSuccessful(true);\n          setSnackOpen(true);\n          setUploadMessage(\"Post Updated!\");\n          onChange(true);\n          onChange(false);\n          setOpen(false);\n        },\n        (error) => {\n          setSuccessful(false);\n          setSnackOpen(true);\n          setUploadMessage(\"Could not update post!\");\n        }\n      );\n    }\n  };\n\n  const uploadComment = () => {\n    const errors = [];\n    if (commentInput.length === 0) errors.push(\"Comment cannot be empty.\\n\");\n    if (errors.length !== 0) {\n      setUploadMessage(errors);\n      setSuccessful(false);\n      setSnackOpen(true);\n      return 0;\n    }\n\n    if (user?.roles[0]?.id === 1) {\n      let comment = {\n        message: commentInput,\n        role: 1,\n      };\n      userService.uploadStudentComment(postId, comment).then(\n        (response) => {\n          setRefresh(!refresh);\n          setSnackOpen(true);\n          setSuccessful(true);\n          setCommentInput(\"\");\n          setUploadMessage(\"Comment uploaded!\");\n        },\n        (error) => {\n          setSuccessful(false);\n          setSnackOpen(true);\n          setUploadMessage(\"Could not upload comment!\");\n        }\n      );\n    } else if (user?.roles[0]?.id === 3) {\n      let comment = {\n        message: commentInput,\n        role: 3,\n      };\n      console.log(comment);\n      userService.uploadCompanyComment(postId, comment).then((response) => {\n        // window.location.reload();\n        setRefresh(!refresh);\n        setSnackOpen(true);\n        setSuccessful(true);\n        setCommentInput(\"\");\n        setUploadMessage(\"Message uploaded!\");\n      });\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    const keyCode = e.which || e.keyCode;\n    if (keyCode === 13 && !e.shiftKey) {\n      e.preventDefault();\n      uploadComment(postId);\n    }\n  };\n\n  const likePost = (postId) => {\n    userService.likePost(postId, user?.id).then(\n      (response) => {\n        setToggleLike(true);\n        setShownLikes(shownLikes + 1);\n        // onChange(true);\n        // onChange(false);\n      },\n      (error) => {\n        setSuccessful(false);\n        setUploadMessage(\"Couldn't like post!\");\n        setSnackOpen(true);\n      }\n    );\n  };\n  const unlikePost = (postId) => {\n    userService.unlikePost(postId).then(\n      (response) => {\n        setShownLikes(shownLikes - 1);\n        setToggleLike(false);\n      },\n      (error) => {\n        setSuccessful(false);\n        setUploadMessage(\"404 Couldn't unlike post!\");\n        setSnackOpen(true);\n      }\n    );\n  };\n\n  return (\n    // <div className=\"post_and_comment\">\n    <div className=\"post\">\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        {body}\n      </Modal>\n\n      <div className=\"post_header\">\n        <Link to={`/view/${ownerId}`} style={{ textDecoration: \"none\" }}>\n          {role === 1 && (\n            <Avatar\n              src={userService.imageLink + owner?.cv?.image}\n              className={classes.large}\n            />\n          )}\n          {role === 3 && (\n            <Avatar\n              variant=\"square\"\n              src={userService.imageLink + owner?.company?.companyImage}\n              className={classes.large}\n            />\n          )}\n          {/* <Avatar src={imaage} className={classes.large} /> */}\n        </Link>\n        <div className=\"post_info\">\n          <h2 style={{ display: \"flex\" }}>\n            {role === 1 &&\n              owner?.cv?.about?.firstName + \" \" + owner?.cv?.about?.lastName}\n            {role === 3 && owner?.company?.aboutCompany?.name}\n          </h2>\n          <p>{`@${username}  - ${role === 1 ? \"Student\" : \"Enterprise\"}`}</p>\n          <span></span>\n          <div className=\"post_date\">\n            <h6 style={{ color: \"#000\" }}>{timestamp} &nbsp;</h6>\n            <PublicIcon className=\"global\" style={{ color: \"#000\" }} />\n          </div>\n        </div>\n      </div>\n\n      <MyVerticallyCenteredModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n      <div className=\"post_body\">\n        <div className=\"post_message\">{message}</div>\n\n        {imageType && (\n          <ModalImage\n            className=\"post_image\"\n            small={userService.imageLink + \"post\" + postId + \".\" + imageType}\n            large={userService.imageLink + \"post\" + postId + \".\" + imageType}\n            alt=\"\"\n          />\n        )}\n      </div>\n      <div className=\"post_stats\">\n        <p style={{ fontSize: \"13px\" }}>\n          {shownLikes} likes&nbsp;&nbsp;-&nbsp;&nbsp;\n          {comments?.length} comments\n        </p>\n      </div>\n      <div className=\"post_buttons\">\n        {toggleLike && (\n          <InputOption\n            Icon={ThumbUpIcon}\n            title=\"Like\"\n            color=\"blue\"\n            onClick={() => unlikePost(postId)}\n          />\n        )}{\" \"}\n        {/* dislike */}\n        {!toggleLike && (\n          <InputOption\n            Icon={ThumbUpAltOutlinedIcon}\n            title=\"Like\"\n            color=\"blue\"\n            onClick={() => likePost(postId)}\n          />\n        )}\n        {/* like */}\n        <InputOption\n          Icon={CommentIcon}\n          title=\"Comment\"\n          color=\"green\"\n          onClick={() => setToggleComment(!toggleComment)}\n        />\n        {/* {currentUserId !== ownerId && (\n            <InputOption Icon={ShareIcon} title=\"Share\" color=\"purple\" />\n          )} */}\n        {currentUserId === ownerId && (\n          <>\n            <InputOption\n              Icon={EditTwoToneIcon}\n              title=\"Edit\"\n              color=\"purple\"\n              onClick={handleOpen}\n            />\n            <InputOption\n              Icon={DeleteTwoToneIcon}\n              title=\"Delete\"\n              color=\"red\"\n              onClick={() => {\n                deleteById(postId);\n              }}\n            />\n          </>\n        )}\n      </div>\n\n      {toggleComment && (\n        <>\n          {comments.length !== 0 && (\n            <div className=\"comments-header\">\n              <h4>Comments</h4>\n            </div>\n          )}\n          <div className=\"add-comment\">\n            <Avatar\n              src={\n                role === 1\n                  ? userService.imageLink + ownerImage\n                  : userService.imageLink + ownerImage\n              }\n              className={classes.large}\n            />\n            <textarea\n              rows=\"2\"\n              className=\"add-text-area\"\n              placeholder=\"Add a comment\"\n              value={commentInput}\n              onChange={(e) => setCommentInput(e.target.value)}\n              onKeyDown={handleKeyDown}\n            />\n\n            {/* <input\n            type=\"text\"\n            // rows=\"4\"\n            className=\"add-text-area\"\n            placeholder=\"Add a comment\"\n            value={commentInput}\n            onChange={(e) => setCommentInput(e.target.value)}\n            onKeyDown={handleKeyDown}\n          /> */}\n          </div>\n          {commentInput && (\n            <Button\n              color=\"blue\"\n              variant=\"contained\"\n              className=\"toggleCommentButton\"\n              style={{ marginBottom: \"10px\" }}\n              onClick={() => uploadComment(postId)}\n            >\n              Publier {<SendIcon />}\n            </Button>\n          )}\n        </>\n      )}\n      {toggleComment &&\n        comments?.map((e, key) => (\n          <Comment\n            ownerImage={ownerImage}\n            key={key}\n            onChange={() => {\n              setRefresh(!refresh);\n            }}\n            refresh={refresh}\n            user={user}\n            commentId={e?.id}\n            message={e?.message}\n            timestamp={e?.updatedAt.substring(0, 10)}\n            username={e?.ownerUsername}\n            firstName={e?.ownerFirstName}\n            lastName={e?.ownerLastName}\n            companyName={e?.companyName}\n            role={e?.role}\n            ownerId={e?.ownersId}\n            currentUserId={user?.id}\n            likes={e?.likes}\n            onChange={(value) => setRefresh(value)}\n          />\n        ))}\n      <Snackbar\n        open={snackOpen}\n        autoHideDuration={1500}\n        onClose={handleSnackClose}\n      >\n        <Alert\n          onClose={handleClose}\n          severity={successful ? \"success\" : \"error\"}\n        >\n          {uploadMessage}\n        </Alert>\n      </Snackbar>\n      {toggleComment && (\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n          }}\n        >\n          <Button\n            color=\"default\"\n            variant=\"outlined\"\n            className=\"toggleCommentButton\"\n            onClick={() => setToggleComment(!toggleComment)}\n          >\n            {<ExpandLessIcon />} Close\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Post;\n","/home/bobhhy/forum-last/src/Components/Header/Search/SearchMenu/ProfileInfo/ProfileInfo.jsx",["644"],"import React from \"react\";\nimport \"./ProfileInfo.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction ProfileInfo({ id, name, company, role, image }) {\n  const history = useHistory();\n  const handleClick = () => {\n    history.push(\"/view/\" + id);\n    window.location.reload();\n  };\n  function capitalizeTheFirstLetterOfEachWord(words) {\n    var separateWord = words?.toLowerCase().split(\" \");\n    for (var i = 0; i < separateWord?.length; i++) {\n      separateWord[i] =\n        separateWord[i]?.charAt(0).toUpperCase() +\n        separateWord[i]?.substring(1);\n    }\n    return separateWord?.join(\" \");\n  }\n\n  return (\n    <div className=\"profile_info\" onClick={handleClick}>\n      {role == 1 ? (\n        <Avatar className=\"image\" src={image} />\n      ) : (\n        <Avatar className=\"image square\" src={image} />\n      )}\n\n      {role === 1 && (\n        <h5>\n          {capitalizeTheFirstLetterOfEachWord(name)} - <span>Etudiant</span>\n        </h5>\n      )}\n      {role === 3 && (\n        <h5>\n          {capitalizeTheFirstLetterOfEachWord(company)} -{\" \"}\n          <span>Entreprise</span>\n        </h5>\n      )}\n    </div>\n  );\n}\n\nexport default ProfileInfo;\n",{"ruleId":"645","replacedBy":"646"},{"ruleId":"647","replacedBy":"648"},{"ruleId":"649","severity":1,"message":"650","line":18,"column":8,"nodeType":"651","messageId":"652","endLine":18,"endColumn":18},{"ruleId":"653","severity":1,"message":"654","line":98,"column":62,"nodeType":"655","messageId":"656","endLine":98,"endColumn":64},{"ruleId":"653","severity":1,"message":"654","line":98,"column":122,"nodeType":"655","messageId":"656","endLine":98,"endColumn":124},{"ruleId":"649","severity":1,"message":"657","line":2,"column":8,"nodeType":"651","messageId":"652","endLine":2,"endColumn":14},{"ruleId":"649","severity":1,"message":"658","line":11,"column":8,"nodeType":"651","messageId":"652","endLine":11,"endColumn":24},{"ruleId":"649","severity":1,"message":"659","line":14,"column":3,"nodeType":"651","messageId":"652","endLine":14,"endColumn":9},{"ruleId":"653","severity":1,"message":"654","line":24,"column":37,"nodeType":"655","messageId":"656","endLine":24,"endColumn":39},{"ruleId":"660","severity":1,"message":"661","line":23,"column":6,"nodeType":"662","endLine":23,"endColumn":8,"suggestions":"663"},{"ruleId":"649","severity":1,"message":"664","line":1,"column":27,"nodeType":"651","messageId":"652","endLine":1,"endColumn":36},{"ruleId":"649","severity":1,"message":"665","line":26,"column":8,"nodeType":"651","messageId":"652","endLine":26,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":27,"column":8,"nodeType":"651","messageId":"652","endLine":27,"endColumn":18},{"ruleId":"649","severity":1,"message":"666","line":28,"column":8,"nodeType":"651","messageId":"652","endLine":28,"endColumn":14},{"ruleId":"649","severity":1,"message":"667","line":35,"column":8,"nodeType":"651","messageId":"652","endLine":35,"endColumn":19},{"ruleId":"649","severity":1,"message":"668","line":129,"column":10,"nodeType":"651","messageId":"652","endLine":129,"endColumn":14},{"ruleId":"649","severity":1,"message":"669","line":129,"column":16,"nodeType":"651","messageId":"652","endLine":129,"endColumn":23},{"ruleId":"649","severity":1,"message":"670","line":131,"column":20,"nodeType":"651","messageId":"652","endLine":131,"endColumn":31},{"ruleId":"649","severity":1,"message":"671","line":147,"column":9,"nodeType":"651","messageId":"652","endLine":147,"endColumn":25},{"ruleId":"649","severity":1,"message":"664","line":1,"column":17,"nodeType":"651","messageId":"652","endLine":1,"endColumn":26},{"ruleId":"649","severity":1,"message":"672","line":8,"column":11,"nodeType":"651","messageId":"652","endLine":8,"endColumn":18},{"ruleId":"653","severity":1,"message":"654","line":31,"column":90,"nodeType":"655","messageId":"656","endLine":31,"endColumn":92},{"ruleId":"660","severity":1,"message":"673","line":45,"column":8,"nodeType":"662","endLine":45,"endColumn":10,"suggestions":"674"},{"ruleId":"675","severity":1,"message":"676","line":526,"column":3,"nodeType":"677","messageId":"656","endLine":526,"endColumn":20},{"ruleId":"649","severity":1,"message":"678","line":36,"column":9,"nodeType":"651","messageId":"652","endLine":36,"endColumn":21},{"ruleId":"649","severity":1,"message":"657","line":2,"column":8,"nodeType":"651","messageId":"652","endLine":2,"endColumn":14},{"ruleId":"649","severity":1,"message":"658","line":11,"column":8,"nodeType":"651","messageId":"652","endLine":11,"endColumn":24},{"ruleId":"660","severity":1,"message":"679","line":105,"column":6,"nodeType":"662","endLine":105,"endColumn":8,"suggestions":"680"},{"ruleId":"653","severity":1,"message":"654","line":155,"column":22,"nodeType":"655","messageId":"656","endLine":155,"endColumn":24},{"ruleId":"653","severity":1,"message":"654","line":188,"column":22,"nodeType":"655","messageId":"656","endLine":188,"endColumn":24},{"ruleId":"649","severity":1,"message":"681","line":93,"column":13,"nodeType":"651","messageId":"652","endLine":93,"endColumn":17},{"ruleId":"653","severity":1,"message":"654","line":144,"column":40,"nodeType":"655","messageId":"656","endLine":144,"endColumn":42},{"ruleId":"653","severity":1,"message":"654","line":153,"column":38,"nodeType":"655","messageId":"656","endLine":153,"endColumn":40},{"ruleId":"653","severity":1,"message":"682","line":166,"column":23,"nodeType":"655","messageId":"656","endLine":166,"endColumn":25},{"ruleId":"653","severity":1,"message":"654","line":167,"column":25,"nodeType":"655","messageId":"656","endLine":167,"endColumn":27},{"ruleId":"653","severity":1,"message":"654","line":168,"column":13,"nodeType":"655","messageId":"656","endLine":168,"endColumn":15},{"ruleId":"653","severity":1,"message":"682","line":174,"column":23,"nodeType":"655","messageId":"656","endLine":174,"endColumn":25},{"ruleId":"660","severity":1,"message":"683","line":180,"column":6,"nodeType":"662","endLine":180,"endColumn":43,"suggestions":"684"},{"ruleId":"653","severity":1,"message":"654","line":420,"column":34,"nodeType":"655","messageId":"656","endLine":420,"endColumn":36},{"ruleId":"653","severity":1,"message":"682","line":519,"column":32,"nodeType":"655","messageId":"656","endLine":519,"endColumn":34},{"ruleId":"653","severity":1,"message":"654","line":521,"column":33,"nodeType":"655","messageId":"656","endLine":521,"endColumn":35},{"ruleId":"653","severity":1,"message":"682","line":522,"column":26,"nodeType":"655","messageId":"656","endLine":522,"endColumn":28},{"ruleId":"653","severity":1,"message":"654","line":559,"column":30,"nodeType":"655","messageId":"656","endLine":559,"endColumn":32},{"ruleId":"649","severity":1,"message":"685","line":2,"column":8,"nodeType":"651","messageId":"652","endLine":2,"endColumn":12},{"ruleId":"649","severity":1,"message":"665","line":10,"column":8,"nodeType":"651","messageId":"652","endLine":10,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":11,"column":8,"nodeType":"651","messageId":"652","endLine":11,"endColumn":18},{"ruleId":"649","severity":1,"message":"686","line":14,"column":10,"nodeType":"651","messageId":"652","endLine":14,"endColumn":15},{"ruleId":"649","severity":1,"message":"687","line":19,"column":10,"nodeType":"651","messageId":"652","endLine":19,"endColumn":24},{"ruleId":"649","severity":1,"message":"688","line":31,"column":9,"nodeType":"651","messageId":"652","endLine":31,"endColumn":16},{"ruleId":"653","severity":1,"message":"682","line":72,"column":27,"nodeType":"655","messageId":"656","endLine":72,"endColumn":29},{"ruleId":"649","severity":1,"message":"689","line":18,"column":8,"nodeType":"651","messageId":"652","endLine":18,"endColumn":17},{"ruleId":"649","severity":1,"message":"687","line":36,"column":10,"nodeType":"651","messageId":"652","endLine":36,"endColumn":24},{"ruleId":"649","severity":1,"message":"690","line":105,"column":17,"nodeType":"651","messageId":"652","endLine":105,"endColumn":25},{"ruleId":"653","severity":1,"message":"682","line":238,"column":36,"nodeType":"655","messageId":"656","endLine":238,"endColumn":38},{"ruleId":"649","severity":1,"message":"665","line":13,"column":8,"nodeType":"651","messageId":"652","endLine":13,"endColumn":13},{"ruleId":"649","severity":1,"message":"691","line":1,"column":18,"nodeType":"651","messageId":"652","endLine":1,"endColumn":24},{"ruleId":"649","severity":1,"message":"665","line":13,"column":8,"nodeType":"651","messageId":"652","endLine":13,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":16,"column":8,"nodeType":"651","messageId":"652","endLine":16,"endColumn":18},{"ruleId":"649","severity":1,"message":"692","line":35,"column":10,"nodeType":"651","messageId":"652","endLine":35,"endColumn":15},{"ruleId":"649","severity":1,"message":"693","line":77,"column":10,"nodeType":"651","messageId":"652","endLine":77,"endColumn":19},{"ruleId":"649","severity":1,"message":"694","line":89,"column":10,"nodeType":"651","messageId":"652","endLine":89,"endColumn":15},{"ruleId":"653","severity":1,"message":"654","line":122,"column":22,"nodeType":"655","messageId":"656","endLine":122,"endColumn":24},{"ruleId":"660","severity":1,"message":"695","line":160,"column":6,"nodeType":"662","endLine":160,"endColumn":22,"suggestions":"696"},{"ruleId":"653","severity":1,"message":"654","line":418,"column":26,"nodeType":"655","messageId":"656","endLine":418,"endColumn":28},{"ruleId":"697","severity":1,"message":"698","line":453,"column":17,"nodeType":"699","messageId":"700","endLine":453,"endColumn":56},{"ruleId":"649","severity":1,"message":"685","line":2,"column":8,"nodeType":"651","messageId":"652","endLine":2,"endColumn":12},{"ruleId":"649","severity":1,"message":"665","line":10,"column":8,"nodeType":"651","messageId":"652","endLine":10,"endColumn":13},{"ruleId":"649","severity":1,"message":"701","line":15,"column":7,"nodeType":"651","messageId":"652","endLine":15,"endColumn":16},{"ruleId":"702","severity":1,"message":"703","line":21,"column":19,"nodeType":"704","endLine":21,"endColumn":30},{"ruleId":"702","severity":1,"message":"703","line":24,"column":19,"nodeType":"704","endLine":24,"endColumn":30},{"ruleId":"702","severity":1,"message":"703","line":46,"column":21,"nodeType":"704","endLine":46,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":47,"column":21,"nodeType":"704","endLine":47,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":48,"column":21,"nodeType":"704","endLine":48,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":49,"column":21,"nodeType":"704","endLine":49,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":50,"column":21,"nodeType":"704","endLine":50,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":58,"column":15,"nodeType":"704","endLine":58,"endColumn":26},{"ruleId":"702","severity":1,"message":"703","line":59,"column":15,"nodeType":"704","endLine":59,"endColumn":26},{"ruleId":"702","severity":1,"message":"703","line":65,"column":27,"nodeType":"704","endLine":65,"endColumn":39},{"ruleId":"660","severity":1,"message":"705","line":103,"column":30,"nodeType":"651","endLine":103,"endColumn":37},{"ruleId":"706","severity":1,"message":"707","line":121,"column":21,"nodeType":"704","messageId":"708","endLine":121,"endColumn":198,"fix":"709"},{"ruleId":"697","severity":1,"message":"698","line":159,"column":49,"nodeType":"699","messageId":"700","endLine":159,"endColumn":60},{"ruleId":"710","severity":1,"message":"711","line":217,"column":17,"nodeType":"704","endLine":217,"endColumn":175},{"ruleId":"702","severity":1,"message":"703","line":243,"column":48,"nodeType":"704","endLine":243,"endColumn":59},{"ruleId":"702","severity":1,"message":"703","line":273,"column":48,"nodeType":"704","endLine":273,"endColumn":59},{"ruleId":"653","severity":1,"message":"654","line":42,"column":18,"nodeType":"655","messageId":"656","endLine":42,"endColumn":20},{"ruleId":"653","severity":1,"message":"654","line":47,"column":24,"nodeType":"655","messageId":"656","endLine":47,"endColumn":26},{"ruleId":"653","severity":1,"message":"654","line":52,"column":22,"nodeType":"655","messageId":"656","endLine":52,"endColumn":24},{"ruleId":"653","severity":1,"message":"654","line":57,"column":26,"nodeType":"655","messageId":"656","endLine":57,"endColumn":28},{"ruleId":"702","severity":1,"message":"703","line":35,"column":21,"nodeType":"704","endLine":35,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":36,"column":21,"nodeType":"704","endLine":36,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":37,"column":21,"nodeType":"704","endLine":37,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":38,"column":21,"nodeType":"704","endLine":38,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":52,"column":21,"nodeType":"704","endLine":52,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":53,"column":21,"nodeType":"704","endLine":53,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":54,"column":21,"nodeType":"704","endLine":54,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":55,"column":21,"nodeType":"704","endLine":55,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":71,"column":21,"nodeType":"704","endLine":71,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":72,"column":21,"nodeType":"704","endLine":72,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":73,"column":21,"nodeType":"704","endLine":73,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":74,"column":21,"nodeType":"704","endLine":74,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":88,"column":21,"nodeType":"704","endLine":88,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":89,"column":21,"nodeType":"704","endLine":89,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":90,"column":21,"nodeType":"704","endLine":90,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":91,"column":21,"nodeType":"704","endLine":91,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":105,"column":21,"nodeType":"704","endLine":105,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":106,"column":21,"nodeType":"704","endLine":106,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":107,"column":21,"nodeType":"704","endLine":107,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":108,"column":21,"nodeType":"704","endLine":108,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":121,"column":21,"nodeType":"704","endLine":121,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":122,"column":21,"nodeType":"704","endLine":122,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":123,"column":21,"nodeType":"704","endLine":123,"endColumn":32},{"ruleId":"702","severity":1,"message":"703","line":124,"column":21,"nodeType":"704","endLine":124,"endColumn":32},{"ruleId":"660","severity":1,"message":"712","line":15,"column":8,"nodeType":"662","endLine":15,"endColumn":18,"suggestions":"713"},{"ruleId":"653","severity":1,"message":"654","line":18,"column":77,"nodeType":"655","messageId":"656","endLine":18,"endColumn":79},{"ruleId":"649","severity":1,"message":"657","line":1,"column":10,"nodeType":"651","messageId":"652","endLine":1,"endColumn":16},{"ruleId":"649","severity":1,"message":"714","line":10,"column":10,"nodeType":"651","messageId":"652","endLine":10,"endColumn":44},{"ruleId":"653","severity":1,"message":"654","line":23,"column":55,"nodeType":"655","messageId":"656","endLine":23,"endColumn":57},{"ruleId":"653","severity":1,"message":"654","line":33,"column":34,"nodeType":"655","messageId":"656","endLine":33,"endColumn":36},{"ruleId":"653","severity":1,"message":"654","line":38,"column":47,"nodeType":"655","messageId":"656","endLine":38,"endColumn":49},{"ruleId":"660","severity":1,"message":"715","line":51,"column":6,"nodeType":"662","endLine":51,"endColumn":8,"suggestions":"716"},{"ruleId":"653","severity":1,"message":"682","line":64,"column":24,"nodeType":"655","messageId":"656","endLine":64,"endColumn":26},{"ruleId":"653","severity":1,"message":"654","line":94,"column":27,"nodeType":"655","messageId":"656","endLine":94,"endColumn":29},{"ruleId":"653","severity":1,"message":"682","line":94,"column":64,"nodeType":"655","messageId":"656","endLine":94,"endColumn":66},{"ruleId":"653","severity":1,"message":"654","line":101,"column":57,"nodeType":"655","messageId":"656","endLine":101,"endColumn":59},{"ruleId":"653","severity":1,"message":"682","line":106,"column":26,"nodeType":"655","messageId":"656","endLine":106,"endColumn":28},{"ruleId":"653","severity":1,"message":"654","line":137,"column":27,"nodeType":"655","messageId":"656","endLine":137,"endColumn":29},{"ruleId":"653","severity":1,"message":"682","line":137,"column":63,"nodeType":"655","messageId":"656","endLine":137,"endColumn":65},{"ruleId":"653","severity":1,"message":"654","line":145,"column":45,"nodeType":"655","messageId":"656","endLine":145,"endColumn":47},{"ruleId":"653","severity":1,"message":"682","line":150,"column":26,"nodeType":"655","messageId":"656","endLine":150,"endColumn":28},{"ruleId":"653","severity":1,"message":"682","line":186,"column":24,"nodeType":"655","messageId":"656","endLine":186,"endColumn":26},{"ruleId":"649","severity":1,"message":"717","line":26,"column":12,"nodeType":"651","messageId":"652","endLine":26,"endColumn":20},{"ruleId":"660","severity":1,"message":"718","line":64,"column":8,"nodeType":"662","endLine":64,"endColumn":36,"suggestions":"719"},{"ruleId":"649","severity":1,"message":"720","line":96,"column":11,"nodeType":"651","messageId":"652","endLine":96,"endColumn":32},{"ruleId":"653","severity":1,"message":"682","line":200,"column":35,"nodeType":"655","messageId":"656","endLine":200,"endColumn":37},{"ruleId":"653","severity":1,"message":"654","line":201,"column":53,"nodeType":"655","messageId":"656","endLine":201,"endColumn":55},{"ruleId":"649","severity":1,"message":"721","line":13,"column":8,"nodeType":"651","messageId":"652","endLine":13,"endColumn":21},{"ruleId":"649","severity":1,"message":"681","line":30,"column":19,"nodeType":"651","messageId":"652","endLine":30,"endColumn":23},{"ruleId":"653","severity":1,"message":"654","line":39,"column":19,"nodeType":"655","messageId":"656","endLine":39,"endColumn":21},{"ruleId":"649","severity":1,"message":"681","line":52,"column":19,"nodeType":"651","messageId":"652","endLine":52,"endColumn":23},{"ruleId":"649","severity":1,"message":"681","line":64,"column":19,"nodeType":"651","messageId":"652","endLine":64,"endColumn":23},{"ruleId":"649","severity":1,"message":"664","line":2,"column":17,"nodeType":"651","messageId":"652","endLine":2,"endColumn":26},{"ruleId":"649","severity":1,"message":"665","line":9,"column":8,"nodeType":"651","messageId":"652","endLine":9,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":12,"column":8,"nodeType":"651","messageId":"652","endLine":12,"endColumn":18},{"ruleId":"649","severity":1,"message":"665","line":13,"column":8,"nodeType":"651","messageId":"652","endLine":13,"endColumn":13},{"ruleId":"649","severity":1,"message":"665","line":11,"column":8,"nodeType":"651","messageId":"652","endLine":11,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":12,"column":8,"nodeType":"651","messageId":"652","endLine":12,"endColumn":18},{"ruleId":"649","severity":1,"message":"650","line":12,"column":8,"nodeType":"651","messageId":"652","endLine":12,"endColumn":18},{"ruleId":"649","severity":1,"message":"665","line":13,"column":8,"nodeType":"651","messageId":"652","endLine":13,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":12,"column":8,"nodeType":"651","messageId":"652","endLine":12,"endColumn":18},{"ruleId":"649","severity":1,"message":"665","line":13,"column":8,"nodeType":"651","messageId":"652","endLine":13,"endColumn":13},{"ruleId":"649","severity":1,"message":"665","line":16,"column":8,"nodeType":"651","messageId":"652","endLine":16,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":17,"column":8,"nodeType":"651","messageId":"652","endLine":17,"endColumn":18},{"ruleId":"649","severity":1,"message":"665","line":16,"column":8,"nodeType":"651","messageId":"652","endLine":16,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":17,"column":8,"nodeType":"651","messageId":"652","endLine":17,"endColumn":18},{"ruleId":"649","severity":1,"message":"722","line":46,"column":10,"nodeType":"651","messageId":"652","endLine":46,"endColumn":20},{"ruleId":"649","severity":1,"message":"723","line":47,"column":10,"nodeType":"651","messageId":"652","endLine":47,"endColumn":17},{"ruleId":"649","severity":1,"message":"685","line":10,"column":10,"nodeType":"651","messageId":"652","endLine":10,"endColumn":14},{"ruleId":"649","severity":1,"message":"664","line":1,"column":17,"nodeType":"651","messageId":"652","endLine":1,"endColumn":26},{"ruleId":"649","severity":1,"message":"724","line":6,"column":8,"nodeType":"651","messageId":"652","endLine":6,"endColumn":18},{"ruleId":"649","severity":1,"message":"725","line":7,"column":8,"nodeType":"651","messageId":"652","endLine":7,"endColumn":19},{"ruleId":"653","severity":1,"message":"654","line":22,"column":14,"nodeType":"655","messageId":"656","endLine":22,"endColumn":16},{"ruleId":"653","severity":1,"message":"654","line":34,"column":14,"nodeType":"655","messageId":"656","endLine":34,"endColumn":16},{"ruleId":"653","severity":1,"message":"654","line":46,"column":14,"nodeType":"655","messageId":"656","endLine":46,"endColumn":16},{"ruleId":"649","severity":1,"message":"672","line":7,"column":9,"nodeType":"651","messageId":"652","endLine":7,"endColumn":16},{"ruleId":"653","severity":1,"message":"654","line":22,"column":13,"nodeType":"655","messageId":"656","endLine":22,"endColumn":15},{"ruleId":"653","severity":1,"message":"654","line":20,"column":14,"nodeType":"655","messageId":"656","endLine":20,"endColumn":16},{"ruleId":"653","severity":1,"message":"654","line":32,"column":14,"nodeType":"655","messageId":"656","endLine":32,"endColumn":16},{"ruleId":"653","severity":1,"message":"654","line":44,"column":14,"nodeType":"655","messageId":"656","endLine":44,"endColumn":16},{"ruleId":"653","severity":1,"message":"654","line":56,"column":14,"nodeType":"655","messageId":"656","endLine":56,"endColumn":16},{"ruleId":"649","severity":1,"message":"665","line":10,"column":8,"nodeType":"651","messageId":"652","endLine":10,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":11,"column":8,"nodeType":"651","messageId":"652","endLine":11,"endColumn":18},{"ruleId":"649","severity":1,"message":"665","line":11,"column":8,"nodeType":"651","messageId":"652","endLine":11,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":12,"column":8,"nodeType":"651","messageId":"652","endLine":12,"endColumn":18},{"ruleId":"660","severity":1,"message":"726","line":75,"column":6,"nodeType":"662","endLine":75,"endColumn":18,"suggestions":"727"},{"ruleId":"649","severity":1,"message":"665","line":18,"column":8,"nodeType":"651","messageId":"652","endLine":18,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":19,"column":8,"nodeType":"651","messageId":"652","endLine":19,"endColumn":18},{"ruleId":"653","severity":1,"message":"682","line":91,"column":30,"nodeType":"655","messageId":"656","endLine":91,"endColumn":32},{"ruleId":"660","severity":1,"message":"726","line":97,"column":6,"nodeType":"662","endLine":97,"endColumn":18,"suggestions":"728"},{"ruleId":"660","severity":1,"message":"726","line":96,"column":6,"nodeType":"662","endLine":96,"endColumn":18,"suggestions":"729"},{"ruleId":"649","severity":1,"message":"730","line":71,"column":10,"nodeType":"651","messageId":"652","endLine":71,"endColumn":20},{"ruleId":"649","severity":1,"message":"650","line":13,"column":8,"nodeType":"651","messageId":"652","endLine":13,"endColumn":18},{"ruleId":"649","severity":1,"message":"665","line":14,"column":8,"nodeType":"651","messageId":"652","endLine":14,"endColumn":13},{"ruleId":"653","severity":1,"message":"654","line":115,"column":17,"nodeType":"655","messageId":"656","endLine":115,"endColumn":19},{"ruleId":"649","severity":1,"message":"650","line":12,"column":8,"nodeType":"651","messageId":"652","endLine":12,"endColumn":18},{"ruleId":"649","severity":1,"message":"665","line":13,"column":8,"nodeType":"651","messageId":"652","endLine":13,"endColumn":13},{"ruleId":"653","severity":1,"message":"654","line":120,"column":17,"nodeType":"655","messageId":"656","endLine":120,"endColumn":19},{"ruleId":"649","severity":1,"message":"650","line":12,"column":8,"nodeType":"651","messageId":"652","endLine":12,"endColumn":18},{"ruleId":"649","severity":1,"message":"665","line":13,"column":8,"nodeType":"651","messageId":"652","endLine":13,"endColumn":13},{"ruleId":"653","severity":1,"message":"654","line":132,"column":17,"nodeType":"655","messageId":"656","endLine":132,"endColumn":19},{"ruleId":"653","severity":1,"message":"654","line":232,"column":30,"nodeType":"655","messageId":"656","endLine":232,"endColumn":32},{"ruleId":"653","severity":1,"message":"654","line":21,"column":14,"nodeType":"655","messageId":"656","endLine":21,"endColumn":16},{"ruleId":"653","severity":1,"message":"654","line":33,"column":14,"nodeType":"655","messageId":"656","endLine":33,"endColumn":16},{"ruleId":"653","severity":1,"message":"654","line":45,"column":14,"nodeType":"655","messageId":"656","endLine":45,"endColumn":16},{"ruleId":"653","severity":1,"message":"654","line":57,"column":14,"nodeType":"655","messageId":"656","endLine":57,"endColumn":16},{"ruleId":"649","severity":1,"message":"731","line":2,"column":8,"nodeType":"651","messageId":"652","endLine":2,"endColumn":19},{"ruleId":"649","severity":1,"message":"732","line":5,"column":18,"nodeType":"651","messageId":"652","endLine":5,"endColumn":36},{"ruleId":"653","severity":1,"message":"682","line":18,"column":21,"nodeType":"655","messageId":"656","endLine":18,"endColumn":23},{"ruleId":"653","severity":1,"message":"682","line":33,"column":26,"nodeType":"655","messageId":"656","endLine":33,"endColumn":28},{"ruleId":"653","severity":1,"message":"682","line":48,"column":26,"nodeType":"655","messageId":"656","endLine":48,"endColumn":28},{"ruleId":"653","severity":1,"message":"654","line":28,"column":42,"nodeType":"655","messageId":"656","endLine":28,"endColumn":44},{"ruleId":"653","severity":1,"message":"654","line":51,"column":42,"nodeType":"655","messageId":"656","endLine":51,"endColumn":44},{"ruleId":"649","severity":1,"message":"733","line":1,"column":17,"nodeType":"651","messageId":"652","endLine":1,"endColumn":25},{"ruleId":"649","severity":1,"message":"664","line":1,"column":27,"nodeType":"651","messageId":"652","endLine":1,"endColumn":36},{"ruleId":"649","severity":1,"message":"667","line":2,"column":8,"nodeType":"651","messageId":"652","endLine":2,"endColumn":19},{"ruleId":"653","severity":1,"message":"654","line":12,"column":43,"nodeType":"655","messageId":"656","endLine":12,"endColumn":45},{"ruleId":"653","severity":1,"message":"654","line":29,"column":43,"nodeType":"655","messageId":"656","endLine":29,"endColumn":45},{"ruleId":"653","severity":1,"message":"654","line":46,"column":43,"nodeType":"655","messageId":"656","endLine":46,"endColumn":45},{"ruleId":"653","severity":1,"message":"654","line":63,"column":43,"nodeType":"655","messageId":"656","endLine":63,"endColumn":45},{"ruleId":"653","severity":1,"message":"654","line":22,"column":32,"nodeType":"655","messageId":"656","endLine":22,"endColumn":34},{"ruleId":"653","severity":1,"message":"654","line":10,"column":39,"nodeType":"655","messageId":"656","endLine":10,"endColumn":41},{"ruleId":"653","severity":1,"message":"654","line":27,"column":39,"nodeType":"655","messageId":"656","endLine":27,"endColumn":41},{"ruleId":"653","severity":1,"message":"654","line":44,"column":39,"nodeType":"655","messageId":"656","endLine":44,"endColumn":41},{"ruleId":"649","severity":1,"message":"734","line":1,"column":38,"nodeType":"651","messageId":"652","endLine":1,"endColumn":50},{"ruleId":"649","severity":1,"message":"665","line":11,"column":8,"nodeType":"651","messageId":"652","endLine":11,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":18,"column":8,"nodeType":"651","messageId":"652","endLine":18,"endColumn":18},{"ruleId":"649","severity":1,"message":"735","line":19,"column":10,"nodeType":"651","messageId":"652","endLine":19,"endColumn":13},{"ruleId":"653","severity":1,"message":"654","line":232,"column":22,"nodeType":"655","messageId":"656","endLine":232,"endColumn":24},{"ruleId":"660","severity":1,"message":"736","line":239,"column":6,"nodeType":"662","endLine":239,"endColumn":8,"suggestions":"737"},{"ruleId":"660","severity":1,"message":"738","line":253,"column":6,"nodeType":"662","endLine":253,"endColumn":8,"suggestions":"739"},{"ruleId":"649","severity":1,"message":"740","line":13,"column":8,"nodeType":"651","messageId":"652","endLine":13,"endColumn":15},{"ruleId":"649","severity":1,"message":"692","line":19,"column":10,"nodeType":"651","messageId":"652","endLine":19,"endColumn":15},{"ruleId":"649","severity":1,"message":"723","line":88,"column":10,"nodeType":"651","messageId":"652","endLine":88,"endColumn":17},{"ruleId":"649","severity":1,"message":"722","line":89,"column":10,"nodeType":"651","messageId":"652","endLine":89,"endColumn":20},{"ruleId":"660","severity":1,"message":"741","line":176,"column":6,"nodeType":"662","endLine":176,"endColumn":8,"suggestions":"742"},{"ruleId":"649","severity":1,"message":"743","line":185,"column":10,"nodeType":"651","messageId":"652","endLine":185,"endColumn":14},{"ruleId":"649","severity":1,"message":"744","line":187,"column":9,"nodeType":"651","messageId":"652","endLine":187,"endColumn":19},{"ruleId":"649","severity":1,"message":"745","line":190,"column":9,"nodeType":"651","messageId":"652","endLine":190,"endColumn":20},{"ruleId":"653","severity":1,"message":"654","line":208,"column":30,"nodeType":"655","messageId":"656","endLine":208,"endColumn":32},{"ruleId":"660","severity":1,"message":"746","line":225,"column":6,"nodeType":"662","endLine":225,"endColumn":15,"suggestions":"747"},{"ruleId":"660","severity":1,"message":"748","line":234,"column":6,"nodeType":"662","endLine":234,"endColumn":46,"suggestions":"749"},{"ruleId":"653","severity":1,"message":"682","line":458,"column":49,"nodeType":"655","messageId":"656","endLine":458,"endColumn":51},{"ruleId":"649","severity":1,"message":"750","line":3,"column":52,"nodeType":"651","messageId":"652","endLine":3,"endColumn":58},{"ruleId":"649","severity":1,"message":"665","line":13,"column":8,"nodeType":"651","messageId":"652","endLine":13,"endColumn":13},{"ruleId":"649","severity":1,"message":"650","line":16,"column":8,"nodeType":"651","messageId":"652","endLine":16,"endColumn":18},{"ruleId":"649","severity":1,"message":"694","line":96,"column":10,"nodeType":"651","messageId":"652","endLine":96,"endColumn":15},{"ruleId":"660","severity":1,"message":"751","line":147,"column":6,"nodeType":"662","endLine":147,"endColumn":15,"suggestions":"752"},{"ruleId":"753","severity":1,"message":"754","line":204,"column":11,"nodeType":"704","endLine":208,"endColumn":13},{"ruleId":"697","severity":1,"message":"698","line":527,"column":13,"nodeType":"699","messageId":"700","endLine":527,"endColumn":52},{"ruleId":"653","severity":1,"message":"654","line":24,"column":13,"nodeType":"655","messageId":"656","endLine":24,"endColumn":15},"no-native-reassign",["755"],"no-negated-in-lhs",["756"],"no-unused-vars","'authHeader' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Avatar' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'Offset' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'query', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["757"],"'useEffect' is defined but never used.","'axios' is defined but never used.","'Charts' is defined but never used.","'userService' is defined but never used.","'dada' is assigned a value but never used.","'setDada' is assigned a value but never used.","'setAccounts' is assigned a value but never used.","'fixedHeightPaper' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'forceId'. Either include it or remove the dependency array.",["758"],"no-dupe-keys","Duplicate key 'updateCompanyPost'.","ObjectExpression","'handleSearch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.",["759"],"'resp' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'currentUserId' and 'id'. Either include them or remove the dependency array.",["760"],"'Link' is defined but never used.","'Close' is defined but never used.","'preventDefault' is defined but never used.","'classes' is assigned a value but never used.","'CloseIcon' is defined but never used.","'setCount' is assigned a value but never used.","'setRef' is defined but never used.","'Alert' is defined but never used.","'userImage' is assigned a value but never used.","'likes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ownerId', 'postId', and 'user?.id'. Either include them or remove the dependency array.",["761"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useStyles' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The ref value 'interval.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'interval.current' to a variable inside the effect, and use that variable in the cleanup function.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"762","text":"763"},"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","React Hook useEffect has a missing dependency: 'forceId'. Either include it or remove the dependency array. If 'setActiveId' needs the current value of 'forceId', you can also switch to useReducer instead of useState and read 'forceId' in the reducer.",["764"],"'capitalizeTheFirstLetterOfEachWord' is defined but never used.","React Hook useEffect has missing dependencies: 'user?.company?.aboutCompany?.domaine', 'user?.cv?.about?.domaine', and 'user?.roles'. Either include them or remove the dependency array. If 'setRecommendedCompanies' needs the current value of 'user.cv.about.domaine', you can also switch to useReducer instead of useState and read 'user.cv.about.domaine' in the reducer.",["765"],"'loading1' is assigned a value but never used.","React Hook useMemo has unnecessary dependencies: 'date', 'id', 'img', 'isNew', and 'name'. Either exclude them or remove the dependency array.",["766"],"'handleMessageReceived' is assigned a value but never used.","'createPalette' is defined but never used.","'successful' is assigned a value but never used.","'message' is assigned a value but never used.","'GitHubIcon' is defined but never used.","'YouTubeIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["767"],["768"],["769"],"'gottenName' is assigned a value but never used.","'ProgressBar' is defined but never used.","'IconContainerProps' is defined but never used.","'useState' is defined but never used.","'initialState' is defined but never used.","'set' is defined but never used.","React Hook useEffect has missing dependencies: 'likes' and 'user?.id'. Either include them or remove the dependency array.",["770"],"React Hook useEffect has missing dependencies: 'ownerId' and 'role'. Either include them or remove the dependency array.",["771"],"'Shimmer' is defined but never used.","React Hook useEffect has missing dependencies: 'count' and 'loopThroughPosts'. Either include them or remove the dependency array.",["772"],"'open' is assigned a value but never used.","'handleOpen' is assigned a value but never used.","'handleClose' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'res' and 'user?.roles'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPostsToShow' needs the current value of 'res'.",["773"],"React Hook useEffect has a missing dependency: 'loadingSpinner'. Either include it or remove the dependency array.",["774"],"'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'ownerId', 'postId', 'toggleComment', and 'user?.id'. Either include them or remove the dependency array. You can also do a functional update 'setToggleComment(t => ...)' if you only need 'toggleComment' in the 'setToggleComment' call.",["775"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation",{"desc":"776","fix":"777"},{"desc":"778","fix":"779"},{"desc":"780","fix":"781"},{"desc":"782","fix":"783"},{"desc":"784","fix":"785"},[4378,4378]," rel=\"noreferrer\"",{"desc":"786","fix":"787"},{"desc":"788","fix":"789"},{"desc":"790","fix":"791"},{"desc":"792","fix":"793"},{"desc":"792","fix":"794"},{"desc":"792","fix":"795"},{"desc":"796","fix":"797"},{"desc":"798","fix":"799"},{"desc":"800","fix":"801"},{"desc":"802","fix":"803"},{"desc":"804","fix":"805"},{"desc":"806","fix":"807"},"Update the dependencies array to be: [history, query, user]",{"range":"808","text":"809"},"Update the dependencies array to be: [forceId]",{"range":"810","text":"811"},"Update the dependencies array to be: [history, user]",{"range":"812","text":"813"},"Update the dependencies array to be: [count, currentUserRole, toggle, role, currentUserId, id]",{"range":"814","text":"815"},"Update the dependencies array to be: [refresh, count, ownerId, postId, user?.id]",{"range":"816","text":"817"},"Update the dependencies array to be: [activeId, forceId]",{"range":"818","text":"819"},"Update the dependencies array to be: [user?.company?.aboutCompany?.domaine, user?.cv?.about?.domaine, user?.roles]",{"range":"820","text":"821"},"Update the dependencies array to be: []",{"range":"822","text":"823"},"Update the dependencies array to be: [props, successful]",{"range":"824","text":"825"},{"range":"826","text":"825"},{"range":"827","text":"825"},"Update the dependencies array to be: [likes, user?.id]",{"range":"828","text":"829"},"Update the dependencies array to be: [ownerId, role]",{"range":"830","text":"831"},"Update the dependencies array to be: [count, loopThroughPosts]",{"range":"832","text":"833"},"Update the dependencies array to be: [refresh, res, user?.roles]",{"range":"834","text":"835"},"Update the dependencies array to be: [childLoaderRefresh, loadingSpinner, props.refreshHome]",{"range":"836","text":"837"},"Update the dependencies array to be: [ownerId, postId, refresh, toggleComment, user?.id]",{"range":"838","text":"839"},[707,709],"[history, query, user]",[1611,1613],"[forceId]",[3525,3527],"[history, user]",[5967,6004],"[count, currentUserRole, toggle, role, currentUserId, id]",[5319,5335],"[refresh, count, ownerId, postId, user?.id]",[612,622],"[activeId, forceId]",[1676,1678],"[user?.company?.aboutCompany?.domaine, user?.cv?.about?.domaine, user?.roles]",[2617,2645],"[]",[2346,2358],"[props, successful]",[2975,2987],[3011,3023],[6214,6216],"[likes, user?.id]",[6651,6653],"[ownerId, role]",[4694,4696],"[count, loopThroughPosts]",[5807,5816],"[refresh, res, user?.roles]",[5959,5999],"[childLoaderRefresh, loadingSpinner, props.refreshHome]",[4295,4304],"[ownerId, postId, refresh, toggleComment, user?.id]"]
=======
[{"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\index.js":"1","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\App.js":"2","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\services\\userService.js":"3","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\services\\authHeader.js":"4","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\ConfirmationToken\\ConfirmationToken.jsx":"5","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Home.jsx":"6","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Network\\Network.jsx":"7","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Login\\Login.jsx":"8","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\Profile.jsx":"9","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Notification\\Notification.jsx":"10","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Signup\\SignUp.jsx":"11","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Header.jsx":"12","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Dashboard.jsx":"13","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Messages.jsx":"14","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\SinglePost\\SinglePostMain.jsx":"15","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation.jsx":"16","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation2.jsx":"17","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\Cv.jsx":"18","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\services\\authService.js":"19","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\Feed.jsx":"20","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\StudentProfile.jsx":"21","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\CompanyProfile.jsx":"22","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Charts.jsx":"23","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Messages.jsx":"24","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Statistics.jsx":"25","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\SinglePost\\SinglePost.jsx":"26","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Enable.jsx":"27","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\ListUsers.jsx":"28","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Sidebar\\Sidebar.jsx":"29","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Sidebarl\\Sidebarl.jsx":"30","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Network\\Sidebar\\Sidebar.jsx":"31","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Network\\Feed\\Feed.jsx":"32","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Notification\\Feed\\Feed.jsx":"33","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Sidebar\\Sidebar.jsx":"34","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Feed\\Feed.jsx":"35","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditImage.jsx":"36","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation Children\\Footer.jsx":"37","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation Children\\ContactUs.jsx":"38","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCompany\\EditAboutCompany.jsx":"39","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditAwards.jsx":"40","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditSoftware.jsx":"41","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditNormalLanguages.jsx":"42","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditDevLanguages.jsx":"43","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditEducation.jsx":"44","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditExperience.jsx":"45","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditAbout.jsx":"46","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Title.jsx":"47","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\SetCompany.jsx":"48","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCv.jsx":"49","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditSocials.jsx":"50","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Experience.jsx":"51","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Image.jsx":"52","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm.jsx":"53","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\About.jsx":"54","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Education.jsx":"55","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Award.jsx":"56","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\AddCompany Components\\CompanyImage.jsx":"57","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\AddCompany Components\\AboutCompany.jsx":"58","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Socials.jsx":"59","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\Other.jsx":"60","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\NormalLanguage.jsx":"61","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\DevLanguage.jsx":"62","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\Software.jsx":"63","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\AddCompany Components\\CompanySocials.jsx":"64","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Feed\\ProfileInfo\\ProfileInfo.jsx":"65","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Sidebar\\MessageConversation\\MessageConversation.jsx":"66","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\Post\\Comments\\Comment\\Comment.jsx":"67","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\InputOption\\InputOption.jsx":"68","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\Post\\Post.jsx":"69","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\js\\cv.js":"70","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Interest.jsx":"71","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\About.jsx":"72","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Award.jsx":"73","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Experience.jsx":"74","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\company\\Nav.jsx":"75","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Skill.jsx":"76","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Education.jsx":"77","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Navbar.jsx":"78","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\company\\About.jsx":"79","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation Children\\Team.jsx":"80","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation Children\\welcome.jsx":"81","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\NavbarElements.jsx":"82","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Search\\Search.jsx":"83","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Search\\SearchMenu\\SearchMenu.jsx":"84","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\HeaderOption\\HeaderOption.jsx":"85","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\HeaderOption\\DropdowMenu\\DropdownMenu.jsx":"86","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Search\\SearchMenu\\ProfileInfo\\ProfileInfo.jsx":"87","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\ReportedUsers.jsx":"88"},{"size":314,"mtime":1620438346447,"results":"89","hashOfConfig":"90"},{"size":5238,"mtime":1620978335827,"results":"91","hashOfConfig":"90"},{"size":13521,"mtime":1621004964444,"results":"92","hashOfConfig":"90"},{"size":373,"mtime":1620438346460,"results":"93","hashOfConfig":"90"},{"size":1032,"mtime":1620438345055,"results":"94","hashOfConfig":"90"},{"size":1761,"mtime":1621005112714,"results":"95","hashOfConfig":"90"},{"size":324,"mtime":1620438345187,"results":"96","hashOfConfig":"90"},{"size":6796,"mtime":1620573747197,"results":"97","hashOfConfig":"90"},{"size":655,"mtime":1620438346334,"results":"98","hashOfConfig":"90"},{"size":443,"mtime":1620438345193,"results":"99","hashOfConfig":"90"},{"size":31863,"mtime":1620872461152,"results":"100","hashOfConfig":"90"},{"size":4234,"mtime":1620872461136,"results":"101","hashOfConfig":"90"},{"size":12383,"mtime":1621000583125,"results":"102","hashOfConfig":"90"},{"size":2043,"mtime":1620438345177,"results":"103","hashOfConfig":"90"},{"size":484,"mtime":1620438345158,"results":"104","hashOfConfig":"90"},{"size":3927,"mtime":1620909142463,"results":"105","hashOfConfig":"90"},{"size":3143,"mtime":1620974750242,"results":"106","hashOfConfig":"90"},{"size":23437,"mtime":1620909142470,"results":"107","hashOfConfig":"90"},{"size":2329,"mtime":1621000882796,"results":"108","hashOfConfig":"90"},{"size":14322,"mtime":1620978608321,"results":"109","hashOfConfig":"90"},{"size":830,"mtime":1620438346419,"results":"110","hashOfConfig":"90"},{"size":835,"mtime":1620438346330,"results":"111","hashOfConfig":"90"},{"size":1564,"mtime":1620438345057,"results":"112","hashOfConfig":"90"},{"size":2646,"mtime":1620573752156,"results":"113","hashOfConfig":"90"},{"size":11530,"mtime":1620438345076,"results":"114","hashOfConfig":"90"},{"size":14926,"mtime":1620438345155,"results":"115","hashOfConfig":"90"},{"size":3333,"mtime":1621000897625,"results":"116","hashOfConfig":"90"},{"size":5417,"mtime":1620977984058,"results":"117","hashOfConfig":"90"},{"size":2658,"mtime":1620872461146,"results":"118","hashOfConfig":"90"},{"size":396,"mtime":1620438345167,"results":"119","hashOfConfig":"90"},{"size":3087,"mtime":1620438345188,"results":"120","hashOfConfig":"90"},{"size":7692,"mtime":1620438345185,"results":"121","hashOfConfig":"90"},{"size":8393,"mtime":1620841518007,"results":"122","hashOfConfig":"90"},{"size":2115,"mtime":1620438345182,"results":"123","hashOfConfig":"90"},{"size":11927,"mtime":1620438345171,"results":"124","hashOfConfig":"90"},{"size":3814,"mtime":1620438346387,"results":"125","hashOfConfig":"90"},{"size":3649,"mtime":1620909141552,"results":"126","hashOfConfig":"90"},{"size":5292,"mtime":1620909141551,"results":"127","hashOfConfig":"90"},{"size":5773,"mtime":1620841518070,"results":"128","hashOfConfig":"90"},{"size":7647,"mtime":1620438346380,"results":"129","hashOfConfig":"90"},{"size":7035,"mtime":1620438346390,"results":"130","hashOfConfig":"90"},{"size":6217,"mtime":1620438346388,"results":"131","hashOfConfig":"90"},{"size":7093,"mtime":1620438346382,"results":"132","hashOfConfig":"90"},{"size":13097,"mtime":1620438346384,"results":"133","hashOfConfig":"90"},{"size":13294,"mtime":1620438346385,"results":"134","hashOfConfig":"90"},{"size":6894,"mtime":1620841518073,"results":"135","hashOfConfig":"90"},{"size":358,"mtime":1620438345078,"results":"136","hashOfConfig":"90"},{"size":5439,"mtime":1620438346342,"results":"137","hashOfConfig":"90"},{"size":6656,"mtime":1620438346345,"results":"138","hashOfConfig":"90"},{"size":4216,"mtime":1620841518074,"results":"139","hashOfConfig":"90"},{"size":15209,"mtime":1620438346354,"results":"140","hashOfConfig":"90"},{"size":4744,"mtime":1620438346355,"results":"141","hashOfConfig":"90"},{"size":4334,"mtime":1620438346367,"results":"142","hashOfConfig":"90"},{"size":10542,"mtime":1620573752197,"results":"143","hashOfConfig":"90"},{"size":11442,"mtime":1620438346353,"results":"144","hashOfConfig":"90"},{"size":7585,"mtime":1620438346349,"results":"145","hashOfConfig":"90"},{"size":3825,"mtime":1620438346339,"results":"146","hashOfConfig":"90"},{"size":6611,"mtime":1620438346338,"results":"147","hashOfConfig":"90"},{"size":4216,"mtime":1620841518067,"results":"148","hashOfConfig":"90"},{"size":1822,"mtime":1620438346361,"results":"149","hashOfConfig":"90"},{"size":6874,"mtime":1620438346359,"results":"150","hashOfConfig":"90"},{"size":8171,"mtime":1620438346358,"results":"151","hashOfConfig":"90"},{"size":7593,"mtime":1620438346364,"results":"152","hashOfConfig":"90"},{"size":3680,"mtime":1620841518066,"results":"153","hashOfConfig":"90"},{"size":1251,"mtime":1620438345174,"results":"154","hashOfConfig":"90"},{"size":816,"mtime":1620438345180,"results":"155","hashOfConfig":"90"},{"size":10694,"mtime":1621004384514,"results":"156","hashOfConfig":"90"},{"size":358,"mtime":1620438345134,"results":"157","hashOfConfig":"90"},{"size":17058,"mtime":1621000752458,"results":"158","hashOfConfig":"90"},{"size":1315,"mtime":1620438346421,"results":"159","hashOfConfig":"90"},{"size":368,"mtime":1620438346410,"results":"160","hashOfConfig":"90"},{"size":3133,"mtime":1620841518077,"results":"161","hashOfConfig":"90"},{"size":2025,"mtime":1620438346400,"results":"162","hashOfConfig":"90"},{"size":2577,"mtime":1620573747202,"results":"163","hashOfConfig":"90"},{"size":621,"mtime":1620438346394,"results":"164","hashOfConfig":"90"},{"size":2797,"mtime":1620573747204,"results":"165","hashOfConfig":"90"},{"size":1171,"mtime":1620438346405,"results":"166","hashOfConfig":"90"},{"size":2304,"mtime":1620438346413,"results":"167","hashOfConfig":"90"},{"size":2310,"mtime":1620841518076,"results":"168","hashOfConfig":"90"},{"size":6897,"mtime":1620974750236,"results":"169","hashOfConfig":"90"},{"size":18794,"mtime":1620909142459,"results":"170","hashOfConfig":"90"},{"size":3323,"mtime":1620974750234,"results":"171","hashOfConfig":"90"},{"size":1492,"mtime":1620438345107,"results":"172","hashOfConfig":"90"},{"size":1870,"mtime":1620841517997,"results":"173","hashOfConfig":"90"},{"size":2374,"mtime":1620438345099,"results":"174","hashOfConfig":"90"},{"size":3026,"mtime":1620438345094,"results":"175","hashOfConfig":"90"},{"size":1261,"mtime":1620438345115,"results":"176","hashOfConfig":"90"},{"size":4762,"mtime":1621005251119,"results":"177","hashOfConfig":"90"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},"1oezsou",{"filePath":"181","messages":"182","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"180"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"180"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"180"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"180"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"180"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"180"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"180"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"180"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"180"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"180"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"180"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"180"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"180"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"180"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"180"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"180"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"180"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"180"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"180"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"180"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"180"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"180"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"180"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"180"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"180"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"180"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"180"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"180"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"180"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"180"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"180"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"180"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"180"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"180"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"180"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"180"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"180"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"180"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"180"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"180"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"180"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"180"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"180"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"180"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"180"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"180"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"180"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"180"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"180"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"180"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"392","usedDeprecatedRules":"180"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"180"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"180"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\index.js",[],["409","410"],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\App.js",["411","412","413","414"],"import React, { useState, useEffect, initialState } from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport \"./css/App.css\";\r\nimport Login from \"./Components/Login/Login\";\r\nimport SignUp from \"./Components/Signup/SignUp\";\r\nimport userService from \"./services/userService\";\r\nimport Presentation from \"./Components/Presentation/Presentation\";\r\nimport ConfirmToken from \"./Components/ConfirmationToken/ConfirmationToken\";\r\nimport Home from \"./Components/Home/Home\";\r\nimport Header from \"./Components/Header/Header\";\r\nimport Profile from \"./Components/Profile/Profile\";\r\nimport Dashboard from \"./Components/Dashboard/Dashboard\";\r\nimport Notification from \"./Components/Notification/Notification\";\r\nimport Network from \"./Components/Network/Network\";\r\nimport Cv from \"./Components/Profile/ShownProfile/Cv\";\r\nimport Messages from \"./Components/Messages/Messages\";\r\nimport SinglePostMain from \"./Components/Home/Feed/SinglePost/SinglePostMain\";\r\nimport authHeader from \"./services/authHeader\";\r\nimport Presentation2 from \"./Components/Presentation/Presentation2\";\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState(initialState);\r\n  const [image, setImage] = useState(initialState);\r\n  const [role, setRole] = useState(initialState);\r\n\r\n  const [refreshHome, setRefreshHome] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function getUserData() {\r\n      await userService.getUserData().then(\r\n        (response) => {\r\n          setUser(response?.data);\r\n          setRole(response?.data?.roles[0]?.id);\r\n          if (response?.data?.roles[0]?.id === 1) {\r\n            setImage(response?.data?.cv?.image);\r\n          } else if (response?.data?.roles[0]?.id === 3) {\r\n            setImage(response?.data?.company?.companyImage);\r\n          }\r\n        },\r\n        (error) => {\r\n          setUser(null);\r\n        }\r\n      );\r\n    }\r\n    getUserData();\r\n    async function getCurrentImage() {\r\n      if (role === 1) {\r\n        await userService.getCurrentImage().then((response) => {\r\n          // setImage(`data:image/png;base64,${response?.data}`);\r\n        });\r\n      } else if (role === 3) {\r\n        await userService.getCurrentCompanyImage().then((response) => {\r\n          // setImage(`data:image/png;base64,${response?.data}`);\r\n        });\r\n      }\r\n    }\r\n    getCurrentImage();\r\n  }, [role]);\r\n  return (\r\n    <div className=\"app\">\r\n      {/* Header */}\r\n      {/* {user?.roles[0]?.id === 2 && <Redirect to=\"/admin\" />} */}\r\n      {!(user?.roles[0]?.id === 2 && user != null) && (\r\n        <Header\r\n          image={image}\r\n          user={user}\r\n          refreshHome={refreshHome}\r\n          onChange={() => setRefreshHome(!refreshHome)}\r\n        />\r\n      )}\r\n      {/* App Body */}\r\n      <div className=\"app_body\">\r\n        <Switch>\r\n          {user != null && <Route exact path={\"/\"} component={Presentation} />}\r\n          <Route\r\n            exact\r\n            path={\"/confirm\"}\r\n            component={() => (\r\n              <ConfirmToken userinfo={user} user={user ? true : false} />\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path={\"/login\"}\r\n            component={() => (\r\n              <Login user={user ? true : false} userInfo={user} />\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path={\"/register\"}\r\n            component={() => <SignUp user={user ? true : false} />}\r\n          />\r\n          {user === null ? (\r\n            <>\r\n              <Route component={() => <Presentation2 />} />\r\n            </>\r\n          ) : (user?.roles[0]?.id === 1 && user.cv.flag == false) ||\r\n            (user?.roles[0]?.id === 3 && user.company.flag == false) ? (\r\n            <>\r\n              <Route component={() => <Profile user={user} image={image} />} />\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Route\r\n                exact\r\n                path={\"/home\"}\r\n                render={() => (\r\n                  <Home image={image} user={user} refreshHome={refreshHome} />\r\n                )}\r\n              />\r\n              <Route\r\n                exact\r\n                path={\"/profile\"}\r\n                component={() => <Profile user={user} image={image} />}\r\n              />\r\n              <Route exact path=\"/view/:id\" component={Cv} />\r\n              <Route\r\n                exact\r\n                path={\"/post/:postId\"}\r\n                component={() => <SinglePostMain user={user} image={image} />}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/admin\"\r\n                component={() => <Dashboard user={user} />}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/MyNetwork\"\r\n                component={() => <Network user={user} />}\r\n              />\r\n              <Route\r\n                exact\r\n                path={\"/Notifications\"}\r\n                component={() => <Notification user={user} image={image} />}\r\n              />\r\n              <Route\r\n                exact\r\n                path={\"/Messages/:id?/\"}\r\n                component={() => <Messages user={user} />}\r\n              />\r\n            </>\r\n          )}\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\services\\userService.js",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\services\\authHeader.js",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\ConfirmationToken\\ConfirmationToken.jsx",["415"],"import React, { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport authService from \"../../services/authService\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport \"./ConfirmationToken.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction ConfirmationToken({ userinfo, user }) {\r\n  const history = useHistory();\r\n  const query = useQuery();\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push(\"/home\");\r\n    }\r\n    const token = query.get(\"token\");\r\n    authService.verify(token).then(() => {\r\n      history.push(\"/profile\");\r\n      window.location.reload();\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"loader\">\r\n      <CircularProgress\r\n        variant=\"determinate\"\r\n        className=\"circularProgress\"\r\n        size={40}\r\n        thickness={4}\r\n        value={100}\r\n      />\r\n      <h1>Redirect...</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConfirmationToken;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Home.jsx",["416","417","418"],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Network\\Network.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Login\\Login.jsx",["419","420"],"import React, { useState, initialState, useEffect } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport authService from \"../../services/authService\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport hihi from \"../../hihi.jpg\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  image: {\r\n    backgroundImage: `url(${hihi})`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[50]\r\n        : theme.palette.grey[900],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(8, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function Login({ user, userInfo }) {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(initialState);\r\n  const [errors, setErrors] = useState(initialState);\r\n  const [message, setMessage] = useState(initialState);\r\n  const [loading, setLoading] = useState(initialState);\r\n  useEffect(() => {\r\n    if (user && userInfo?.roles[0]?.id !== 2) {\r\n      history.push(\"/profile\");\r\n    } else if (user && userInfo?.roles[0]?.id === 2) {\r\n      history.push(\"/admin\");\r\n    }\r\n  });\r\n  const handleChangePassword = (e) => {\r\n    const password = e.target.value;\r\n    setPassword(password);\r\n    if (password?.length === 0) {\r\n      setErrors({ ...errors, password: \"Password required\" });\r\n    } else {\r\n      setErrors({ ...errors, password: null });\r\n      if (password?.length < 8)\r\n        setErrors({\r\n          ...errors,\r\n          password: \"Password must be equal or greater than 8\",\r\n        });\r\n    }\r\n  };\r\n  const handleChangeUsername = (e) => {\r\n    const username = e.target.value;\r\n    setUsername(username);\r\n    if (username?.length === 0) {\r\n      setErrors({ ...errors, username: \"Username or email required\" });\r\n    } else {\r\n      setErrors({ ...errors, username: null });\r\n      if (username?.length < 3)\r\n        setErrors({\r\n          ...errors,\r\n          username: \"Username or email must be equal or greater than 3\",\r\n        });\r\n    }\r\n  };\r\n  const handLogin = (e) => {\r\n    e.preventDefault();\r\n    if (!Object.values(errors).some((x) => x !== null && x !== \"\")) {\r\n      setLoading(true);\r\n      setMessage(\"\");\r\n      const usernamex = username?.toLowerCase();\r\n      authService.login(usernamex, password).then(\r\n        () => {\r\n          history.push(\"/profile\");\r\n          window.location.reload();\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n              (error.response &&\r\n                error.response.data &&\r\n                error.response.data.message) ||\r\n              error.message ||\r\n              error.toString();\r\n\r\n            setMessage(resMessage);\r\n            setLoading(false);     \r\n        }\r\n      );\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n        {loading && (\r\n          <div className={classes.root}>\r\n            <LinearProgress />\r\n          </div>\r\n        )}\r\n        <div className={classes.paper}>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in\r\n          </Typography>\r\n          <form className={classes.form} onSubmit={handLogin}>\r\n            <TextField\r\n              value={username}\r\n              onChange={handleChangeUsername}\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n              id=\"email\"\r\n              required={true}\r\n              label=\"Username Or Email\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n              error={Boolean(errors?.username)}\r\n              helperText={errors?.username}\r\n            />\r\n            <TextField\r\n              value={password}\r\n              onChange={handleChangePassword}\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              required={true}\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n              error={Boolean(errors?.password)}\r\n              helperText={errors?.password}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n              label=\"Remember me\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n            >\r\n              Sign In\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item xs>\r\n                <Link href=\"/\" variant=\"body2\">\r\n                  Forgot password?\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <Link\r\n                  href=\"\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    history.push(\"/register\");\r\n                  }}\r\n                  variant=\"body2\"\r\n                >\r\n                  {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n        {message && (\r\n          <Alert\r\n            severity=\"error\"\r\n            onClose={() => {\r\n              setMessage(null);\r\n            }}\r\n          >\r\n            {message}\r\n          </Alert>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\Profile.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Notification\\Notification.jsx",["421","422"],"import React, { useEffect } from \"react\";\r\nimport Sidebar from \"../Home/Sidebar/Sidebar\"\r\nimport Feed from \"./Feed/Feed\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nfunction Home(props) {\r\n    const history = useHistory();\r\n    const image = props?.image;\r\n    const user = props?.user;\r\n    return (\r\n        <>\r\n            <Sidebar image={image} user={user} />\r\n            <Feed />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Signup\\SignUp.jsx",["423","424","425","426","427"],"import React, { useEffect, useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport authService from \"../../services/authService\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport login from \"../../login.jfif\";\r\nimport userService from \"../../services/userService\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    flexGrow: 1,\r\n  },\r\n  tab: {\r\n    width: \"50%\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(0, 4),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  typo: {\r\n    marginTop: \"2vh\",\r\n    marginBottom: \"2vh\",\r\n  },\r\n  image: {\r\n    backgroundImage: `url(${login})`,\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[50]\r\n        : theme.palette.grey[900],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n}));\r\nfunction validateEmail(email) {\r\n  const re =\r\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\nexport default function SignUp({ user }) {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [companyName, setCompanyName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errors, setErrors] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [loading, setLoading] = useState(\"\");\r\n  const [successful, setSuccessful] = useState(\"\");\r\n  const [value, setValue] = useState(0);\r\n  const [etablishments, setEtablishments] = useState([]);\r\n  const [etablishment, setEtablishment] = useState(0);\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      history.push(\"/profile\");\r\n    }\r\n    async function getEtablishments() {\r\n      await userService.getEtablishements().then((response) => {\r\n        setEtablishments(response.data);\r\n      });\r\n    }\r\n    getEtablishments();\r\n  }, []);\r\n  const handleChangeFirstName = (e) => {\r\n    const firstName = e.target.value;\r\n    setFirstName(firstName);\r\n    if (firstName.length === 0) {\r\n      setErrors({ ...errors, firstName: \"First name is required\" });\r\n    } else {\r\n      setErrors({ ...errors, firstName: null });\r\n    }\r\n  };\r\n  const handleChangeLastName = (e) => {\r\n    const lastName = e.target.value;\r\n    setLastName(lastName);\r\n    if (lastName.length === 0) {\r\n      setErrors({ ...errors, lastName: \"Last name is required\" });\r\n    } else {\r\n      setErrors({ ...errors, lastName: null });\r\n    }\r\n  };\r\n  const handleChangeUsername = (e) => {\r\n    const userName = e.target.value;\r\n    setUserName(userName);\r\n    if (userName.length === 0) {\r\n      setErrors({ ...errors, userName: \"User name is required\" });\r\n    } else {\r\n      setErrors({ ...errors, userName: null });\r\n      if (userName?.length < 3)\r\n        setErrors({\r\n          ...errors,\r\n          userName: \"User name must be equal or greater than 3\",\r\n        });\r\n    }\r\n  };\r\n  const handleChangeEmail = (e) => {\r\n    const email = e.target.value;\r\n    setEmail(email);\r\n    if (email.length === 0) {\r\n      setErrors({ ...errors, email: \"Email is required\" });\r\n    } else if (!email.endsWith(\"@uit.ac.ma\") && value === 0) {\r\n      setErrors({ ...errors, email: \"Use your university email\" });\r\n    } else {\r\n      setErrors({ ...errors, email: null });\r\n      if (!validateEmail(email)) {\r\n        setErrors({ ...errors, email: \"Invalid email format\" });\r\n      }\r\n    }\r\n  };\r\n  const handleChangeEtablishment = (e) => {\r\n    const etablishment = e.target.value;\r\n    setEtablishment(etablishment);\r\n    if (etablishment == 0) {\r\n      setErrors({ ...errors, etablishment: \"Etablishement is required\" });\r\n    } else {\r\n      setErrors({ ...errors, etablishment: null });\r\n    }\r\n  };\r\n\r\n  const handleChangeCompanyName = (e) => {\r\n    const companyName = e.target.value;\r\n    setCompanyName(companyName);\r\n    if (companyName.length === 0) {\r\n      setErrors({ ...errors, companyName: \"User name is required\" });\r\n    } else {\r\n      setErrors({ ...errors, companyName: null });\r\n    }\r\n  };\r\n\r\n  const handleChangePassword = (e) => {\r\n    const password = e.target.value;\r\n    setPassword(password);\r\n    if (password?.length === 0) {\r\n      setErrors({ ...errors, password: \"Password required\" });\r\n    } else {\r\n      setErrors({ ...errors, password: null });\r\n      if (password?.length < 8)\r\n        setErrors({\r\n          ...errors,\r\n          password: \"Password must be equal or greater than 8\",\r\n        });\r\n    }\r\n  };\r\n  const handleStudentSignup = (e) => {\r\n    e.preventDefault();\r\n    if (etablishment == 0) {\r\n      setErrors({ ...errors, etablishment: \"Etablishement is required\" });\r\n      return 0;\r\n    }\r\n    setMessage(\"\");\r\n    setLoading(true);\r\n    if (!Object.values(errors).some((x) => x !== null && x !== \"\")) {\r\n      setLoading(true);\r\n      const name =\r\n        firstName.split(\" \").join(\"\").toLowerCase() +\r\n        \" \" +\r\n        lastName.split(\" \").join(\"\").toLowerCase();\r\n      const userNamex = userName.toLowerCase();\r\n      const emailx = email.toLowerCase();\r\n      authService\r\n        .register(name, \"\", userNamex, emailx, password, 1, etablishment)\r\n        .then(\r\n          (response) => {\r\n            setMessage(response.data.message);\r\n            setSuccessful(true);\r\n            setLoading(false);\r\n          },\r\n          (error) => {\r\n            const resMessage =\r\n              (error.response &&\r\n                error.response.data &&\r\n                error.response.data.message) ||\r\n              error.message ||\r\n              error.toString();\r\n\r\n            setMessage(resMessage);\r\n            setSuccessful(false);\r\n            setLoading(false);\r\n          }\r\n        );\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const handleManagerSignup = (e) => {\r\n    e.preventDefault();\r\n    setMessage(\"\");\r\n    setLoading(true);\r\n    if (!Object.values(errors).some((x) => x !== null && x !== \"\")) {\r\n      setLoading(true);\r\n      const name =\r\n        firstName.split(\" \").join(\"\").toLowerCase() +\r\n        \" \" +\r\n        lastName.split(\" \").join(\"\").toLowerCase();\r\n      const userNamex = userName.toLowerCase();\r\n      const emailx = email.toLowerCase();\r\n      authService\r\n        .register(name, companyName, userNamex, emailx, password, 3)\r\n        .then(\r\n          (response) => {\r\n            setMessage(\"Please wait for the admin to enable your account\");\r\n            setSuccessful(true);\r\n            setLoading(false);\r\n          },\r\n          (error) => {\r\n            const resMessage =\r\n              (error.response &&\r\n                error.response.data &&\r\n                error.response.data.message) ||\r\n              error.message ||\r\n              error.toString();\r\n\r\n            setMessage(resMessage);\r\n            setSuccessful(false);\r\n            setLoading(false);\r\n          }\r\n        );\r\n    }\r\n  };\r\n  const [show, setShow] = useState(false);\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n        {loading && (\r\n          <div className={classes.root}>\r\n            <LinearProgress />\r\n          </div>\r\n        )}\r\n        <div className={classes.paper}>\r\n          <Paper className={classes.root}>\r\n            <Tabs\r\n              value={value}\r\n              onChange={handleChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              centered\r\n            >\r\n              <Tab label=\"Student Registration\" className={classes.tab} />\r\n              <Tab label=\"Manager Registration\" />\r\n            </Tabs>\r\n          </Paper>\r\n\r\n          {!successful && value === 0 && (\r\n            <>\r\n              <Typography component=\"h1\" variant=\"h5\" className={classes.typo}>\r\n                Sign up as a Student\r\n              </Typography>\r\n              <form\r\n                className={classes.form}\r\n                onSubmit={handleStudentSignup}\r\n                Validate\r\n              >\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      autoComplete=\"fname\"\r\n                      name=\"firstName\"\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      error={Boolean(errors?.firstName)}\r\n                      id=\"firstName\"\r\n                      label=\"First Name\"\r\n                      value={firstName\r\n                        .split(\" \")\r\n                        .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                        .join(\" \")}\r\n                      helperText={errors?.firstName}\r\n                      onChange={handleChangeFirstName}\r\n                      autoFocus\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"lastName\"\r\n                      label=\"Last Name\"\r\n                      name=\"lastName\"\r\n                      autoComplete=\"lname\"\r\n                      value={lastName\r\n                        .split(\" \")\r\n                        .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                        .join(\" \")}\r\n                      onChange={handleChangeLastName}\r\n                      error={Boolean(errors?.lastName)}\r\n                      helperText={errors?.lastName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"username\"\r\n                      label=\"Username\"\r\n                      name=\"username\"\r\n                      autoComplete=\"username\"\r\n                      value={userName}\r\n                      onChange={handleChangeUsername}\r\n                      error={Boolean(errors?.userName)}\r\n                      helperText={errors?.userName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <FormControl variant=\"filled\" xs={12} sm={6}>\r\n                      <InputLabel id=\"demo-simple-select-label\">\r\n                        Etablissement\r\n                      </InputLabel>\r\n                      <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={etablishment}\r\n                        onChange={handleChangeEtablishment}\r\n                        error={Boolean(errors?.etablishment)}\r\n                      >\r\n                        <MenuItem value={0}>Choose Your Etablishement</MenuItem>\r\n                        {etablishments.map((etablishment) => {\r\n                          return (\r\n                            <MenuItem value={etablishment.id}>\r\n                              {etablishment.name}\r\n                            </MenuItem>\r\n                          );\r\n                        })}\r\n                      </Select>\r\n                      <FormHelperText error={Boolean(errors?.etablishment)}>\r\n                        {errors?.etablishment}\r\n                      </FormHelperText>\r\n                    </FormControl>\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email Address\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      value={email}\r\n                      onChange={handleChangeEmail}\r\n                      error={Boolean(errors?.email)}\r\n                      helperText={errors?.email}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      value={password}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      onChange={handleChangePassword}\r\n                      autoComplete=\"current-password\"\r\n                      error={Boolean(errors?.password)}\r\n                      helperText={errors?.password}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Button variant=\"primary\" onClick={() => setShow(true)}>\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox value=\"allowExtraEmails\" color=\"primary\" />\r\n                        }\r\n                        label=\"j'accepte les conditions d'utilisations\"\r\n                      />\r\n                    </Button>\r\n                  </Grid>\r\n\r\n                  <Modal\r\n                    size=\"lg\"\r\n                    show={show}\r\n                    onHide={() => setShow(false)}\r\n                    dialogClassName=\"modal-220w\"\r\n                    aria-labelledby=\"example-custom-modal-styling-title\"\r\n                  >\r\n                    <Modal.Header closeButton>\r\n                      <Modal.Title id=\"example-custom-modal-styling-title\">\r\n                        <h3>les conditions d'utilisations</h3>\r\n                      </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                      <p>\r\n                        Vous êtes actuellement connecté(e) au Site Internet\r\n                        (www.forum-uit.ma) de La 1ère Edition du Forum Virtuel à\r\n                        L’Université Ibn Tofail. Tout accès et navigation sur le\r\n                        site (www.forum-uit.ma) supposent l'acceptation de\r\n                        l’utilisateur et son respect de l'ensemble de nos\r\n                        Conditions Générales d’utilisation décrites ci-après :\r\n                        <br />\r\n                        <h5>1. ACCESSIBILITE :</h5>\r\n                        L'accès au site (www.forum-uit.ma) est gratuit. Ce site\r\n                        est accessible 24h sur 24h et 7 jours sur 7. Cependant,\r\n                        l'équipe qui coordonne l'administration du site peut\r\n                        être amenée à interrompre le site ou une partie des\r\n                        services, notamment pour des opérations de maintenance.\r\n                        <br />\r\n                        <h5>2. LES DONNEES PERSONNELLES :</h5>\r\n                        Le site (wwww.forum-uit.ma) collecte des informations\r\n                        provenant des visiteurs du site internet au moyen de\r\n                        formulaire figurant sur ledit site internet. Les\r\n                        informations personnelles qui sont collectées, notamment\r\n                        à travers les formulaires d’inscription, ou de création\r\n                        de CV se limitent à celles qui sont nécessaires pour\r\n                        générer un CV décrivant de manière détaillée le parcours\r\n                        de l'étudiant(e) dans l'université IBN TOFAIL.\r\n                        <br />\r\n                        Par ailleurs, Vous disposez des droits suivants :\r\n                        <ul>\r\n                          <li>\r\n                            - Demander la mise à jour de vos données, si\r\n                            celles-ci sont inexactes.\r\n                          </li>\r\n                          <li>- Demander la suppression de vos données.</li>\r\n                          <li>\r\n                            - Demander la limitation du traitement de vos\r\n                            données.\r\n                          </li>\r\n                          <li>\r\n                            - Vous opposer ou retirer votre consentement à\r\n                            l’utilisation, par nos services, de vos coordonnées.\r\n                          </li>\r\n                        </ul>\r\n                        Il est important à préciser que nous mettons en place\r\n                        tous les moyens adaptés à assurer la confidentialité et\r\n                        la sécurité de vos données personnelles, de manière à\r\n                        empêcher leur endommagement, effacement ou accès par des\r\n                        tiers non autorisés. L’accès à vos données est\r\n                        strictement limité aux responsables de la gestion du\r\n                        site (WWW.forum-uit.ma). Cependant les données\r\n                        collectées pourront éventuellement être communiquées à\r\n                        des Manager d'entreprises chargés de recrutement ou\r\n                        représentant des entreprises participant dans le forum.\r\n                        Il est à préciser que dans le cadre de l’exécution de\r\n                        leurs prestations, les représentants des entreprises\r\n                        n’ont qu’un accès limité à vos données et ont une\r\n                        obligation contractuelle de les utiliser en conformité\r\n                        avec les dispositions de la législation applicable en\r\n                        matière de protection des données personnelles.\r\n                        <br />\r\n                        <h5>3. MODIFICATION DES CONDITIONS D’UTILISATION :</h5>\r\n                        L'équipe qui coordonne l'administration du site se\r\n                        réserve la possibilité de modifier, à tout moment et\r\n                        sans préavis, les Présentes Conditions d’utilisation\r\n                        afin de les adapter aux évolutions du site et/ou de son\r\n                        exploitation.\r\n                      </p>\r\n                    </Modal.Body>\r\n                  </Modal>\r\n                </Grid>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                >\r\n                  Sign Up\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item>\r\n                    <Link\r\n                      href=\"#\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        history.push(\"/login\");\r\n                      }}\r\n                      variant=\"body2\"\r\n                    >\r\n                      Already have an account? Sign in\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            </>\r\n          )}\r\n          {!successful && value === 1 && (\r\n            <>\r\n              <Typography component=\"h1\" variant=\"h5\" className={classes.typo}>\r\n                Sign up as an Enterprise Manager\r\n              </Typography>\r\n              <form\r\n                className={classes.form}\r\n                onSubmit={handleManagerSignup}\r\n                Validate\r\n              >\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      autoComplete=\"fname\"\r\n                      name=\"firstName\"\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      error={Boolean(errors?.firstName)}\r\n                      id=\"firstName\"\r\n                      label=\"First Name\"\r\n                      value={firstName\r\n                        .split(\" \")\r\n                        .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                        .join(\" \")}\r\n                      helperText={errors?.firstName}\r\n                      onChange={handleChangeFirstName}\r\n                      autoFocus\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"lastName\"\r\n                      label=\"Last Name\"\r\n                      name=\"lastName\"\r\n                      autoComplete=\"lname\"\r\n                      value={lastName\r\n                        .split(\" \")\r\n                        .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                        .join(\" \")}\r\n                      onChange={handleChangeLastName}\r\n                      error={Boolean(errors?.lastName)}\r\n                      helperText={errors?.lastName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"username\"\r\n                      label=\"Company Name\"\r\n                      name=\"companyName\"\r\n                      autoComplete=\"companyName\"\r\n                      value={companyName}\r\n                      onChange={handleChangeCompanyName}\r\n                      error={Boolean(errors?.userName)}\r\n                      helperText={errors?.userName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"username\"\r\n                      label=\"Username\"\r\n                      name=\"username\"\r\n                      autoComplete=\"username\"\r\n                      value={userName}\r\n                      onChange={handleChangeUsername}\r\n                      error={Boolean(errors?.userName)}\r\n                      helperText={errors?.userName}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email Address\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      value={email}\r\n                      onChange={handleChangeEmail}\r\n                      error={Boolean(errors?.email)}\r\n                      helperText={errors?.email}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      value={password}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      onChange={handleChangePassword}\r\n                      autoComplete=\"current-password\"\r\n                      error={Boolean(errors?.password)}\r\n                      helperText={errors?.password}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Button variant=\"primary\" onClick={() => setShow(true)}>\r\n                      <FormControlLabel\r\n                        control={\r\n                          <Checkbox value=\"allowExtraEmails\" color=\"primary\" />\r\n                        }\r\n                        label=\"j'accepte les conditions d'utilisations\"\r\n                      />\r\n                    </Button>\r\n                  </Grid>\r\n\r\n                  <Modal\r\n                    show={show}\r\n                    onHide={() => setShow(false)}\r\n                    dialogClassName=\"modal-190w\"\r\n                    aria-labelledby=\"example-custom-modal-styling-title\"\r\n                  >\r\n                    <Modal.Header closeButton>\r\n                      <Modal.Title id=\"example-custom-modal-styling-title\">\r\n                        <h3>les conditions d'utilisations</h3>\r\n                      </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                      <p>\r\n                        Vous êtes actuellement connecté(e) au Site Internet\r\n                        (www.forum-uit.ma) de La 1ère Edition du Forum Virtuel à\r\n                        L’Université Ibn Tofail. Tout accès et navigation sur le\r\n                        site (www.forum-uit.ma) supposent l'acceptation de\r\n                        l’utilisateur et son respect de l'ensemble de nos\r\n                        Conditions Générales d’utilisation décrites ci-après :\r\n                        <br />\r\n                        <h5>1. ACCESSIBILITE :</h5>\r\n                        L'accès au site (www.forum-uit.ma) est gratuit. Ce site\r\n                        est accessible 24h sur 24h et 7 jours sur 7. Cependant,\r\n                        l'équipe qui coordonne l'administration du site peut\r\n                        être amenée à interrompre le site ou une partie des\r\n                        services, notamment pour des opérations de maintenance.\r\n                        <br />\r\n                        <h5>2. LES DONNEES PERSONNELLES :</h5>\r\n                        Le site (wwww.forum-uit.ma) collecte des informations\r\n                        provenant des visiteurs du site internet au moyen de\r\n                        formulaire figurant sur ledit site internet. Les\r\n                        informations personnelles qui sont collectées, notamment\r\n                        à travers les formulaires d’inscription, ou de création\r\n                        de CV se limitent à celles qui sont nécessaires pour\r\n                        générer un CV décrivant de manière détaillée le parcours\r\n                        de l'étudiant(e) dans l'université IBN TOFAIL.\r\n                        <br />\r\n                        Par ailleurs, Vous disposez des droits suivants :\r\n                        <ul>\r\n                          <li>\r\n                            - Demander la mise à jour de vos données, si\r\n                            celles-ci sont inexactes.\r\n                          </li>\r\n                          <li>- Demander la suppression de vos données.</li>\r\n                          <li>\r\n                            - Demander la limitation du traitement de vos\r\n                            données.\r\n                          </li>\r\n                          <li>\r\n                            - Vous opposer ou retirer votre consentement à\r\n                            l’utilisation, par nos services, de vos coordonnées.\r\n                          </li>\r\n                        </ul>\r\n                        Il est important à préciser que nous mettons en place\r\n                        tous les moyens adaptés à assurer la confidentialité et\r\n                        la sécurité de vos données personnelles, de manière à\r\n                        empêcher leur endommagement, effacement ou accès par des\r\n                        tiers non autorisés. L’accès à vos données est\r\n                        strictement limité aux responsables de la gestion du\r\n                        site (WWW.forum-uit.ma). Cependant les données\r\n                        collectées pourront éventuellement être communiquées à\r\n                        des Manager d'entreprises chargés de recrutement ou\r\n                        représentant des entreprises participant dans le forum.\r\n                        Il est à préciser que dans le cadre de l’exécution de\r\n                        leurs prestations, les représentants des entreprises\r\n                        n’ont qu’un accès limité à vos données et ont une\r\n                        obligation contractuelle de les utiliser en conformité\r\n                        avec les dispositions de la législation applicable en\r\n                        matière de protection des données personnelles.\r\n                        <br />\r\n                        <h5>3. MODIFICATION DES CONDITIONS D’UTILISATION :</h5>\r\n                        L'équipe qui coordonne l'administration du site se\r\n                        réserve la possibilité de modifier, à tout moment et\r\n                        sans préavis, les Présentes Conditions d’utilisation\r\n                        afin de les adapter aux évolutions du site et/ou de son\r\n                        exploitation.\r\n                      </p>\r\n                    </Modal.Body>\r\n                  </Modal>\r\n                </Grid>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                >\r\n                  Sign Up\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item>\r\n                    <Link\r\n                      href=\"#\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        history.push(\"/login\");\r\n                      }}\r\n                      variant=\"body2\"\r\n                    >\r\n                      Already have an account? Sign in\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </form>\r\n            </>\r\n          )}\r\n        </div>\r\n        {message && (\r\n          <Alert\r\n            severity={!successful ? \"error\" : \"success\"}\r\n            onClose={() => {\r\n              setMessage(null);\r\n            }}\r\n          >\r\n            {message}\r\n          </Alert>\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Header.jsx",["428"],"import React, { useState, useEffect, initialState } from \"react\";\r\nimport \"./Header.css\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport HeaderOption from \"./HeaderOption/HeaderOption\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport DropdownMenu from \"./HeaderOption/DropdowMenu/DropdownMenu\";\r\nimport Search from \"./Search/Search\";\r\nimport SearchMenu from \"./Search/SearchMenu/SearchMenu\";\r\nimport userService from \"../../services/userService\";\r\nimport logo from \"../../logo.png\";\r\n\r\nfunction Header({ image, onChange, refreshHome }) {\r\n  const [user, setUser] = useState(initialState);\r\n  const [count, setCount] = useState(0);\r\n  useEffect(() => {\r\n    async function getUserData() {\r\n      await userService.getUserData().then((response) => {\r\n        setUser(response?.data);\r\n      });\r\n    }\r\n    getUserData();\r\n  }, [count]);\r\n  const history = useHistory();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const handleButtonClick = (pageURL) => {\r\n    history.push(pageURL);\r\n  };\r\n  const handleSearch = (e) => {\r\n    e.target.style.marginLeft = \"20px\";\r\n  };\r\n  const handleNotif = () => {\r\n    try {\r\n      userService.handleNotif();\r\n      setCount(count + 1);\r\n    } catch (err) {\r\n      // Handle Error Here\r\n      console.error(err);\r\n    }\r\n  };\r\n  const badge = user?.notifications.filter((x) => x.status === false).length;\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header_left align-items-center\">\r\n        <Link to=\"/\">\r\n          <img src={logo} alt=\"Logo\" className=\"logo\" />\r\n        </Link>\r\n        {/* SearchIcon */}\r\n        {user && !isMobile && (\r\n          <Search>\r\n            <SearchMenu />\r\n          </Search>\r\n        )}\r\n      </div>\r\n      <div className=\"header_right align-items-center\" id=\"myDiv\">\r\n        {user ? (\r\n          <>\r\n            <HeaderOption\r\n              Icon={HomeIcon}\r\n              title=\"Home\"\r\n              isMobile={isMobile}\r\n              onClick={() => {\r\n                handleNotif();\r\n                onChange(!refreshHome);\r\n              }}\r\n            />\r\n            <HeaderOption\r\n              Icon={SupervisorAccountIcon}\r\n              title=\"MyNetwork\"\r\n              isMobile={isMobile}\r\n              onClick={handleNotif}\r\n            />\r\n            <HeaderOption\r\n              Icon={ChatIcon}\r\n              title=\"Messages\"\r\n              isMobile={isMobile}\r\n              onClick={handleNotif}\r\n            />\r\n            <HeaderOption\r\n              Icon={NotificationsIcon}\r\n              title=\"Notifications\"\r\n              isMobile={isMobile}\r\n              badge={badge}\r\n              onClick={handleNotif}\r\n            />\r\n            <HeaderOption\r\n              image={\r\n                user?.roles[0]?.id === 1\r\n                  ? userService.imageLink + user?.cv?.image\r\n                  : userService.imageLink + user?.company?.companyImage\r\n              }\r\n              className=\"wrapper button\"\r\n              title={\"@\" + user?.username.split(\" \")[0]}\r\n              titleIcon={<ArrowDropDownIcon />}\r\n              isMobile={isMobile}\r\n            >\r\n              <DropdownMenu image={image} user={user} />\r\n            </HeaderOption>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Button\r\n              variant=\"contained\"\r\n              className=\"button\"\r\n              onClick={() => handleButtonClick(\"/login\", true)}\r\n            >\r\n              LOG IN\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              className=\"button\"\r\n              onClick={() => handleButtonClick(\"/register\")}\r\n            >\r\n              REGISTER\r\n            </Button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Dashboard.jsx",["429","430","431"],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Messages.jsx",["432","433"],"import React, { useState, useEffect } from 'react'\r\nimport userService from '../../services/userService';\r\nimport Feed from './Feed/Feed'\r\nimport styles from './Messages.module.css'\r\nimport Sidebar from './Sidebar/Sidebar'\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction Messages(props) {\r\n    const [data, setData] = useState([])\r\n    const [name, setName] = useState(\"\")\r\n    const [date, setDate] = useState(\"\")\r\n    const [img, setImage] = useState(\"\")\r\n    const [id, setId] = useState(-1)\r\n    const [forceId, setForceId] = useState(parseInt(useParams().id))\r\n    const [isNew, setIsNew] = useState(true)\r\n    const handleActive = (id, namex, datex, imgx) => {\r\n        setId(id)\r\n        setName(namex)\r\n        const datexx = new Date(datex)\r\n        const dt = datexx.toLocaleTimeString()\r\n        setDate(dt)\r\n        setImage(imgx)\r\n        setIsNew(false)\r\n        setForceId(false)\r\n    }\r\n    useEffect(() => {\r\n        async function getConversations() {\r\n            await userService.getAllConversations().then((response) => {\r\n                const datax = response.data\r\n                if (forceId) {\r\n                    const current = datax.find(conversation => { return (conversation.id == forceId) })\r\n                    setId(current.id)\r\n                    setName(current?.username)\r\n                    setDate(current?.date)\r\n                    setImage(current.img)\r\n                    setIsNew(false)\r\n                }\r\n                setData(datax);\r\n            },\r\n                (error) => {\r\n                    console.log(error)\r\n                });\r\n        }\r\n        getConversations();\r\n    }, []);\r\n    return (\r\n        <div className={styles.container}>\r\n            <Sidebar forceId={forceId} data={data} NewConversation={() => { setIsNew(true) }} setActive={(id, namex, datex, imgx) => handleActive(id, namex, datex, imgx)} />\r\n            <Feed id={id} isNew={isNew} name={name} date={date} img={img} user={props.user} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\SinglePost\\SinglePostMain.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation2.jsx",["434","435"],"import React,{useRef} from 'react';\r\nimport {\r\n  Nav,\r\n  NavLink,\r\n  NavLink2,\r\n  NavLink3,\r\n  Bars,\r\n  NavMenu,\r\n  NavBtn,\r\n  NavBtnLink,\r\n  Collapse,\r\n  CollapseItem,\r\n  CollapseItem2,\r\n  Offset\r\n} from './NavbarElements';\r\nimport logo from \"../../logo.png\";\r\nimport Welcome from './Presentation Children/welcome';\r\nimport Footer from './Presentation Children/Footer';\r\nimport Team from './Presentation Children/Team';\r\nimport ContactUs from './Presentation Children/ContactUs';\r\nconst Navbar = () => {\r\n  const ref = useRef(null);\r\n  const handleClick=()=>{\r\n        if(ref.current.style.opacity==1)\r\n        {\r\n             ref.current.style.opacity=0\r\n        }\r\n        else\r\n        {\r\n            ref.current.style.opacity=1\r\n\r\n        }\r\n        \r\n        console.log(ref.current.style.opacity)\r\n  }\r\n  return (\r\n    <div className=\"d-flex flex-wrap\">\r\n      <Nav>\r\n        <NavLink3 to='/'>\r\n          <img src={logo} className=\"logo\" alt='logo' />\r\n        </NavLink3>\r\n        <Bars onClick={handleClick}/>\r\n        <NavMenu>\r\n          <NavLink href={`${window.location.pathname}#home`} activeStyle>\r\n            Accueil\r\n          </NavLink>\r\n          <NavLink  href={`${window.location.pathname}#about1`}  activeStyle>\r\n            Presentation\r\n          </NavLink>\r\n          <NavLink href={`${window.location.pathname}#our-values`} activeStyle>\r\n            Espaces\r\n          </NavLink>\r\n          <NavLink href={`${window.location.pathname}#clients`} activeStyle>\r\n            Partenaires\r\n          </NavLink>\r\n          <NavLink href={`${window.location.pathname}#team`} activeStyle>\r\n            Team\r\n          </NavLink>\r\n          <NavLink href={`${window.location.pathname}#contact-us`} activeStyle>\r\n            Contactez nous\r\n          </NavLink>\r\n          <NavLink2 to='/register' activeStyle>\r\n            S'inscrire\r\n          </NavLink2>\r\n          \r\n          \r\n          {/* Second Nav */}\r\n          {/* <NavBtnLink to='/sign-in'>Sign In</NavBtnLink> */}\r\n        </NavMenu>\r\n        <NavBtn>\r\n          <NavBtnLink to='/login'>Se connecter</NavBtnLink>\r\n        </NavBtn>\r\n      </Nav>\r\n      <Collapse ref={ref}>\r\n       <CollapseItem href={`${window.location.pathname}#home`}>\r\n        Accueil\r\n       </CollapseItem>\r\n       <CollapseItem href={`${window.location.pathname}#about1`}>\r\n       Presentation\r\n       </CollapseItem>\r\n       <CollapseItem href={`${window.location.pathname}#our-values`}>\r\n       Espaces\r\n       </CollapseItem>\r\n       <CollapseItem href={`${window.location.pathname}#clients`} >\r\n       Partenaires\r\n       </CollapseItem>\r\n        <CollapseItem href={`${window.location.pathname}#team`}>\r\n        Team\r\n       </CollapseItem>\r\n        <CollapseItem href={`${window.location.pathname}#contact-us`} >\r\n        Contactez-nous\r\n       </CollapseItem>\r\n       <CollapseItem2 to='/register'>\r\n        S'inscrire\r\n       </CollapseItem2>\r\n       <CollapseItem2 to='/login'>\r\n        Se connecter\r\n       </CollapseItem2>\r\n\r\n      </Collapse>\r\n      <Welcome className=\"test\"/>\r\n      <Team/>\r\n      <ContactUs/>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\Cv.jsx",["436","437","438","439","440","441","442","443","444","445","446","447","448"],"import Navbar from \"./cv/Navbar\";\r\nimport \"../js/cv\";\r\nimport About from \"./cv/About\";\r\nimport AboutCompany from \"./company/About\";\r\nimport Nav from \"./company/Nav\";\r\nimport Education from \"./cv/Education\";\r\nimport Experience from \"./cv/Experience\";\r\nimport Skill from \"./cv/Skill\";\r\nimport Interests from \"./cv/Interest\";\r\nimport Award from \"./cv/Award\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport userService from \"../../../services/userService\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"react-icons/fa\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport EditAbout from \"./EditCv/EditAbout\";\r\nimport EditExperience from \"./EditCv/EditExperience\";\r\nimport EditEducation from \"./EditCv/EditEducation\";\r\nimport EditDevLanguages from \"./EditCv/EditDevLanguages\";\r\nimport EditNormalLanguages from \"./EditCv/EditNormalLanguages\";\r\nimport EditSoftware from \"./EditCv/EditSoftware\";\r\nimport EditAwards from \"./EditCv/EditAwards\";\r\nimport BootAccordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport EditAboutCompany from \"./EditCompany/EditAboutCompany\";\r\nimport EditImage from \"./EditCv/EditImage\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport \"./Cv.css\";\r\n\r\n// import EditSkills from \"./Edit Cv/EditSkills\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    color: \"#fff\",\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n    borderRadius: \"30px\",\r\n  },\r\n}));\r\n\r\nconst Cv = (props) => {\r\n  const history = useHistory();\r\n  const [currentUserId, setCurrentUserId] = useState();\r\n  const [currentUserRole, setCurrentUserRole] = useState();\r\n  const [isFriend, setIsFriend] = useState(-1);\r\n  const [cv, setCv] = useState({});\r\n  const [company, setCompany] = useState({});\r\n  const [email, setEmail] = useState(\"\");\r\n  const [role, setRole] = useState();\r\n  const [flag, setFlag] = useState(false);\r\n  const { id } = useParams();\r\n  const [data, setData] = useState({});\r\n  const [toggle, setToggle] = useState(false);\r\n  const [image, setImage] = useState();\r\n  const [count, setCount] = useState(0);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const classes = useStyles();\r\n  const [isExperience, setIsExperience] = useState(true);\r\n  const [switchState, setSwitchState] = useState(true);\r\n  const handleSwitchChange = () => {\r\n    if (switchState) {\r\n      userService.unpriveCv(currentUserId).then((res) => {\r\n        setSwitchState(!switchState);\r\n      });\r\n    } else {\r\n      userService.priveCv(currentUserId).then((res) => {\r\n        setSwitchState(!switchState);\r\n      });\r\n    }\r\n  };\r\n\r\n  const connectTo = async () => {\r\n    try {\r\n      const resp = await userService.connectTo(id);\r\n      setCount(count + 1);\r\n    } catch (err) {\r\n      // Handle Error Here\r\n      console.error(err);\r\n    }\r\n  };\r\n  const disconnect = async () => {\r\n    try {\r\n      await userService.disconnect(id).then((response) => {\r\n        setCount(count + 1);\r\n        window.location.reload();\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  const handleMessage = () => {\r\n    history.push(`/Messages/${id}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function getUserById() {\r\n      await userService.getUserById(id).then((response) => {\r\n        setCv(response?.data?.cv);\r\n        if (response?.data?.cv?.experiences.length === 0) {\r\n          setIsExperience(false);\r\n        }\r\n        setData(response?.data);\r\n        setSwitchState(response?.data?.cv?.prive);\r\n        setCompany(response?.data?.company);\r\n        setEmail(response?.data?.email);\r\n        setRole(response?.data?.roles[0]?.id);\r\n        if (response?.data?.roles[0]?.id === 1) {\r\n          setImage(userService.imageLink + response?.data?.cv?.image);\r\n        }\r\n        if (response?.data?.roles[0]?.id === 3) {\r\n          setImage(\r\n            userService.imageLink + response?.data?.company?.companyImage\r\n          );\r\n        }\r\n        setFlag(response?.data?.cv?.flag || response?.data?.company?.flag);\r\n        setToggle(false);\r\n      });\r\n    }\r\n    getUserById();\r\n    async function getUserData() {\r\n      await userService.getUserData().then((response) => {\r\n        setCurrentUserId(response?.data?.id);\r\n        setCurrentUserRole(response?.data?.roles[0]?.id);\r\n        response?.data?.friendshipSended.forEach((friendship) => {\r\n          if (friendship.id.receiverId == id) {\r\n            if (friendship.status === false) {\r\n              setIsFriend(0);\r\n            } else {\r\n              setIsFriend(1);\r\n            }\r\n          }\r\n        });\r\n        response?.data?.friendshipReceived.forEach((friendship) => {\r\n          if (friendship.id.senderId == id) {\r\n            if (friendship.status === false) {\r\n              setIsFriend(0);\r\n            } else {\r\n              setIsFriend(1);\r\n            }\r\n          }\r\n        });\r\n      });\r\n    }\r\n    getUserData();\r\n    async function sendViewNotif() {\r\n      if (\r\n        currentUserId != id &&\r\n        currentUserRole == 3 &&\r\n        role==1 \r\n      ) {\r\n        await userService.sendViewNotification(id, currentUserId);\r\n      }\r\n    }\r\n    sendViewNotif();\r\n    if (currentUserId != id ) {\r\n      function viewProfile() {\r\n        userService.viewProfile(currentUserId, id);\r\n      }\r\n      viewProfile();\r\n    }\r\n  }, [count, currentUserRole, toggle,role]);\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size={role === 1 ? \"xl\" : \"lg\"}\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Editing Profile\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className={classes.root}>\r\n            <Accordion>\r\n              <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n                className=\"bg-dark text-white\"\r\n              >\r\n                <Typography className={classes.heading}>Edit Image</Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <EditImage\r\n                  data={data}\r\n                  role={data?.roles[0]?.id}\r\n                  toggle={toggle}\r\n                  onChange={(value) => {\r\n                    setToggle(value);\r\n                    setModalShow(false);\r\n                  }}\r\n                />\r\n              </AccordionDetails>\r\n            </Accordion>\r\n            <Accordion>\r\n              <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n                className=\"bg-dark text-white\"\r\n              >\r\n                <Typography className={classes.heading}>\r\n                  Edit About Section\r\n                </Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                {role === 1 && (\r\n                  <EditAbout\r\n                    data={data?.cv?.about}\r\n                    id={id}\r\n                    toggle={toggle}\r\n                    onChange={(value) => {\r\n                      setToggle(value);\r\n                      setModalShow(false);\r\n                    }}\r\n                  />\r\n                )}\r\n                {role === 3 && (\r\n                  <EditAboutCompany\r\n                    data={data?.company?.aboutCompany}\r\n                    id={data?.id}\r\n                    toggle={toggle}\r\n                    onChange={(value) => {\r\n                      setToggle(value);\r\n                      setModalShow(false);\r\n                    }}\r\n                  />\r\n                )}\r\n              </AccordionDetails>\r\n            </Accordion>\r\n            {role === 1 && (\r\n              <>\r\n                <Accordion>\r\n                  <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    className=\"bg-dark text-white\"\r\n                  >\r\n                    <Typography className={classes.heading}>\r\n                      Edit Experience Section\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <EditExperience\r\n                      data={data}\r\n                      id={id}\r\n                      toggle={toggle}\r\n                      onChange={(value) => {\r\n                        setToggle(value);\r\n                        setModalShow(false);\r\n                      }}\r\n                    />\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n                <Accordion>\r\n                  <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    className=\"bg-dark text-white\"\r\n                  >\r\n                    <Typography className={classes.heading}>\r\n                      Edit Education Section\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <EditEducation\r\n                      toggle={toggle}\r\n                      onChange={(value) => {\r\n                        setToggle(value);\r\n                        setModalShow(false);\r\n                      }}\r\n                    />\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n                <Accordion>\r\n                  <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    className=\"bg-dark text-white\"\r\n                  >\r\n                    <Typography className={classes.heading}>\r\n                      Edit Skills Section\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <BootAccordion\r\n                      defaultActiveKey=\"0\"\r\n                      className=\"w-100 align-items-center\"\r\n                    >\r\n                      <BootAccordion.Toggle\r\n                        as={Button}\r\n                        variant=\"link\"\r\n                        eventKey=\"0\"\r\n                      >\r\n                        Dev Languages\r\n                      </BootAccordion.Toggle>\r\n                      <BootAccordion.Toggle\r\n                        as={Button}\r\n                        variant=\"link\"\r\n                        eventKey=\"1\"\r\n                      >\r\n                        Language\r\n                      </BootAccordion.Toggle>\r\n                      <BootAccordion.Toggle\r\n                        as={Button}\r\n                        variant=\"link\"\r\n                        eventKey=\"2\"\r\n                      >\r\n                        Softwares\r\n                      </BootAccordion.Toggle>\r\n                      <BootAccordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n                          <EditDevLanguages\r\n                            toggle={toggle}\r\n                            onChange={(value) => {\r\n                              setToggle(value);\r\n                              setModalShow(false);\r\n                            }}\r\n                          />\r\n                        </Card.Body>\r\n                      </BootAccordion.Collapse>\r\n\r\n                      <BootAccordion.Collapse eventKey=\"1\">\r\n                        <Card.Body>\r\n                          <EditNormalLanguages\r\n                            toggle={toggle}\r\n                            onChange={(value) => {\r\n                              setToggle(value);\r\n                              setModalShow(false);\r\n                            }}\r\n                          />\r\n                        </Card.Body>\r\n                      </BootAccordion.Collapse>\r\n\r\n                      <BootAccordion.Collapse eventKey=\"2\">\r\n                        <Card.Body>\r\n                          <EditSoftware\r\n                            toggle={toggle}\r\n                            onChange={(value) => {\r\n                              setToggle(value);\r\n                              setModalShow(false);\r\n                            }}\r\n                          />\r\n                        </Card.Body>\r\n                      </BootAccordion.Collapse>\r\n                    </BootAccordion>\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n                <Accordion>\r\n                  <AccordionSummary\r\n                    expandIcon={<ExpandMoreIcon style={{ color: \"white\" }} />}\r\n                    aria-controls=\"panel1a-content\"\r\n                    id=\"panel1a-header\"\r\n                    className=\"bg-dark text-white\"\r\n                  >\r\n                    <Typography className={classes.heading}>\r\n                      Edit Awards Section\r\n                    </Typography>\r\n                  </AccordionSummary>\r\n                  <AccordionDetails>\r\n                    <EditAwards data={data} />\r\n                  </AccordionDetails>\r\n                </Accordion>\r\n              </>\r\n            )}\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {flag && (\r\n        <div className=\"cv_body\">\r\n          <MyVerticallyCenteredModal\r\n            show={modalShow}\r\n            onHide={() => {\r\n              setModalShow(false);\r\n              setToggle(!toggle);\r\n            }}\r\n          />\r\n          {role === 1 && (\r\n            <div id=\"page-top\">\r\n              <Navbar image={image} isExperience={isExperience} />\r\n              {/* Page Content*/}\r\n              <div className=\"container-fluid p-0\">\r\n                <hr className=\"m-0 pt-5 mr-3\" />\r\n                {/* {props.id === currentUserId && <Edit data={data} />} */}\r\n                <div className=\"d-flex flex-row-reverse mr-5\">\r\n                  {currentUserId == id ? (\r\n                    <>\r\n                      <Button\r\n                        onClick={() => setModalShow(true)}\r\n                        variant=\"contained\"\r\n                        size=\"medium\"\r\n                        style={{\r\n                          position: \"fixed\",\r\n                          top: \"18vh\",\r\n                          right: \"2vw\",\r\n                        }}\r\n                        startIcon={\r\n                          <EditIcon\r\n                            style={{\r\n                              maxWidth: \"30px\",\r\n                              maxHeight: \"30px\",\r\n                              minWidth: \"30px\",\r\n                              minHeight: \"30px\",\r\n                            }}\r\n                          />\r\n                        }\r\n                      >\r\n                        Edit Your Profile\r\n                      </Button>\r\n                      <Tooltip title=\"En mode privé, vos informations et vos postes ne sont pas visibles aux étudiants inconnus\">\r\n                        <FormControlLabel\r\n                          style={{\r\n                            position: \"fixed\",\r\n                            top: \"28vh\",\r\n                            right: \"5vw\",\r\n                          }}\r\n                          control={\r\n                            <Switch\r\n                              checked={switchState}\r\n                              onChange={handleSwitchChange}\r\n                              color=\"primary\"\r\n                            />\r\n                          }\r\n                          label=\"Mode privé\"\r\n                        />\r\n                      </Tooltip>\r\n                    </>\r\n                  ) : (\r\n                    <div\r\n                      className=\"buttons d-flex\"\r\n                      style={{ position: \"fixed\", top: \"18vh\", right: \"2vw\" }}\r\n                    >\r\n                      {isFriend === 1 && (\r\n                        <>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"danger\"\r\n                            className={classes.button}\r\n                            onClick={disconnect}\r\n                          >\r\n                            Disconnect\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleMessage}\r\n                            className={classes.button}\r\n                            endIcon={<SendIcon />}\r\n                          >\r\n                            Message\r\n                          </Button>\r\n                        </>\r\n                      )}\r\n                      {isFriend === 0 && (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disabled\r\n                          className={classes.button}\r\n                        >\r\n                          Sent\r\n                        </Button>\r\n                      )}\r\n                      {isFriend === -1 && (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"primary\"\r\n                          className={classes.button}\r\n                          onClick={connectTo}\r\n                        >\r\n                          Connect\r\n                        </Button>\r\n                      )}\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        endIcon={<MoreHorizIcon />}\r\n                      >\r\n                        More\r\n                      </Button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                {/* About*/}\r\n\r\n                {currentUserId != id &&\r\n                switchState &&\r\n                currentUserRole == 1 &&\r\n                isFriend != 1 ? (\r\n                  <h2>Cet utilisateur a un profil privé</h2>\r\n                ) : (\r\n                  <>\r\n                    {\" \"}\r\n                    <About data={data} email={email} />\r\n                    {isExperience && (\r\n                      <>\r\n                        <hr className=\"m-0\" />\r\n                        {/* Experience*/}\r\n                        <Experience data={cv?.experiences} />\r\n                      </>\r\n                    )}\r\n                    <hr className=\"m-0\" />\r\n                    {/* Education*/}\r\n                    <Education data={cv?.educations} />\r\n                    <hr className=\"m-0\" />\r\n                    {/* Skills*/}\r\n                    <Skill\r\n                      dev={cv?.devLanguages}\r\n                      normal={cv?.normalLanguages}\r\n                      software={cv?.softwares}\r\n                    />\r\n                    <hr className=\"m-0\" />\r\n                    {/* Interests*/}\r\n                    <Interests data={cv?.about?.interests} />\r\n                    <hr className=\"m-0\" />\r\n                    {/* Awards*/}\r\n                    {cv?.awards.length !== 0 && <Award data={cv?.awards} />}\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {role === 3 && (\r\n            <div id=\"page-top\">\r\n              {currentUserId == id ? (\r\n                <Button\r\n                  onClick={() => setModalShow(true)}\r\n                  variant=\"contained\"\r\n                  size=\"medium\"\r\n                  style={{ position: \"fixed\", top: \"18vh\", right: \"2vw\" }}\r\n                  startIcon={\r\n                    <EditIcon\r\n                      style={{\r\n                        maxWidth: \"30px\",\r\n                        maxHeight: \"30px\",\r\n                        minWidth: \"30px\",\r\n                        minHeight: \"30px\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  Edit Your Profile\r\n                </Button>\r\n              ) : (\r\n                <div\r\n                  className=\"buttons d-flex\"\r\n                  style={{ position: \"fixed\", top: \"18vh\", right: \"2vw\" }}\r\n                >\r\n                  {isFriend === 1 && (\r\n                    <>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"danger\"\r\n                        className={classes.button}\r\n                        onClick={disconnect}\r\n                      >\r\n                        Disconnect\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        endIcon={<SendIcon />}\r\n                        onClick={handleMessage}\r\n                      >\r\n                        Message\r\n                      </Button>\r\n                    </>\r\n                  )}\r\n                  {isFriend === 0 && (\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      disabled\r\n                      className={classes.button}\r\n                      onClick={connectTo}\r\n                    >\r\n                      Sent\r\n                    </Button>\r\n                  )}\r\n                  {isFriend === -1 && (\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      onClick={connectTo}\r\n                    >\r\n                      Connect\r\n                    </Button>\r\n                  )}\r\n\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    className={classes.button}\r\n                    endIcon={<MoreHorizIcon />}\r\n                  >\r\n                    More\r\n                  </Button>\r\n                </div>\r\n              )}\r\n              <Nav id={id} image={image} />\r\n              <AboutCompany data={company} email={email} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Cv;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\services\\authService.js",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\Feed.jsx",["449","450","451","452","453","454","455","456","457","458","459","460","461"],"import React, { useState, useEffect, initialState, useRef } from \"react\";\r\nimport \"./Feed.css\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport InputOption from \"./InputOption/InputOption\";\r\nimport PhotoIcon from \"@material-ui/icons/Photo\";\r\nimport PostAddIcon from \"@material-ui/icons/PostAdd\";\r\nimport Post from \"./Post/Post\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../services/authHeader\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Shimmer from \"react-shimmer-effect\";\r\nimport userService from \"../../../services/userService\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  button: {\r\n    border: \"none\",\r\n    outline: \"none\",\r\n  },\r\n  container: {\r\n    border: \"0px solid rgba(255, 255, 255, 1)\",\r\n    boxShadow: \"0px 0px 20px rgba(0, 0, 0, .1)\",\r\n    borderRadius: \"4px\",\r\n    backgroundColor: \"white\",\r\n    display: \"flex\",\r\n    padding: \"16px\",\r\n    width: \"100%\",\r\n    marginBottom: \"20px\",\r\n  },\r\n  circle: {\r\n    height: \"56px\",\r\n    width: \"56px\",\r\n    borderRadius: \"50%\",\r\n  },\r\n  line: {\r\n    width: \"15%\",\r\n    height: \"8px\",\r\n    alignSelf: \"center\",\r\n    marginLeft: \"16px\",\r\n    borderRadius: \"8px\",\r\n  },\r\n  longline: {\r\n    width: \"60%\",\r\n    height: \"8px\",\r\n    alignSelf: \"center\",\r\n    marginLeft: \"16px\",\r\n    borderRadius: \"8px\",\r\n  },\r\n  break: {\r\n    flexBasis: \"100%\",\r\n    width: \"0px\",\r\n    height: \"0px\",\r\n    overflow: \"hidden\",\r\n  },\r\n  content: {\r\n    width: \"100%\",\r\n    height: \"8px\",\r\n    alignSelf: \"center\",\r\n    marginLeft: \"16px\",\r\n    borderRadius: \"8px\",\r\n  },\r\n}));\r\n\r\nconst postsPerPage = 10;\r\nlet arrayForHoldingPosts = [];\r\n\r\nfunction Feed(props) {\r\n  const [input, setInput] = useState(\"\");\r\n  const [posts, setPosts] = useState([]);\r\n  const [res, setRes] = useState([]);\r\n  const user = props?.user;\r\n  const image = props?.image;\r\n\r\n  const [message, setMessage] = useState(initialState);\r\n  const [successful, setSuccessful] = useState(initialState);\r\n  const [refresh, setRefresh] = useState(false);\r\n  //const [loaded, setLoaded] = useState(false); // bash toggle shimmer\r\n\r\n  //if < 10 posts makibansh l button\r\n  const [toggleLoadMore, setToggleLoadMore] = useState(false);\r\n\r\n  const [childLoaderRefresh, setChildLoaderRefresh] = useState(false);\r\n\r\n  const [postsToShow, setPostsToShow] = useState([]);\r\n  const [count, setCount] = useState(1);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  //start img\r\n\r\n  const fileInputRef = useRef(null);\r\n  const uploadRef = useRef(null);\r\n  const [newImage, setNewImage] = useState(null);\r\n  const [fileType, setFileType] = useState(initialState);\r\n  const [fileContent, setFileContent] = useState([]);\r\n\r\n  const onChange = (e) => {\r\n    setFileContent(e.target.files[0]);\r\n    setFileType(e.target.files[0].type.split(\"/\")[1]);\r\n    // if (e.target.files && e.target.files[0]) {\r\n    //   let img = e.target.files[0];\r\n    //   setNewImage(URL.createObjectURL(img));\r\n    // }\r\n    setNewImage(URL.createObjectURL(e.target.files[0]));\r\n  };\r\n  const fileUpload = async (imageNameCounter) => {\r\n    const url = userService.uploadImageUrl;\r\n    const formData = new FormData();\r\n    const myRenamedFile = new File(\r\n      [fileContent],\r\n      \"post\" + imageNameCounter + \".\" + fileType\r\n    );\r\n    formData.append(\"file\", myRenamedFile);\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${authHeader()}`,\r\n        \"content-type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n    return axios.post(url, formData, config);\r\n  };\r\n  const handleClick = (e) => {\r\n    fileUpload();\r\n  };\r\n  const triggerInputFile = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n  const clearImage = () => {\r\n    setFileContent(null);\r\n    setFileType(null);\r\n    setNewImage(null);\r\n  };\r\n\r\n  const loadingSpinner = async () => {\r\n    setLoading(true);\r\n    setRefresh(!refresh);\r\n    clearImage();\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1500);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  // fin img\r\n\r\n  //traitement showing posts\r\n  const loopThroughPosts = (count) => {\r\n    for (\r\n      let i = count * postsPerPage - postsPerPage;\r\n      i < postsPerPage * count;\r\n      i++\r\n    ) {\r\n      if (posts[i] !== undefined) {\r\n        arrayForHoldingPosts.push(posts[i]);\r\n      }\r\n    }\r\n    setPostsToShow(arrayForHoldingPosts);\r\n  };\r\n  useEffect(() => {\r\n    setCount((prevCount) => prevCount + 1);\r\n    loopThroughPosts(count);\r\n  }, []);\r\n\r\n  const handleShowMorePosts = () => {\r\n    setCount((prevCount) => prevCount + 1);\r\n    loopThroughPosts(count);\r\n  };\r\n\r\n  //snackbar\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    const keyCode = e.which || e.keyCode;\r\n    if (keyCode === 13 && !e.shiftKey) {\r\n      e.preventDefault();\r\n      uploadPost();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getPosts = async () => {\r\n      let result;\r\n      if (user?.roles[0]?.id == 1) {\r\n        result = await userService.getNonPrivatePosts();\r\n      } else {\r\n        result = await userService.getPosts();\r\n      }\r\n      setRes(result?.data);\r\n      setTimeout(() => {\r\n        // setLoaded(true);\r\n        if (result?.data?.length > 10) {\r\n          setToggleLoadMore(true);\r\n        }\r\n      }, 500);\r\n\r\n      arrayForHoldingPosts = result?.data?.slice(0, 10);\r\n      setPostsToShow(res?.slice(0, 10));\r\n    };\r\n    getPosts();\r\n  }, [refresh]);\r\n\r\n  useEffect(() => {\r\n    setPosts(res);\r\n    setPostsToShow(res?.slice(0, 10));\r\n  }, [res]);\r\n\r\n  useEffect(() => {\r\n    loadingSpinner();\r\n  }, [childLoaderRefresh, props?.refreshHome]);\r\n\r\n  const uploadPost = () => {\r\n    const errors = [];\r\n    if (input.length === 0) errors.push(\"Message cannot be empty.\\n\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setSuccessful(false);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    let post = {\r\n      message: input,\r\n      role: user?.roles[0]?.id,\r\n      domaine: user?.cv?.about?.domaine,\r\n    };\r\n    if (newImage) {\r\n      post.imageType = fileType;\r\n    }\r\n\r\n    if (user?.roles[0]?.id === 1) {\r\n      userService.uploadStudentPost(post).then(\r\n        (response) => {\r\n          if (newImage) {\r\n            fileUpload(response?.data);\r\n          }\r\n          setSuccessful(true);\r\n          setMessage(\"Message uploaded!\");\r\n          setOpen(true);\r\n          loadingSpinner();\r\n          // window.location.reload();\r\n          setInput(\"\");\r\n        },\r\n        (error) => {\r\n          setSuccessful(false);\r\n          setMessage(\"Couldn't upload message\");\r\n          setOpen(true);\r\n        }\r\n      );\r\n    } else if (user?.roles[0]?.id === 3) {\r\n      userService.uploadCompanyPost(post).then(\r\n        (response) => {\r\n          if (newImage) {\r\n            fileUpload(response?.data);\r\n          }\r\n          setSuccessful(true);\r\n          setMessage(\"Message uploaded!\");\r\n          setOpen(true);\r\n          loadingSpinner();\r\n          // window.location.reload();\r\n          setInput(\"\");\r\n        },\r\n        (error) => {\r\n          setSuccessful(false);\r\n          setMessage(\"Couldn't upload message\");\r\n          setOpen(true);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"feed\">\r\n      {loading && (\r\n        <Loader\r\n          type=\"Oval\"\r\n          // color=\"rgb(63, 63, 63)\"\r\n          color=\"#6573c3\"\r\n          height={30}\r\n          width={30}\r\n          timeout={1500}\r\n          className=\"loading_spinner\"\r\n        />\r\n      )}\r\n      {!loading && (\r\n        <div className=\"feed\">\r\n          {user?.roles[0]?.id != 2 && (\r\n            <div className=\"feed_inputContainer\">\r\n              <div className=\"feed_input\">\r\n                <CreateIcon />\r\n                <form>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    style={{ cursor: \"text\", fontSize: \"18px\" }}\r\n                    placeholder=\"De quoi voulez-vous parler?\"\r\n                    onKeyDown={handleKeyDown}\r\n                  />\r\n                </form>\r\n              </div>\r\n              {newImage && (\r\n                <div>\r\n                  <img\r\n                    className=\"mx-auto d-block rounded border border-dark\"\r\n                    src={newImage}\r\n                    style={{\r\n                      maxHeight: \"90%\",\r\n                      maxWidth: \"90%\",\r\n                      margin: \"10px 10px\",\r\n                    }}\r\n                    alt=\"a\"\r\n                  />\r\n                </div>\r\n              )}\r\n              <div className=\"feed_inputOptions\">\r\n                <InputOption\r\n                  Icon={PhotoIcon}\r\n                  title=\"Photo\"\r\n                  color=\"#7085F9\"\r\n                  onClick={triggerInputFile}\r\n                />\r\n                <div class=\"form-group mb-2 d-none\">\r\n                  <label\r\n                    for=\"file-upload\"\r\n                    className=\"btn btn-outline-dark mt-2 \"\r\n                  >\r\n                    <i class=\"fas fa-upload\"></i>Choose File\r\n                  </label>\r\n                  <input\r\n                    type=\"file\"\r\n                    id=\"file-upload\"\r\n                    className=\"d-none\"\r\n                    accept=\".jpeg,.png,.jpg,.tif,.svg,.jfif\"\r\n                    ref={fileInputRef}\r\n                    onChange={onChange}\r\n                  />\r\n                  <Button\r\n                    className=\"MuiButton-sizeSmall MuiButton-textPrimary mt-2\"\r\n                    variant=\"outlined\"\r\n                    ref={uploadRef}\r\n                    onClick={(e) => {\r\n                      handleClick(e);\r\n                    }}\r\n                  >\r\n                    UPLOAD\r\n                  </Button>\r\n                </div>\r\n                {newImage && (\r\n                  <IconButton\r\n                    aria-label=\"delete\"\r\n                    className={classes.margin}\r\n                    onClick={clearImage}\r\n                  >\r\n                    <CloseIcon backgroundColor=\"gray\" fontSize=\"large\" />\r\n                  </IconButton>\r\n                )}\r\n                <InputOption\r\n                  Icon={PostAddIcon}\r\n                  title=\"Post\"\r\n                  color=\"green\"\r\n                  onClick={uploadPost}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n          <div className=\"feed_PostContainer\">\r\n            {/* {!loaded && ( // shimmer part\r\n              <>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                    <div className={classes.longline} />\r\n                  </Shimmer>\r\n                </div>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                    <div className={classes.longline} />\r\n                  </Shimmer>\r\n                </div>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                    <div className={classes.longline} />\r\n                  </Shimmer>\r\n                </div>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                    <div className={classes.longline} />\r\n                  </Shimmer>\r\n                </div>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                    <div className={classes.longline} />\r\n                  </Shimmer>\r\n                </div>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                    <div className={classes.longline} />\r\n                  </Shimmer>\r\n                </div>\r\n                <div className={classes.container}>\r\n                  <Shimmer>\r\n                    <div className={classes.circle} />\r\n                    <div className={classes.line} />\r\n                  </Shimmer>\r\n                </div>\r\n              </>\r\n            )} */}\r\n            {/* {loaded && */}\r\n            {postsToShow?.map((e, key) => (\r\n              <Post\r\n                key={key}\r\n                user={user}\r\n                postId={e?.id}\r\n                message={e?.message}\r\n                timestamp={e?.updatedAt.substring(0, 10)}\r\n                username={e?.ownerUsername}\r\n                name={e?.ownerName}\r\n                role={e?.role}\r\n                ownerId={e?.ownersId}\r\n                refresh={refresh}\r\n                currentUserId={user?.id}\r\n                ownerImage={image}\r\n                imageType={e?.imageType}\r\n                onChange={(value) => setChildLoaderRefresh(value)}\r\n              />\r\n            ))}\r\n          </div>\r\n          {toggleLoadMore && postsToShow.length != res.length && (\r\n            <Button\r\n              size=\"small\"\r\n              variant=\"contained\"\r\n              onClick={handleShowMorePosts}\r\n            >\r\n              Load more\r\n            </Button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\StudentProfile.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\CompanyProfile.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Charts.jsx",[],["462","463"],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Messages.jsx",["464","465","466"],"import React, { useEffect, useState } from \"react\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Title from \"./Title\";\r\nimport axios from \"axios\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport userService from \"../../services/userService\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function Messages() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [messages, setMessages] = useState();\r\n  const [count, setCount] = useState(0);\r\n  const handleDelete = async (id) => {\r\n    setLoading(true);\r\n    await userService.deleteMessage(id).then((response) => {\r\n      setCount(count + 1);\r\n    });\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function getAll() {\r\n      await userService.getDashMessages().then((response) => {\r\n        setMessages(response?.data);\r\n      });\r\n    }\r\n    getAll();\r\n  }, [count]);\r\n  return (\r\n    <React.Fragment>\r\n      <Title>All Messages</Title>\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Id</TableCell>\r\n            <TableCell>Name</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Message</TableCell>\r\n            <TableCell align=\"center\">Delete</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {messages?.map((message) => (\r\n            <TableRow key={message.id}>\r\n              <TableCell>{message.id}</TableCell>\r\n              <TableCell>{message.name}</TableCell>\r\n              <TableCell>{message.email}</TableCell>\r\n              <TableCell>{message.message}</TableCell>\r\n              <TableCell align=\"center\">\r\n                <Button\r\n                  disabled={loading}\r\n                  onClick={() => {\r\n                    handleDelete(message.id);\r\n                  }}\r\n                >\r\n                  <CloseIcon color=\"secondary\" />\r\n                </Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n\r\n      {/* <div className={classes.seeMore}>\r\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\r\n          See more\r\n        </Link>\r\n      </div> */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Statistics.jsx",["467","468","469","470"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TrendingUpIcon from \"@material-ui/icons/TrendingUp\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TrendingDownIcon from \"@material-ui/icons/TrendingDown\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Title2 from \"./Title\";\r\nimport { Avatar } from \"@material-ui/core\";\r\n\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {\r\n  Chart,\r\n  BarSeries,\r\n  Title,\r\n  ArgumentAxis,\r\n  ValueAxis,\r\n} from \"@devexpress/dx-react-chart-material-ui\";\r\nimport authHeader from \"../../services/authHeader\";\r\n\r\nimport { Animation } from \"@devexpress/dx-react-chart\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../services/userService\";\r\n\r\nfunction preventDefault(event) {\r\n  event.preventDefault();\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  root: {\r\n    width: \"20vw\",\r\n    minWidth: \"400px\",\r\n    margin: \"1vh 0vw\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  cardcontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    maxWidth: \"500px\",\r\n  },\r\n  chartcontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    maxWidth: \"1000px\",\r\n    maxHeight: \"500px\",\r\n    marginRight: \"2vw\",\r\n  },\r\n  chartpaper: {\r\n    minWidth: \"700px\",\r\n    width: \"1000px\",\r\n  },\r\n  maincontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  maincontainer2: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    marginTop: \"2vh\",\r\n  },\r\n  flexing: {\r\n    display: \"flex\",\r\n  },\r\n  tablee: {\r\n    maxWidth: \"1000px\",\r\n  },\r\n}));\r\n\r\nconst data = [\r\n  { day: \"12/04\", visitors: 80 },\r\n  { day: \"13/04\", visitors: 120 },\r\n  { day: \"14/04\", visitors: 135 },\r\n  { day: \"15/04\", visitors: 126 },\r\n  { day: \"16/04\", visitors: 179 },\r\n  { day: \"17/04\", visitors: 207 },\r\n];\r\n\r\nexport default function ListUsers({ user }) {\r\n  const classes = useStyles();\r\n  const [accounts, setAccounts] = useState();\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    async function getAll() {\r\n      await axios\r\n        .get(\"https://www.forum-uit.codes/api/profile/getall\", {\r\n          headers: authHeader(),\r\n        })\r\n        .then((response) => {\r\n          setAccounts(response?.data);\r\n        });\r\n    }\r\n    getAll();\r\n  }, [count]);\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.maincontainer}>\r\n        <div className={classes.flexing}>\r\n          <div className={classes.chartcontainer}>\r\n            <Paper className={classes.chartpaper}>\r\n              <Chart data={data}>\r\n                <ArgumentAxis />\r\n                <ValueAxis max={7} />\r\n                <BarSeries valueField=\"visitors\" argumentField=\"day\" />\r\n                <Title text=\"Daily Visitors\" />\r\n                <Animation />\r\n              </Chart>\r\n            </Paper>\r\n          </div>\r\n          <div className={classes.cardcontainer}>\r\n            <Card className={classes.root} variant=\"outlined\">\r\n              <CardContent>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  Visitors\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                  Today\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"p\">\r\n                  {Math.ceil(Math.random() * 300)}{\" \"}\r\n                  <TrendingUpIcon\r\n                    style={{ color: \"#4caf50\" }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                  <span\r\n                    style={{\r\n                      color: \"#4caf50\",\r\n                      fontSize: \"18px\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    5.5%\r\n                  </span>\r\n                  <br />\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  Last 7 days: 74{\" \"}\r\n                  <ArrowUpwardIcon\r\n                    style={{ color: \"#4caf50\" }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button size=\"small\" variant=\"contained\" color=\"secondary\">\r\n                  Learn More\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n            <Card className={classes.root} variant=\"outlined\">\r\n              <CardContent>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  Visitors\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                  Today\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"p\">\r\n                  {Math.ceil(Math.random() * 300)}{\" \"}\r\n                  <TrendingDownIcon\r\n                    style={{ color: \"#d50000\" }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                  <span\r\n                    style={{\r\n                      color: \"#d50000\",\r\n                      fontSize: \"18px\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    5.5%\r\n                  </span>\r\n                  <br />\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  Last 7 days: -20{\" \"}\r\n                  <ArrowDownwardIcon\r\n                    style={{ color: \"#d50000\" }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button size=\"small\" variant=\"contained\" color=\"secondary\">\r\n                  Learn More\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={classes.maincontainer2}>\r\n        <div className={classes.flexing}>\r\n          <div className={classes.chartcontainer}>\r\n            <Paper className={classes.chartpaper}>\r\n              <Title2>&nbsp; Logged In Users</Title2>\r\n              <Card className={classes.tablee}>\r\n                <Table size=\"small\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <TableCell>Id</TableCell>\r\n                      <TableCell>Image</TableCell>\r\n                      <TableCell>Full Name</TableCell>\r\n                      <TableCell>Username</TableCell>\r\n                      <TableCell>Email</TableCell>\r\n                      <TableCell>Role</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {accounts?.slice(0, 5).map(\r\n                      (account) =>\r\n                        account.id != user.id && (\r\n                          <TableRow key={account.id}>\r\n                            <TableCell>{account.id}</TableCell>\r\n                            <TableCell>\r\n                              {account.roles[0].id === 1 && (\r\n                                <Avatar\r\n                                  src={\r\n                                    userService.imageLink +\r\n                                    account.cv.image\r\n                                  }\r\n                                />\r\n                              )}\r\n                              {account.roles[0].id === 2 && (\r\n                                <Avatar\r\n                                  src={\r\n                                    userService.imageLink + \"admin.jpg\"\r\n                                  }\r\n                                />\r\n                              )}\r\n                              {account.roles[0].id === 3 && (\r\n                                <Avatar\r\n                                  src={\r\n                                    \"https://www.forum-uit.codes/upload/static/images/\" +\r\n                                    account.company.companyImage\r\n                                  }\r\n                                />\r\n                              )}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                              {account.name\r\n                                .split(\" \")\r\n                                .map(\r\n                                  (e) => e.charAt(0).toUpperCase() + e.slice(1)\r\n                                )\r\n                                .join(\" \")}\r\n                            </TableCell>\r\n                            <TableCell>{account.username}</TableCell>\r\n                            <TableCell>{account.email}</TableCell>\r\n                            <TableCell>\r\n                              {account.roles[0].id === 1 && \"Student\"}\r\n                              {account.roles[0].id === 2 && \"Admin\"}\r\n                              {account.roles[0].id === 3 && \"Manager\"}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        )\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </Card>\r\n            </Paper>\r\n          </div>\r\n          <div className={classes.cardcontainer}>\r\n            <Card className={classes.root} variant=\"outlined\">\r\n              <CardContent>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  Visitors\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                  Today\r\n                </Typography>\r\n                <Typography variant=\"h4\" component=\"p\">\r\n                  {Math.ceil(Math.random() * 300)}{\" \"}\r\n                  <TrendingDownIcon\r\n                    style={{ color: \"#d50000\" }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                  <span\r\n                    style={{\r\n                      color: \"#d50000\",\r\n                      fontSize: \"18px\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    5.5%\r\n                  </span>\r\n                  <br />\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  Last 7 days: -20{\" \"}\r\n                  <ArrowDownwardIcon\r\n                    style={{ color: \"#d50000\" }}\r\n                    fontSize=\"small\"\r\n                  />\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button size=\"small\" variant=\"contained\" color=\"secondary\">\r\n                  Learn More\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\SinglePost\\SinglePost.jsx",["471","472","473","474","475","476","477","478","479","480"],"import { Avatar, setRef } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport React, { useEffect, useState, initialState } from \"react\";\r\nimport \"./SinglePost.scss\";\r\nimport PublicIcon from \"@material-ui/icons/Public\";\r\nimport InputOption from \"../InputOption/InputOption\";\r\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport userService from \"../../../../services/userService\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport axios from \"axios\";\r\nimport DeleteTwoToneIcon from \"@material-ui/icons/DeleteTwoTone\";\r\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport Comment from \"../Post/Comments/Comment/Comment\";\r\nimport \"../Post/Comments/AddComment/AddComment.scss\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport ModalImage from \"react-modal-image\";\r\nimport ThumbUpAltOutlinedIcon from \"@material-ui/icons/ThumbUpAltOutlined\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  small: {\r\n    width: theme.spacing(3),\r\n    height: theme.spacing(3),\r\n  },\r\n  large: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: \"70vw\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default function SinglePost(props) {\r\n  const classes = useStyles();\r\n  const { postId } = useParams();\r\n  const [toggleLike, setToggleLike] = useState(false);\r\n  const [shownLikes, setShownLikes] = useState(initialState);\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const [open, setOpen] = useState(false);\r\n  const [owner, setOwner] = useState(initialState);\r\n  const [toggleComment, setToggleComment] = useState(false);\r\n  const [currentUserId, setCurrentUserId] = useState(initialState);\r\n  // const postId = props?.match?.params?.postId;\r\n  const [input, setInput] = useState();\r\n  const [user, setUser] = useState(initialState);\r\n  const [userImage, setUserImage] = useState(initialState);\r\n  const [ownerId, setOwnerId] = useState();\r\n  const [message, setMessage] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [timestamp, setTimestamp] = useState();\r\n  const [role, setRole] = useState();\r\n  const [username, setUsername] = useState();\r\n  const [ownerImage, setOwnerImage] = useState(\"\");\r\n  const [imageType, setImageType] = useState();\r\n  const [comments, setComments] = useState([]);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [commentInput, setCommentInput] = useState(\"\");\r\n  const [likes, setLikes] = useState([]);\r\n  const [count, setCount] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const loadingSpinner = async () => {\r\n    setLoading(true);\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadingSpinner();\r\n    async function getUserById() {\r\n      await userService.getUserById(ownerId).then((response) => {\r\n        console.log(response?.data);\r\n        setOwner(response?.data);\r\n        setUsername(response?.data?.username);\r\n      });\r\n    }\r\n    async function getLikesByPost() {\r\n      const result = await userService.getLikesByPost(postId);\r\n      setLikes(result?.data);\r\n      setShownLikes(result?.data?.length);\r\n      setRefresh(true);\r\n      for (let i = 0; i < result?.data?.length; i++) {\r\n        if (user?.id == result?.data[i]?.likerId) {\r\n          setToggleLike(true);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    async function getPostById() {\r\n      await userService.getPostById(postId).then(\r\n        (response) => {\r\n          setInput(response?.data?.message);\r\n          setOwnerId(response?.data?.ownersId);\r\n          setTimestamp(response?.data?.updatedAt);\r\n          setRole(response?.data?.role);\r\n          setMessage(response?.data?.message);\r\n          setOwnerImage(response?.data?.ownerImage);\r\n          setImageType(response?.data?.imageType);\r\n          setComments(response?.data?.comment);\r\n        },\r\n        (error) => {\r\n          setErrorMessage(\"Ce poste a été supprimé\");\r\n        }\r\n      );\r\n    }\r\n    async function getUserData() {\r\n      await userService.getUserData().then((response) => {\r\n        setUser(response?.data);\r\n        setCurrentUserId(response?.data?.id);\r\n        if (response?.data?.roles[0]?.id === 1) {\r\n          setUserImage(response?.data?.cv?.image);\r\n        } else if (response?.data?.roles[0]?.id === 3) {\r\n          setUserImage(response?.data?.company?.companyImage);\r\n        }\r\n      });\r\n    }\r\n    getUserData();\r\n    getUserById();\r\n    getPostById();\r\n    getLikesByPost();\r\n  }, [refresh, count]);\r\n  const doReload = () => {\r\n    setCount(count + 1);\r\n    console.log(\"ok\");\r\n  };\r\n\r\n  const deleteById = (id) => {\r\n    userService.deletePostById(id).then((response) => {\r\n      setRefresh(!refresh);\r\n    });\r\n  };\r\n\r\n  const updatePost = (id) => {\r\n    const post = {\r\n      message: input,\r\n      role: user?.roles[0]?.id,\r\n    };\r\n    if (user?.roles[0]?.id === 1) {\r\n      userService.updateStudentPost(id, post).then((response) => {\r\n        setOpen(false);\r\n        setRefresh(true);\r\n        setRefresh(false);\r\n      });\r\n    } else if (user?.roles[0]?.id === 3) {\r\n      userService.updateCompanyPost(id, post).then((response) => {\r\n        setOpen(false);\r\n        setRefresh(true);\r\n        setRefresh(false);\r\n      });\r\n    }\r\n  };\r\n\r\n  const uploadComment = (id) => {\r\n    const errors = [];\r\n    let comment;\r\n    if (commentInput.length === 0) errors.push(\"Comment cannot be empty.\\n\");\r\n    if (errors.length !== 0) {\r\n      return 0;\r\n    }\r\n    if (user?.roles[0]?.id === 1) {\r\n      comment = {\r\n        message: commentInput,\r\n        role: 1,\r\n      };\r\n      userService.uploadStudentComment(id, comment).then((response) => {\r\n        setRefresh(!refresh);\r\n\r\n        setCommentInput(\"\");\r\n      });\r\n    } else if (user?.roles[0]?.id === 3) {\r\n      comment = {\r\n        message: commentInput,\r\n        role: 3,\r\n      };\r\n      userService.uploadCompanyComment(id, comment).then((response) => {\r\n        // window.location.reload();\r\n        setRefresh(!refresh);\r\n        setCommentInput(\"\");\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    const keyCode = e.which || e.keyCode;\r\n    if (keyCode === 13 && !e.shiftKey) {\r\n      e.preventDefault();\r\n      uploadComment(postId);\r\n    }\r\n  };\r\n\r\n  const likePost = (postId) => {\r\n    userService.likePost(postId, user.id).then(\r\n      (response) => {\r\n        setToggleLike(true);\r\n        setShownLikes(shownLikes + 1);\r\n        // setRefresh(true);\r\n        // setRefresh(false);\r\n      },\r\n      (error) => {}\r\n    );\r\n  };\r\n  const unlikePost = (postId) => {\r\n    userService.unlikePost(postId).then((response) => {\r\n      // setRefresh(true);\r\n      // setRefresh(false);\r\n      setShownLikes(shownLikes - 1);\r\n      setToggleLike(false);\r\n    });\r\n  };\r\n\r\n  const body = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <h2 id=\"simple-modal-title\">Edit your Post</h2>\r\n      <p id=\"simple-modal-description\">\r\n        <textarea\r\n          className=\"inputs form-control col-sm-12 mt-2\"\r\n          rows=\"4\"\r\n          maxLength=\"1000\"\r\n          placeholder=\"Post\"\r\n          style={{\r\n            backgroundColor: \"#f3f2ef\",\r\n            resize: \"none\",\r\n          }}\r\n          defaultValue={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n        ></textarea>\r\n        <Button\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            updatePost(postId);\r\n          }}\r\n        >\r\n          Update\r\n        </Button>\r\n      </p>\r\n      {/* <SimpleModal /> */}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"feed\">\r\n      <div className=\"post\">\r\n        {loading && (\r\n          <Loader\r\n            type=\"Oval\"\r\n            // color=\"rgb(63, 63, 63)\"\r\n            color=\"#6573c3\"\r\n            height={30}\r\n            width={30}\r\n            timeout={1500}\r\n            className=\"loading_spinner\"\r\n          />\r\n        )}\r\n        {!errorMessage && !loading && (\r\n          <>\r\n            <Modal\r\n              open={open}\r\n              onClose={handleClose}\r\n              aria-labelledby=\"simple-modal-title\"\r\n              aria-describedby=\"simple-modal-description\"\r\n            >\r\n              {body}\r\n            </Modal>\r\n\r\n            <div className=\"post_header\">\r\n              <Link to={`/view/${ownerId}`} style={{ textDecoration: \"none\" }}>\r\n                {role === 1 && (\r\n                  <Avatar\r\n                    src={userService.imageLink + owner?.cv?.image}\r\n                    className={classes.large}\r\n                  />\r\n                )}\r\n                {role === 3 && (\r\n                  <Avatar\r\n                    variant=\"square\"\r\n                    src={userService.imageLink + owner?.company?.companyImage}\r\n                    className={classes.large}\r\n                  />\r\n                )}\r\n              </Link>\r\n\r\n              <div className=\"post_info\">\r\n                <h2 style={{ display: \"flex\" }}>\r\n                  {role === 1 &&\r\n                    owner?.cv?.about?.firstName +\r\n                      \" \" +\r\n                      owner?.cv?.about?.lastName}\r\n                  {role === 3 && owner?.company?.aboutCompany?.name}\r\n                </h2>\r\n                <p>{`@${username}  - ${\r\n                  role === 1 ? \"Student\" : \"Enterprise\"\r\n                }`}</p>\r\n                <span></span>\r\n                <div className=\"post_date\">\r\n                  <h6 style={{ color: \"#000\" }}>{timestamp} &nbsp;</h6>\r\n                  <PublicIcon className=\"global\" style={{ color: \"#000\" }} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"post_body\">\r\n              <div className=\"post_message\">{message}</div>\r\n              {console.log(`hhh ${postId}`)}\r\n              {imageType && (\r\n                <ModalImage\r\n                  className=\"post_image\"\r\n                  small={\r\n                    userService.imageLink + \"post\" + postId + \".\" + imageType\r\n                  }\r\n                  large={\r\n                    userService.imageLink + \"post\" + postId + \".\" + imageType\r\n                  }\r\n                  alt=\"\"\r\n                />\r\n              )}\r\n            </div>\r\n            <div className=\"post_stats\">\r\n              <p style={{ fontSize: \"13px\" }}>\r\n                {shownLikes} likes&nbsp;&nbsp;-&nbsp;&nbsp;\r\n                {comments?.length} comments\r\n              </p>\r\n            </div>\r\n            <div className=\"post_buttons\">\r\n              {toggleLike && (\r\n                <InputOption\r\n                  Icon={ThumbUpIcon}\r\n                  title=\"Like\"\r\n                  color=\"blue\"\r\n                  onClick={() => unlikePost(postId)}\r\n                />\r\n              )}{\" \"}\r\n              {/* dislike */}\r\n              {!toggleLike && (\r\n                <InputOption\r\n                  Icon={ThumbUpAltOutlinedIcon}\r\n                  title=\"Like\"\r\n                  color=\"blue\"\r\n                  onClick={() => likePost(postId)}\r\n                />\r\n              )}\r\n              {/* like */}\r\n              <InputOption\r\n                Icon={CommentIcon}\r\n                title=\"Comment\"\r\n                color=\"green\"\r\n                onClick={() => setToggleComment(!toggleComment)}\r\n              />\r\n              {/* {currentUserId !== ownerId && (\r\n            <InputOption Icon={ShareIcon} title=\"Share\" color=\"purple\" />\r\n          )} */}\r\n              {currentUserId === ownerId && (\r\n                <>\r\n                  <InputOption\r\n                    Icon={EditTwoToneIcon}\r\n                    title=\"Edit\"\r\n                    color=\"purple\"\r\n                    onClick={handleOpen}\r\n                  />\r\n                  <InputOption\r\n                    Icon={DeleteTwoToneIcon}\r\n                    title=\"Delete\"\r\n                    color=\"red\"\r\n                    onClick={() => {\r\n                      deleteById(postId);\r\n                    }}\r\n                  />\r\n                </>\r\n              )}\r\n            </div>\r\n\r\n            {comments.length !== 0 && (\r\n              <div className=\"comments-header\">\r\n                <h4>Comments</h4>\r\n              </div>\r\n            )}\r\n            {toggleComment && (\r\n              <div className=\"add-comment\">\r\n                <Avatar\r\n                  src={\r\n                    role == 1\r\n                      ? userService.imageLink + ownerImage\r\n                      : userService.imageLink + ownerImage\r\n                  }\r\n                  className={classes.large}\r\n                />\r\n                <textarea\r\n                  rows=\"4\"\r\n                  className=\"add-text-area\"\r\n                  placeholder=\"Add a public comment\"\r\n                  value={commentInput}\r\n                  onChange={(e) => setCommentInput(e.target.value)}\r\n                  onKeyDown={handleKeyDown}\r\n                />\r\n              </div>\r\n            )}\r\n            {comments?.map((e, key) => (\r\n              <Comment\r\n                key={key}\r\n                onChange={() => {\r\n                  setRefresh(!refresh);\r\n                }}\r\n                refresh={refresh}\r\n                user={user}\r\n                commentId={e?.id}\r\n                message={e?.message}\r\n                timestamp={e?.updatedAt.substring(0, 10)}\r\n                username={e?.ownerUsername}\r\n                firstName={e?.ownerFirstName}\r\n                lastName={e?.ownerLastName}\r\n                companyName={e?.companyName}\r\n                role={e?.role}\r\n                ownerId={e?.ownersId}\r\n                currentUserId={user?.id}\r\n                likes={e?.likes}\r\n                onChange={(value) => setRefresh(value)}\r\n                onDelete={() => {\r\n                  doReload();\r\n                }}\r\n              />\r\n            ))}\r\n          </>\r\n        )}\r\n        {errorMessage && !loading && <span>{errorMessage}</span>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Enable.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\ListUsers.jsx",["481","482","483","484","485","486","487"],"import React, { useEffect, useState } from \"react\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Title from \"./Title\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../services/authHeader\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { Close } from \"@material-ui/icons\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport authService from \"../../services/authService\";\r\nimport userService from \"../../services/userService\";\r\nimport PersonAddDisabledIcon from \"@material-ui/icons/PersonAddDisabled\";\r\nfunction preventDefault(event) {\r\n  event.preventDefault();\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function ListUsers({ user }) {\r\n  const classes = useStyles();\r\n  const [accounts, setAccounts] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [count, setCount] = useState(0);\r\n  const handleDelete = async (id) => {\r\n    setLoading(true);\r\n    await authService.deleteUser(id).then((response) => {\r\n      setCount(count + 1);\r\n    });\r\n    setLoading(false);\r\n  };\r\n  const handleDisable = async (id) => {\r\n    setLoading(true);\r\n    await authService.disableAccount(id).then((res) => {\r\n      setCount(count + 1);\r\n    });\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    function getAll() {\r\n      userService.getAll().then((response) => {\r\n        setAccounts(response?.data);\r\n      });\r\n    }\r\n    getAll();\r\n  }, [count]);\r\n  return (\r\n    <React.Fragment>\r\n      <Title>All Users</Title>\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Id</TableCell>\r\n            <TableCell>Image</TableCell>\r\n            <TableCell>Full Name</TableCell>\r\n            <TableCell>Username</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Role</TableCell>\r\n            <TableCell align=\"center\">Activé</TableCell>\r\n            <TableCell align=\"center\">Désactiver</TableCell>\r\n            <TableCell align=\"center\">Supprimer</TableCell>\r\n            {/* <TableCell align=\"right\">Sale Amount</TableCell> */}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {accounts?.map(\r\n            (account) =>\r\n              account?.id != user?.id && (\r\n                <TableRow key={account.id}>\r\n                  <TableCell>{account.id}</TableCell>\r\n                  <TableCell>\r\n                    {account.roles[0].id === 1 && (\r\n                      <Avatar src={userService.imageLink + account.cv.image} />\r\n                    )}\r\n                    {account.roles[0].id === 2 && (\r\n                      <Avatar src={userService.imageLink + \"admin.jpg\"} />\r\n                    )}\r\n                    {account.roles[0].id === 3 && (\r\n                      <Avatar\r\n                        src={\r\n                          userService.imageLink + account.company.companyImage\r\n                        }\r\n                      />\r\n                    )}\r\n                  </TableCell>\r\n\r\n                  <TableCell>\r\n                    {account.name\r\n                      .split(\" \")\r\n                      .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                      .join(\" \")}\r\n                  </TableCell>\r\n                  <TableCell>{account.username}</TableCell>\r\n                  <TableCell>{account.email}</TableCell>\r\n                  <TableCell>\r\n                    {account.roles[0].id === 1 && \"Student\"}\r\n                    {account.roles[0].id === 2 && \"Admin\"}\r\n                    {account.roles[0].id === 3 && \"Manager\"}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    {account.enabled && (\r\n                      <span className=\"text-success\">Yes</span>\r\n                    )}\r\n                    {!account.enabled && (\r\n                      <span className=\"text-danger\">No</span>\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Button\r\n                      disabled={loading}\r\n                      onClick={() => {\r\n                        handleDisable(account.id);\r\n                      }}\r\n                    >\r\n                      <PersonAddDisabledIcon color=\"secondary\" />\r\n                    </Button>\r\n                  </TableCell>\r\n                  <TableCell align=\"center\">\r\n                    <Button\r\n                      disabled={loading}\r\n                      onClick={() => {\r\n                        handleDelete(account.id);\r\n                      }}\r\n                    >\r\n                      <CloseIcon color=\"secondary\" />\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n\r\n      {/* <div className={classes.seeMore}>\r\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\r\n          See more\r\n        </Link>\r\n      </div> */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Sidebar\\Sidebar.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Sidebarl\\Sidebarl.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Network\\Sidebar\\Sidebar.jsx",["488","489"],"import { Avatar } from '@material-ui/core'\r\nimport React from 'react'\r\nimport styles from './Sidebar.module.css'\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport PersonAddSharpIcon from '@material-ui/icons/PersonAddSharp';\r\nimport PeopleSharpIcon from '@material-ui/icons/PeopleSharp';\r\nimport EventSharpIcon from '@material-ui/icons/EventSharp';\r\nimport BusinessSharpIcon from '@material-ui/icons/BusinessSharp';\r\nfunction capitalizeTheFirstLetterOfEachWord(words) {\r\n    var separateWord = words?.toLowerCase().split(' ');\r\n    for (var i = 0; i < separateWord?.length; i++) {\r\n        separateWord[i] = separateWord[i]?.charAt(0).toUpperCase() +\r\n            separateWord[i]?.substring(1);\r\n    }\r\n    return separateWord?.join(' ');\r\n}\r\nfunction Sidebar({ image, user }) {\r\n    const recentItem = (topic) => (\r\n        <div className=\"sidebar_recentItem\">\r\n            <div className=\"sidebar_hash\">#</div>\r\n            <p>{topic}</p>\r\n        </div>\r\n    );\r\n    return (\r\n        <div className={styles.sidebar}>\r\n            <div className={styles.sidebar_stats}>\r\n                <h1>Manage My Network</h1>\r\n                <div className={styles.sidebar_stat}>\r\n                    <p><PeopleIcon /> <span> Connections</span></p>\r\n                    <p className={styles.sidebar_statNumber}>{user?.friendshipSended.length + user?.friendshipReceived.length}</p>\r\n                </div>\r\n                <div className={styles.sidebar_stat}>\r\n                    <p><VisibilityIcon /> <span> Profile's views</span></p>\r\n                    <p className={styles.sidebar_statNumber}>{Math.floor(Math.random() * 1000)}</p>\r\n                </div>\r\n                <div className={styles.sidebar_stat}>\r\n                    <p><PersonAddSharpIcon /><span>People I follow</span></p>\r\n                    <p className={styles.sidebar_statNumber}>{Math.floor(Math.random() * 20)}</p>\r\n                </div>\r\n                <div className={styles.sidebar_stat}>\r\n                    <p><PeopleSharpIcon /> <span>Groups</span></p>\r\n                    <p className={styles.sidebar_statNumber}>{Math.floor(Math.random() * 20)}</p>\r\n                </div>\r\n                <div className={styles.sidebar_stat}>\r\n                    <p><EventSharpIcon /><span>Events</span></p>\r\n                    <p className={styles.sidebar_statNumber}></p>\r\n                </div>\r\n                <div className={styles.sidebar_stat}>\r\n                    <p><BusinessSharpIcon /><span>Companies</span></p>\r\n                    <p className={styles.sidebar_statNumber}>{Math.floor(Math.random() * 100)}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar_bottom\">\r\n                <p>Recent</p>\r\n                {recentItem(\"Reactjs\")}\r\n                {recentItem(\"Programming\")}\r\n                {recentItem(\"SoftwareEngineering\")}\r\n                {recentItem(\"Design\")}\r\n                {recentItem(\"Developer\")}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Network\\Feed\\Feed.jsx",["490","491","492","493","494","495","496","497","498","499","500","501","502","503"],"import { Avatar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState, initialState } from \"react\";\r\nimport styles from \"./Feed.module.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport userService from \"../../../services/userService\";\r\nimport { useHistory } from \"react-router\";\r\nfunction Feed({ user }) {\r\n  const history = useHistory();\r\n  const [companies, setCompanies] = useState(initialState);\r\n  const [recommnededCompanies, setRecommendedCompanies] = useState(\r\n    initialState\r\n  );\r\n  const [students, setStudents] = useState(initialState);\r\n  const [recommendedStudents, setRecommendedStudents] = useState(initialState);\r\n  useEffect(() => {\r\n    async function getAllCompanies() {\r\n      await userService.getAllCompanies().then((response) => {\r\n        setCompanies(response?.data);\r\n        setRecommendedCompanies(\r\n          response?.data?.filter(\r\n            (company) =>\r\n              company.enabled &&\r\n              company?.company?.aboutCompany?.domaine ==\r\n              user?.cv?.about?.domaine\r\n          )\r\n        );\r\n      });\r\n    }\r\n    async function getAllStudents() {\r\n      await userService.getAllStudents().then(\r\n        (response) => {\r\n          setStudents(response?.data);\r\n          if (user?.roles[0]?.id == 3) {\r\n            setRecommendedStudents(\r\n              response?.data?.filter(\r\n                (student) =>\r\n                  student.enabled &&\r\n                  student?.cv?.about?.domaine ==\r\n                  user?.company?.aboutCompany?.domaine\r\n              )\r\n            );\r\n          }\r\n        },\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n    getAllCompanies();\r\n    getAllStudents();\r\n  }, []);\r\n  const handleClick = (id) => {\r\n    history.push(\"/view/\" + id);\r\n    window.location.reload();\r\n  };\r\n  return (\r\n    <div className={styles.feed}>\r\n      <div className={styles.block}>\r\n        <h1 className={styles.title}>All Companies</h1>\r\n        {companies\r\n          ?.filter((company) => company.enabled && company.company.flag)\r\n          ?.map(\r\n            (company, index) =>\r\n              user?.id != company?.id && (\r\n                <div className={styles.company}>\r\n                  <img\r\n                    src={\"https://picsum.photos/400/200?random=\" + index++}\r\n                    alt=\"\"\r\n                  />\r\n                  <Avatar\r\n                    src={\r\n                      userService.imageLink +\r\n                      company.company.companyImage\r\n                    }\r\n                    className={styles.company_avatar}\r\n                    alt=\"Image of \"\r\n                  />\r\n                  <h2>{company?.companyName}</h2>\r\n                  <h5>{company?.email}</h5>\r\n                  <h6>{Math.floor(Math.random() * 1000)}</h6>\r\n                  <Button\r\n                    className={styles.Button}\r\n                    onClick={() => handleClick(company?.id)}\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                  >\r\n                    View Profile\r\n                  </Button>\r\n                </div>\r\n              )\r\n          )}\r\n      </div>\r\n\r\n      {user?.roles[0]?.id == 1 && recommnededCompanies?.length != 0 && (\r\n        <div className={styles.block}>\r\n          <h1 className={styles.title}>Recommended Companies for you</h1>\r\n          {companies\r\n            ?.filter(\r\n              (company) =>\r\n                company.enabled &&\r\n                company?.company?.aboutCompany?.domaine ==\r\n                user?.cv?.about?.domaine\r\n            )\r\n            ?.map(\r\n              (company, index) =>\r\n                user?.id != company?.id && (\r\n                  <div className={styles.company}>\r\n                    <img\r\n                      src={\"https://picsum.photos/400/200?random=\" + index++}\r\n                      alt=\"\"\r\n                    />\r\n                    <Avatar\r\n                      src={\r\n                        userService.imageLink +\r\n                        company.company.companyImage\r\n                      }\r\n                      className={styles.company_avatar}\r\n                      alt=\"Image of \"\r\n                    />\r\n                    <h2>{company?.companyName}</h2>\r\n                    <h5>{company?.email}</h5>\r\n                    <h6>{Math.floor(Math.random() * 1000)}</h6>\r\n                    <Button\r\n                      className={styles.Button}\r\n                      onClick={() => handleClick(company?.id)}\r\n                      variant=\"outlined\"\r\n                      color=\"primary\"\r\n                    >\r\n                      View Profile\r\n                    </Button>\r\n                  </div>\r\n                )\r\n            )}\r\n        </div>\r\n      )}\r\n\r\n      {user?.roles[0]?.id == 3 && recommendedStudents?.length != 0 && (\r\n        <div className={styles.block}>\r\n\r\n          <h1 className={styles.title}>Recommended Students for you</h1>\r\n          {students\r\n            ?.filter(\r\n              (student) =>\r\n                student.enabled &&\r\n                student?.cv?.about?.domaine ==\r\n                user?.company?.aboutCompany?.domaine\r\n            )\r\n            ?.map(\r\n              (student, index) =>\r\n                user?.id != student?.id && (\r\n                  <div className={styles.company}>\r\n                    <img\r\n                      src={\"https://picsum.photos/400/200?blur?random=\" + index}\r\n                      alt=\"\"\r\n                    />\r\n                    <Avatar\r\n                      src={\r\n                        userService.imageLink +\r\n                        student.cv.image\r\n                      }\r\n                      className={styles.company_avatar2}\r\n                      alt=\"Image of \"\r\n                    />\r\n                    <h2>{student?.cv.name}</h2>\r\n                    <h5>{student?.email}</h5>\r\n                    <h6>{Math.floor(Math.random() * 1000)}</h6>\r\n                    <Button\r\n                      className={styles.Button}\r\n                      variant=\"outlined\"\r\n                      onClick={() => handleClick(student?.id)}\r\n                      color=\"primary\"\r\n                    >\r\n                      View Profile\r\n                    </Button>\r\n                  </div>\r\n                )\r\n            )}\r\n        </div>\r\n      )}\r\n      <div className={styles.block}>\r\n        <h1 className={styles.title}>Students</h1>\r\n        {students\r\n          ?.filter((student) => student.enabled && student.cv.flag)\r\n          ?.map(\r\n            (student, index) =>\r\n              user?.id != student?.id && (\r\n                <div className={styles.company}>\r\n                  <img\r\n                    src={\"https://picsum.photos/400/200?blur?random=\" + index}\r\n                    alt=\"\"\r\n                  />\r\n                  <Avatar\r\n                    src={\r\n                      userService.imageLink +\r\n                      student.cv.image\r\n                    }\r\n                    className={styles.company_avatar2}\r\n                    alt=\"Image of \"\r\n                  />\r\n                  <h2>{student?.cv.name}</h2>\r\n                  <h5>{student?.email}</h5>\r\n                  <h6>{Math.floor(Math.random() * 1000)}</h6>\r\n                  <Button\r\n                    className={styles.Button}\r\n                    variant=\"outlined\"\r\n                    onClick={() => handleClick(student?.id)}\r\n                    color=\"primary\"\r\n                  >\r\n                    View Profile\r\n                  </Button>\r\n                </div>\r\n              )\r\n          )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Notification\\Feed\\Feed.jsx",["504","505","506","507","508"],"import { Avatar, Button } from '@material-ui/core'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport React, { useState, useEffect } from 'react'\r\nimport styles from './Feed.module.css'\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport userService from '../../../services/userService';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport { Link } from \"react-router-dom\";\r\nimport ArrowRightAltIcon from \"@material-ui/icons/ArrowRightAlt\";\r\nimport createPalette from '@material-ui/core/styles/createPalette';\r\nfunction Feed() {\r\n    const [loading, setLoading] = useState(false);\r\n    const [count, setCount] = useState(0);\r\n    const [notifications, setNotifications] = useState([])\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        const getNotifications = async () => {\r\n            await userService.getAllNotifications().then((response) => {\r\n                setNotifications(response.data);\r\n            })\r\n        }\r\n        getNotifications()\r\n    }, [count]);\r\n    const accept = async (e, id) => {\r\n        try {\r\n            setLoading(true)\r\n            const resp = await userService.accept(id);\r\n            setLoading(false)\r\n            setCount(count + 1)\r\n        } catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n    const handleClick = (id,idNotif=0,message=\"\") => {\r\n        if(message==\"has viewed your profile\")\r\n        {\r\n            handleSingleNotif(idNotif)\r\n        }\r\n        history.push('/view/' + id)\r\n        // window.location.reload()\r\n    }\r\n    const handleMessage = (id) => {\r\n        history.push('/Messages/' + id)\r\n    }\r\n    const deleteNotification = async (id) => {\r\n        try {\r\n            setLoading(true)\r\n            const resp = await userService.deleteNotification(id);\r\n            setLoading(false)\r\n            setCount(count + 1)\r\n        }\r\n        catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n    const handleSingleNotif = async (id) => {\r\n        try {\r\n            setLoading(true)\r\n            const resp = await userService.handleSingleNotif(id);\r\n            setLoading(false)\r\n            setCount(count + 1)\r\n        }\r\n        catch (err) {\r\n            // Handle Error Here\r\n            console.error(err);\r\n        }\r\n    }\r\n    return (\r\n        <div className={styles.feed}>\r\n            <div className={styles.feedContainer}>\r\n                {notifications?.map(notification => (\r\n                    <div className={`${styles.notif} ${!notification.status && styles.new}`} >\r\n                        <Avatar className={styles.image} src={userService.imageLink + notification.ownerImage} />\r\n                        <div className={styles.info}>\r\n                            <h3><span className={styles.name} onClick={() => handleClick(notification.ownersId,notification.id,notification.message)}>{notification.ownerName}</span> <span className={styles.follow}>{notification.message}</span></h3>\r\n                            <div className=\"buttons\">\r\n                                {notification.message === \"Followed you\" && notification.status === false && <Button\r\n                                    size=\"small\"\r\n                                    variant=\"contained\"\r\n                                    style={{\r\n                                        borderRadius: 15,\r\n                                        backgroundColor: \"#21b6ae\",\r\n                                        marginRight: 10\r\n                                    }}\r\n                                    disabled={loading === true ? \"disabled\" : \"\"}\r\n                                    startIcon={<AddIcon fontSize='inherit' />}\r\n                                    onClick={(e) => accept(e, notification.ownersId)}\r\n                                >\r\n                                    Accept\r\n                                </Button>}\r\n                                {notification.message === \"Followed you\" && notification.status === true && <Button\r\n                                    size=\"small\"\r\n                                    style={{ color: \"#5cb85c\" }}\r\n                                    disabled\r\n                                    startIcon={<CheckCircleIcon style={{ color: 'inherit' }} fontSize='inherit' />}\r\n                                >\r\n                                    Connected\r\n                                </Button>}\r\n                                {notification.message === \"has commented on your post\" && (\r\n                                    <Link\r\n                                        to={\"/post/\" + notification.postId}\r\n                                        style={{ textDecoration: \"none\" }}\r\n                                        onClick={() => {\r\n                                            handleSingleNotif(notification.id)\r\n                                        }}\r\n                                    >\r\n                                        <Button\r\n                                            startIcon={<ArrowRightAltIcon />}\r\n                                            variant=\"contained\"\r\n                                        >\r\n                                            Go to post\r\n                                        </Button>\r\n                                    </Link>\r\n                                )}\r\n                                {notification.message === \"has liked your post\" && (\r\n                                    <Link\r\n                                        to={\"/post/\" + notification.postId}\r\n                                        style={{ textDecoration: \"none\" }}\r\n                                        onClick={() => {\r\n                                            handleSingleNotif(notification.id)\r\n                                        }}\r\n                                    >\r\n                                        <Button\r\n                                            startIcon={<ArrowRightAltIcon />}\r\n                                            variant=\"contained\"\r\n                                            onClick={() => {\r\n                                                handleSingleNotif(notification.id)\r\n                                            }}\r\n                                        >\r\n                                            Go to post\r\n                                        </Button>\r\n                                    </Link>\r\n                                )}\r\n                                {notification.message === \"has liked your comment\" && (\r\n                                    <Link\r\n                                        to={\"/post/\" + notification.postId}\r\n                                        style={{ textDecoration: \"none\" }}\r\n                                        onClick={() => {\r\n                                            handleSingleNotif(notification.id)\r\n                                        }}\r\n                                    >\r\n                                        <Button\r\n                                            startIcon={<ArrowRightAltIcon />}\r\n                                            variant=\"contained\"\r\n                                        >\r\n                                            Go to post\r\n                                        </Button>\r\n                                    </Link>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.actions}>\r\n                            <IconButton color=\"secondary\" disabled={loading === true ? \"disabled\" : \"\"} onClick={() => deleteNotification(notification.id)} aria-label=\"delete\">\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                            <IconButton color=\"primary\" aria-label=\"message\" onClick={() => handleMessage(notification.ownersId)}>\r\n                                <MessageIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n\r\n                ))}\r\n\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Feed\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Sidebar\\Sidebar.jsx",["509","510"],"import React, { useState, useEffect } from 'react'\r\nimport styles from './Sidebar.module.css'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport MessageConversation from './MessageConversation/MessageConversation';\r\nimport userService from \"../../../services/userService\"\r\nfunction Sidebar({ forceId, data, setActive, NewConversation }) {\r\n    const [activeId, setActiveId] = useState(\"\")\r\n    useEffect(() => {\r\n        if (forceId) {\r\n            setActiveId(forceId)\r\n\r\n        }\r\n    }, [activeId])\r\n    const handleClick = (id) => {\r\n        setActiveId(id)\r\n        const current = data.find(conversation => { return (conversation.id == id) })\r\n        setActive(id, current?.username, current?.date, current?.img)\r\n    }\r\n    const NewConversationx = () => {\r\n        NewConversation()\r\n        setActiveId(0)\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.sidebarNav}>\r\n                <h3>Messaging</h3>\r\n                <div className={styles.actions}>\r\n                    <IconButton onClick={NewConversationx} aria-label=\"New\" >\r\n                        <BorderColorIcon />\r\n                    </IconButton>\r\n                    <IconButton aria-label=\"More\" >\r\n                        <MoreHorizIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            {\r\n                data.map((conversation, index) => {\r\n                    const date = new Date(conversation.date)\r\n                    const dt = date.toLocaleDateString()\r\n                    return (\r\n                        <MessageConversation id={conversation.id} onClick={() => { handleClick(conversation.id) }} isActive={activeId === conversation.id} name={conversation.username} message={conversation.lastMessage.message} lastDate={dt} image={userService.imageLink + conversation.img} />\r\n                    )\r\n                })\r\n            }\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Feed\\Feed.jsx",["511","512","513","514","515"],"import React, { useMemo, useState, useEffect, useRef, initialValue } from 'react'\r\nimport styles from './Feed.module.css'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport userService from '../../../services/userService';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport Button from '@material-ui/core/Button';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport ImageIcon from '@material-ui/icons/Image';\r\nimport GifIcon from '@material-ui/icons/Gif';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport VideoCallIcon from '@material-ui/icons/VideoCall';\r\nimport authHeader from '../../../services/authHeader';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nfunction Feed({ id, isNew, name, date, img, user }) {\r\n    const [input, setInput] = useState(\"\")\r\n    const [profiles, setProfiles] = useState(\"\")\r\n    const [flag, setFlag] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [loading1, setLoading1] = useState(false)\r\n    const [loading2, setLoading2] = useState(false)\r\n    const [open, setOpen] = useState(false)\r\n    const [messagex, setMessage] = useState(\"\")\r\n    const [messages, setMessages] = useState([])\r\n    const [count, setCount] = useState(0)\r\n    const [top, setTop] = useState(false)\r\n    const feed = useRef(initialValue)\r\n    const handleClose = (e) => {\r\n        setOpen(!open);\r\n        setProfiles([]);\r\n        setInput(\"\");\r\n        setFlag(false);\r\n    };\r\n    const handleChange = (e) => {\r\n        const message = e.target.value\r\n        setMessage(message)\r\n    }\r\n    const sendMessage = async () => {\r\n        const messagePayload = {\r\n            jwt: authHeader().Authorization,\r\n            message: messagex,\r\n            receiverId: id\r\n        }\r\n        setLoading2(true)\r\n        await userService.sendMessage(messagePayload).then((response) => {\r\n            setTimeout(() => {\r\n                setMessage(\"\")\r\n                setLoading2(false)\r\n                setCount(count + 1)\r\n            }, 200);\r\n        })\r\n        // clientRef.sendMessage(\"/app/chat.sendMessage\", JSON.stringify(messagePayload))\r\n    }\r\n    // setInterval(() => {\r\n    //     setCount(count + 1)\r\n    // }, 10000);\r\n    useMemo(() => {\r\n    }, [id, isNew, name, date, img]);\r\n    useEffect(() => {\r\n        const getMessages = async () => {\r\n            setLoading1(true)\r\n            console.log(id)\r\n            await userService.getMessages(id).then((response) => {\r\n                console.log(response.data)\r\n                setMessages(response.data)\r\n                setLoading1(false)\r\n            },\r\n                (error) => {\r\n                    console.log(error)\r\n                })\r\n        }\r\n        getMessages();\r\n        console.log(\"ok\")\r\n    }, [id, count]);\r\n    const handleSearchChange = (e) => {\r\n        const inputx = e.target.value;\r\n        setInput(inputx);\r\n        if (inputx) {\r\n            setOpen(true)\r\n            setLoading(true)\r\n            userService.getUsersLike(inputx).then((response) => {\r\n                setProfiles(response.data);\r\n                setFlag(true);\r\n            });\r\n            setLoading(false)\r\n        } else {\r\n            setProfiles([]);\r\n        }\r\n    }\r\n    const handleMessageReceived = (msg) => {\r\n        console.log(msg)\r\n        setMessages([...messages, msg])\r\n    }\r\n    const handleScroll = (e) => {\r\n        console.log(top)\r\n        if (e.target.scrollTop < 50) {\r\n            setTop(false)\r\n        }\r\n        else {\r\n            setTop(true)\r\n        }\r\n    }\r\n    const handleTop = () => {\r\n        feed.current.scroll({ top: 0, left: 0, behavior: 'smooth' })\r\n    }\r\n    const deleteMessage = async (id) => {\r\n        console.log(id)\r\n        userService.deleteMesssage(id).then((response) => console.log(response))\r\n        setCount(count + 1)\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            {isNew ? (<>\r\n                <div className={styles.sidebarNav}>\r\n                    <div className={styles.infos}>\r\n                        <h4>New Message</h4>\r\n                    </div>\r\n                    <div className={styles.actions}>\r\n                        <IconButton aria-label=\"More\" >\r\n                            <MoreHorizIcon />\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.searchBar}>\r\n                    <input type=\"text\" className={styles.search} value={input} onChange={handleSearchChange} placeholder=\"Type a name or multiple name\" />\r\n                    {open && <CloseIcon className={styles.close} onClick={handleClose} />}\r\n                </div>\r\n                <div className={styles.output}>\r\n                    {flag ? (\r\n                        <>\r\n                            {profiles?.length !== 0 ? (\r\n                                profiles?.map((profile) =>\r\n                                    profile.roles[0].id === 1 && profile.enabled ? (\r\n                                        <ProfileInfo\r\n                                            id={profile?.id}\r\n                                            name={profile?.name}\r\n                                            company={profile?.companyName}\r\n                                            role={profile?.roles[0]?.id}\r\n                                            image={\r\n                                                userService.imageLink +\r\n                                                profile?.cv?.image\r\n                                            }\r\n                                        />\r\n                                    ) : (\r\n                                        profile.roles[0].id === 3 &&\r\n                                        profile.enabled && (\r\n                                            <ProfileInfo\r\n                                                id={profile?.id}\r\n                                                name={profile?.name}\r\n                                                company={profile?.companyName}\r\n                                                role={profile?.roles[0]?.id}\r\n                                                image={\r\n                                                    userService.imageLink +\r\n                                                    profile?.company?.companyImage\r\n                                                }\r\n                                            />\r\n                                        )\r\n                                    )\r\n                                )\r\n                            ) : (\r\n                                <h1>No Result</h1>\r\n                            )}\r\n                        </>) : loading && (<CircularProgress />)}\r\n                </div>\r\n            </>) : (\r\n                <>\r\n                    <div className={styles.sidebarNav}>\r\n                        <div className={styles.infos}>\r\n                            <h4>{name}</h4>\r\n                            <h6>Mobile • 3h ago</h6>\r\n                        </div>\r\n                        <div className={styles.actions}>\r\n                            <IconButton aria-label=\"Delete\" color=\"secondary\" >\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                            <IconButton aria-label=\"More\" >\r\n                                <MoreHorizIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.infos1}>\r\n                        <Avatar alt={name} className={styles.avatar} src={userService.imageLink + img} />\r\n                        <h2>{name} <span> · {id}st</span></h2>\r\n                        <h6>DevOps Engineer at AB Conseils</h6>\r\n                    </div>\r\n                    <div className={styles.separator}>{date}</div>\r\n                    <div className={styles.feed} ref={feed} onScroll={handleScroll}>\r\n                        {\r\n                            top && (<IconButton className={styles.top} onClick={handleTop} aria-label=\"delete\">\r\n                                <ArrowUpwardIcon size=\"medium\" />\r\n                            </IconButton>)\r\n                        }\r\n\r\n                        {messages != \"Friendship not found\" && messages?.map((message) => {\r\n                            return message.senderId == id ? (<div className={styles.singleMessage}>\r\n                                <Avatar alt={name} className={styles.avatar} src={userService.imageLink + img} />\r\n                                <h6>{message.message}</h6>\r\n                                <IconButton aria-label=\"More\" >\r\n                                    <MoreHorizIcon />\r\n                                </IconButton>\r\n                            </div>) : (\r\n                                <div className={`${styles.singleMessage} ${styles.mine}`}>\r\n                                    <IconButton onClick={() => { deleteMessage(message.id) }} aria-label=\"Delete\" color=\"secondary\" >\r\n                                        <DeleteIcon />\r\n                                    </IconButton>\r\n                                    <IconButton aria-label=\"More\" >\r\n                                        <MoreHorizIcon />\r\n                                    </IconButton>\r\n                                    <h6>{message.message}</h6>\r\n                                </div>\r\n                            )\r\n\r\n                        })}\r\n                    </div>\r\n                    <div className={styles.message}>\r\n                        <TextareaAutosize className={styles.textarea} placeholder=\"Write a message\" onKeyPress={(e) => e.key === 'Enter' && sendMessage()} value={messagex} onChange={handleChange} rowsMin=\"2\" rowsMax=\"2\" />\r\n                        <div className={styles.footer}>\r\n                            <div className={styles.types}>\r\n                                <IconButton aria-label=\"File\" >\r\n                                    <AttachFileIcon />\r\n                                </IconButton>\r\n                                <IconButton aria-label=\"Image\" >\r\n                                    <ImageIcon />\r\n                                </IconButton>\r\n                                <IconButton aria-label=\"Gif\" >\r\n                                    <GifIcon />\r\n                                </IconButton>\r\n                                <IconButton aria-label=\"Gif\" >\r\n                                    <EmojiEmotionsIcon />\r\n                                </IconButton>\r\n                                <IconButton aria-label=\"Videos\" >\r\n                                    <VideoCallIcon />\r\n                                </IconButton>\r\n                            </div>\r\n                            <div className={styles.actions1}>\r\n                                <Button\r\n                                    onClick={sendMessage}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    disabled={loading2}\r\n                                    endIcon={<SendIcon />}\r\n                                >\r\n                                    Send\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </>)}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feed\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditImage.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation Children\\Footer.jsx",["516","517","518","519","520","521","522","523","524","525"],"import React from 'react'\r\nimport logo from \"./logo.png\";\r\nimport { Link } from \"react-router-dom\";\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"footer\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6 col-lg-3\">\r\n                <div className=\"footer-contact\">\r\n                  <Link to=\"/\">\r\n                  <img src={logo} alt=\"Logo\" className=\"logo\" />\r\n                  </Link>\r\n                  <hr />\r\n                  <p className=\"pp\">Le Forum Annuel Virtuel De L’Université Ibn Tofail est d’une part un moment d’échange et d’ouverture de l’université sur son environnement régional et national, puis d’autre part, c’est un moment ou le lauréat et étudiant se positionne et se projette.</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-3\">\r\n                <div className=\"footer-link\">\r\n                  <h2>Allez </h2>\r\n                  <a href=\"\"><i class=\"fas fa-caret-right\"></i>Accueil</a>\r\n                  <a href=\"#cliens\"><i class=\"fas fa-caret-right\"></i>A propos</a>\r\n                  <a href=\"#partenairess\"><i class=\"fas fa-caret-right\"></i>Partenaires</a>\r\n                  <a href=\"\"><i class=\"fas fa-caret-right\"></i>Contactez-nous</a>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-3\">\r\n                <div className=\"footer-link\">\r\n                  <h2>Liens utiles</h2>\r\n                  <a href=\"https://www.uit.ac.ma/\"><i class=\"fas fa-caret-right\"></i>Université IBN tofail </a>\r\n                  <a href=\"https://ensa.uit.ac.ma/\"><i class=\"fas fa-caret-right\"></i>ENSA- KENITRA</a>\r\n                  <a href=\"https://encg.uit.ac.ma/\"><i class=\"fas fa-caret-right\"></i>ENCG- KENITRA</a>\r\n                  <a href=\"https://cdc.uit.ac.ma/\"><i class=\"fas fa-caret-right\"></i>CDC- KENITRA</a>\r\n                  <a href=\"https://fsjes.uit.ac.ma/\"><i class=\"fas fa-caret-right\"></i>FSJES- KENITRA</a>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6 col-lg-3\">\r\n                <div className=\"footer-contact\">\r\n                  <h2>Nous contacter</h2>\r\n                  <p><i className=\"fa fa-map-marker-alt\"></i>&nbsp;Campus universitaire, B.P 241, Kénitra - 14 000 - Maroc</p>\r\n                  <p><i className=\"fa fa-phone-alt\"></i>&nbsp;+212 6 29 10 21 64</p>\r\n                  <p><i className=\"fa fa-envelope\"></i>&nbsp;info@example.com</p>\r\n\r\n                  <h2 className=\"hh\">Nous suivre</h2>\r\n                  <div className=\"footer-social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter\"></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f\"></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-youtube\"></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram\"></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\"></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"container footer-menu\">\r\n            <div className=\"f-menu\">\r\n              <a href=\"\">E-ENTREPRISE</a>\r\n              <a href=\"\">E-ETUDIANT</a>\r\n            </div>\r\n          </div>\r\n          <div className=\"container copyright\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <p>&copy; <a href=\"#\">2021 FORUM Université IBN TOFAIL</a>. Tous droits réservés</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation Children\\ContactUs.jsx",["526","527","528","529"],"import React, { useState, initialstate } from \"react\";\r\n\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport stylecontact from \"./stylecontact.module.css\"\r\nimport messageimg from \"./img/letter.svg\"\r\nimport contact from \"./contact.module.css\"\r\nimport userService from \"../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\nfunction validateEmail(email) {\r\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\nexport default function ContactUs() {\r\n  const [nameSend, setNameSend] = useState(\"\");\r\n  const [emailSend, setEmailSend] = useState(\"\");\r\n  const [telSend, setTelSend] = useState(\"\");\r\n  const [messageSend, setMessageSend] = useState(\"\");\r\n  const [successful, setSuccessful] = useState(initialstate);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const sendForm = async () => {\r\n\r\n    const contact = {\r\n      name: nameSend,\r\n      email: emailSend,\r\n      telephone: telSend,\r\n      message: messageSend,\r\n    }\r\n    if (nameSend == \"\") {\r\n      setOpen(true);\r\n      setMessage(\"Name should not be blank\");\r\n      setSuccessful(false)\r\n    }\r\n    else if (emailSend == \"\") {\r\n      setOpen(true);\r\n      setMessage(\"Email should not be blank\");\r\n      setSuccessful(false)\r\n    }\r\n    else if (telSend == \"\") {\r\n      setOpen(true);\r\n      setMessage(\"Telephone should not be blank\");\r\n      setSuccessful(false)\r\n    }\r\n    else if (messageSend == \"\") {\r\n      setOpen(true);\r\n      setMessage(\"Message should not be blank\");\r\n      setSuccessful(false)\r\n    }\r\n    else {\r\n      if (!validateEmail(emailSend)) {\r\n        setOpen(true);\r\n        setMessage(\"Email format not valid\");\r\n        setSuccessful(false)\r\n      }\r\n      else {\r\n        await userService.contactUs(contact).then(\r\n          (response) => {\r\n            setOpen(true);\r\n            setMessage(\"Sent\")\r\n            setSuccessful(true)\r\n          },\r\n          (error) => {\r\n            alert('A name was submitted: ' + nameSend);\r\n            setOpen(true);\r\n            setMessage(\"Error While sending the message\");\r\n            setSuccessful(false)\r\n          }\r\n        );\r\n      }\r\n\r\n\r\n    }\r\n\r\n  };\r\n  return (\r\n    <section id=\"contact-us\">\r\n    <div className={`${stylecontact.head}`}>\r\n\r\n      <div className={contact.contact1} data-aos=\"fade-up \" data-aos-duration=\"1000\">\r\n        <div className={contact.container1contact1}>\r\n          <div className={contact.contact11pic} data1tilt>\r\n            <img src={messageimg} alt=\"IMG\" />\r\n          </div>\r\n\r\n          <div className={contact.divv}>\r\n            <span className={contact.contact11form1title}>\r\n              Contactez-nous\r\n            </span>\r\n\r\n            <div className={contact.wrap1input1} data1validate=\"Name is required\">\r\n              <input className={contact.input1} type=\"text\" name=\"name\" value={nameSend} placeholder=\"Name\"\r\n                onChange={(e) => setNameSend(e.target.value)}\r\n              />\r\n              <span className={contact.shadow1input1}></span>\r\n            </div>\r\n\r\n            <div className={contact.wrap1input1} data1validate=\"Valid email is required: ex@abc.xyz\">\r\n              <input className={contact.input1} type=\"text\" name=\"email\" value={emailSend} placeholder=\"Email\"\r\n                onChange={(e) => setEmailSend(e.target.value)}\r\n              />\r\n              <span className={contact.shadow1input1}></span>\r\n            </div>\r\n\r\n            <div className={contact.wrap1input1} data1validate=\"numero de telephone is required\">\r\n              <input className={contact.input1} type=\"text\" name=\"tel\" value={telSend} placeholder=\"numero de telephone\"\r\n                onChange={(e) => setTelSend(e.target.value)}\r\n              />\r\n              <span className={contact.shadow1input1}></span>\r\n            </div>\r\n\r\n            <div className={contact.wrap1input1} data1validate=\"Message is required\">\r\n              <textarea className={contact.input1} name=\"message\" value={messageSend} placeholder=\"Message\"\r\n                onChange={(e) => setMessageSend(e.target.value)}\r\n              ></textarea>\r\n              <span className={contact.shadow1input1}></span>\r\n            </div>\r\n\r\n            <div className={contact.container1contact11form1btn}>\r\n              <button\r\n                className={contact.contact11form1btn}\r\n                onClick={() => {\r\n                  sendForm();\r\n                }}\r\n              >\r\n                <span>\r\n                  Send\r\n                </span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\r\n        <Alert\r\n          onClose={handleClose}\r\n          severity={successful ? \"success\" : \"error\"}\r\n        >\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n    </section>\r\n\r\n\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCompany\\EditAboutCompany.jsx",["530"],"import React, { useState, initialState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// import \"../../css/cv.css\";\r\nimport Input from \"react-phone-number-input/input\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../../../services/userService\";\r\nimport Socials from \"../../SetProfile/SetCompany/AddCompany Components/CompanySocials\"\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    fontSize: \"30\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  route: {\r\n    width: \"85%\",\r\n  },\r\n}));\r\n\r\nconst About = (props) => {\r\n  // MATERIAL UI STYLING AL3ABD\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClick = (e) => {\r\n    const errors1 = [];\r\n    if (address.length === 0 || city.length === 0)\r\n      errors1.push(\"Adrress cannot be empty\");\r\n    if (!number) errors1.push(\"Number cannot be empty\");\r\n    if (number?.length < 11)\r\n      errors1.push(\"Your number should be like 0663-123123\");\r\n    if (bio?.length === 0) errors1.push(\"Bio must not be empty\");\r\n    if (errors1.length > 0) {\r\n      setMessage(errors1);\r\n      setTimeout(setOpen(true), 500);\r\n      return 0;\r\n    }\r\n    update(e);\r\n    setTimeout(setOpen(true), 500);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n    setSuccessful(false);\r\n  };\r\n\r\n  const [bio, setBio] = useState(props?.data?.bio);\r\n  const [address, setAddress] = useState(props?.data?.address);\r\n  const [city, setCity] = useState(props?.data?.city);\r\n  const [number, setNumber] = useState(props?.data?.number);\r\n\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(initialState);\r\n\r\n  const handleAddressChange = (e) => {\r\n    const value = e.target.value;\r\n    setAddress(value);\r\n  };\r\n\r\n  const handleCityChange = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (e) => {\r\n    const value = e;\r\n    setNumber(value);\r\n  };\r\n\r\n  const handleBioChange = (e) => {\r\n    setBio(e.target.value);\r\n  };\r\n\r\n  const update = (e) => {\r\n    let about = {\r\n      address: address,\r\n      city: city,\r\n      number: number,\r\n      bio: bio,\r\n    };\r\n    userService.updateAboutCompany(props?.id, about)\r\n  };\r\n\r\n  return (\r\n    <div className={classes.route}>\r\n      <form>\r\n        <div className=\"form-group row  align-items-center\">\r\n          <label for=\"number\" className=\"col-1 col-form-label\">\r\n            Enterprise location:\r\n          </label>\r\n          <div className=\"col-7 mr-2\">\r\n            {\" \"}\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"Address\"\r\n              value={address}\r\n              onChange={handleAddressChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-2\">\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"City\"\r\n              value={city}\r\n              onChange={handleCityChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row  align-items-center\">\r\n          <label for=\"example-tel-input\" class=\"col-2 col-form-label\">\r\n            Telephone :\r\n          </label>\r\n          <div className=\"col-6\">\r\n            <Input\r\n              className=\"form-control mt-2\"\r\n              country=\"MA\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              value={number}\r\n              placeholder=\"Number\"\r\n              onChange={handleNumberChange}\r\n              id=\"example-tel-input\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group row  align-items-center\">\r\n          <label for=\"bio\" class=\"col-2 col-form-label\">\r\n            Enterprise Bio:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            className=\"inputs form-control col-sm-12 mt-2\"\r\n            rows=\"4\"\r\n            name=\"bio\"\r\n            id=\"comment\"\r\n            maxLength=\"400\"\r\n            placeholder=\"Bio\"\r\n            style={{\r\n              backgroundColor: \"#f3f2ef\",\r\n              resize: \"none\",\r\n            }}\r\n            value={bio}\r\n            onChange={handleBioChange}\r\n          ></textarea>\r\n        </div>\r\n        <Socials />\r\n        <div className={classes.root + \" btnholder\"}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={(e) => {\r\n              props.onChange(true);\r\n              handleClick();\r\n            }}\r\n          >\r\n            Edit\r\n          </Button>\r\n          <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert\r\n              onClose={handleClose}\r\n              severity={successful ? \"success\" : \"error\"}\r\n            >\r\n              {typeof message == \"string\"\r\n                ? message\r\n                : message?.map((message1) => (\r\n                  <span>\r\n                    -{message1}\r\n                    <br />\r\n                  </span>\r\n                ))}\r\n            </Alert>\r\n          </Snackbar>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default About;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditAwards.jsx",["531","532"],"import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  textfield: {\r\n    marginTop: \"10px\",\r\n    marginRight: \"1vw\",\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: \"39vw\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(20),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  button: {\r\n    margin: \"1vw 1vh\",\r\n    justifyContent: \"center\",\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst Award = (props) => {\r\n  //POST STATES\r\n  const [organizer, setOrganizer] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [position, setPosition] = useState(\"\");\r\n\r\n  // STYLE STATES\r\n  const [open, setOpen] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  // RESPONSE STATES\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [data, setData] = useState();\r\n\r\n  //MAKESTYLES\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getAward();\r\n      setData(result.data);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n\r\n  const handleOrganizer = (e) => {\r\n    setOrganizer(e.target.value);\r\n  };\r\n  const handleName = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n  const handlePosition = (e) => {\r\n    setPosition(e.target.value);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  const upload = () => {\r\n    const errors = [];\r\n    if (organizer.length === 0) errors.push(\"Fields must not be empty.\\n\");\r\n    if (name.length === 0) errors.push(\"Fields must not be empty.\\n\");\r\n    if (!position.match(\"^[0-9]+$\")) errors.push(\"Position must be a number.\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    // console.log(typeof parseInt(position));\r\n    setModalShow(false);\r\n    userService.uploadAward(organizer, name, position)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setOrganizer(\"\");\r\n    setName(\"\");\r\n    setPosition(\"\");\r\n  };\r\n\r\n  const deleteById = (id) => {\r\n    userService.deleteAward(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Button\r\n          onClick={() => setModalShow(true)}\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          size=\"medium\"\r\n          startIcon={\r\n            <AddCircleOutlinedIcon\r\n              style={{\r\n                maxWidth: \"30px\",\r\n                maxHeight: \"30px\",\r\n                minWidth: \"30px\",\r\n                minHeight: \"30px\",\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Modal\r\n          show={modalShow}\r\n          color=\"primary\"\r\n          onHide={() => setModalShow(false)}\r\n          size=\"md\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"center\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Organizer\"\r\n                    value={organizer}\r\n                    onChange={handleOrganizer}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Name\"\r\n                    value={name}\r\n                    onChange={handleName}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Position\"\r\n                    value={position}\r\n                    onChange={handlePosition}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert severity=\"error\">{message}</Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                upload();\r\n                setSuccessful(false);\r\n              }}\r\n            >\r\n              Upload\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"simple table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Organizer</TableCell>\r\n                <TableCell>Competition Name</TableCell>\r\n                <TableCell>Position</TableCell>\r\n                <TableCell>Delete</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data?.map((obj) => (\r\n                <TableRow key={obj}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {obj.organizer}\r\n                  </TableCell>\r\n                  <TableCell>{obj.name}</TableCell>\r\n                  <TableCell>{obj.position}</TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <DeleteIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setTimeout(deleteById(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Award;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditSoftware.jsx",["533","534"],"import React, { useState, useEffect } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"react-select\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst statusOptions = [\r\n  { value: \"Photoshop\", label: \"Photoshop\", icon: \"fab fa-fonticons\" },\r\n  { value: \"Git\", label: \"Git\", icon: \"fab fa-git-alt\" },\r\n  { value: \"Wordpress\", label: \"Wordpress\", icon: \"fab fa-wordpress\" },\r\n  {\r\n    value: \"RasbperryPi\",\r\n    label: \"RasbperryPi\",\r\n    icon: \"fab fa-raspberry-pi\",\r\n  },\r\n];\r\n\r\nconst marks = [\r\n  {\r\n    value: 1,\r\n    label: \"1\",\r\n  },\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n];\r\n\r\nconst SkillForm = (props) => {\r\n  //skill comp\r\n  // const classes = useStyles();\r\n  const [data, setData] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [name, setName] = useState(\"Photoshop\");\r\n  const [skillValue, setSkillValue] = useState();\r\n  const [icon, setIcon] = useState(\"fab fa-fonticons fa-3x\");\r\n  let selected = [];\r\n  const [disabled, setDisabled] = useState(false);\r\n  //snackbar\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getSoftware()\r\n      setData(result.data);\r\n      setSuccessful(false);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n  const upload = () => {\r\n    const value = skillValue;\r\n    userService.uploadSoftware(name, value, icon)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setMessage(\"Added\");\r\n          handleClick();\r\n          setDisabled(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteSoftware(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setMessage(\"Deleted!\");\r\n        handleClick();\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const skillPicker = (e) => {\r\n    setName(e.value);\r\n    setIcon(e.icon);\r\n    setDisabled(false);\r\n  };\r\n  // const deleteByType = (type) => {\r\n  //   setSkills(skills.filter((skill) => skill.type !== type));\r\n  //   setSelected(selected.filter((select) => select !== type));\r\n  //   setDisabled(!disabled);\r\n  // };\r\n  const skValue = (value) => {\r\n    setSkillValue(value);\r\n  };\r\n  const singleOption = ({ data }) => (\r\n    <div className=\"input-select\">\r\n      <div className=\"input-select__single-value d-flex justify-content-center\">\r\n        <i className={data.icon} />\r\n        &nbsp; &nbsp;\r\n        <span style={{ fontSize: \"1.5vw\" }}>&nbsp;{data.label}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <FormControl className=\"col-12\">\r\n        <div className=\"form\">\r\n          <div className=\"form-group col-md-12\">\r\n            <label>Software :</label>\r\n            <Select\r\n              defaultValue={statusOptions[0]}\r\n              options={statusOptions}\r\n              onChange={skillPicker}\r\n              components={{ SingleValue: singleOption }}\r\n              isOptionDisabled={(option) =>\r\n                selected.indexOf(option.value) !== -1\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"col-md-10\">\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Proficiency:\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={5}\r\n              getAriaValueText={skValue}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks={marks}\r\n              min={1}\r\n              max={10}\r\n            />\r\n          </div>\r\n          <div className=\"row col-md-10 justify-content-around\">\r\n            <div className=\"col-3\">\r\n              <Button\r\n                onClick={() => {\r\n                  upload();\r\n                }}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                disabled={disabled}\r\n                startIcon={\r\n                  <AddCircleOutlinedIcon\r\n                    style={{\r\n                      maxWidth: \"30px\",\r\n                      maxHeight: \"30px\",\r\n                      minWidth: \"30px\",\r\n                      minHeight: \"30px\",\r\n                    }}\r\n                  />\r\n                }\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </FormControl>\r\n      <div className=\"responsive-table flex-fill\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <th>Skill / Software</th>\r\n            <th>Proficiency</th>\r\n            <th>Delete</th>\r\n          </thead>\r\n          <tbody>\r\n            {data?.map((dev) => (\r\n              <tr className=\"mt-10\">\r\n                <td>\r\n                  <i class={dev.icon} />{\" \"}\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.name}</span>\r\n                </td>\r\n                <td>\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.value}</span>\r\n                </td>\r\n                <td>\r\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\r\n                    <DeleteIcon\r\n                      className=\"pt-0\"\r\n                      style={{ color: \"#df4759\" }}\r\n                      onClick={() => {\r\n                        setTimeout(deleteById(dev.id), 500);\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillForm;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditNormalLanguages.jsx",["535","536"],"import React, { useState, useEffect } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"react-select\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst statusOptions = [\r\n  { value: \"French\", label: \"French\" },\r\n  { value: \"English\", label: \"English\" },\r\n  { value: \"Arabic\", label: \"Arabic\" },\r\n  { value: \"Spanish\", label: \"Spanish\" },\r\n];\r\n\r\nconst marks = [\r\n  {\r\n    value: 1,\r\n    label: \"1\",\r\n  },\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n];\r\n\r\nconst SkillForm = (props) => {\r\n  //skill comp\r\n  const [data, setData] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [name, setName] = useState(\"French\");\r\n  const [skillValue, setSkillValue] = useState();\r\n  let selected = [];\r\n  const [disabled, setDisabled] = useState(false);\r\n\r\n  //snackbar\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getNormalLang();\r\n      setData(result.data);\r\n      setSuccessful(false);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n  const upload = () => {\r\n    const value = skillValue;\r\n    userService.uploadNormalLang(name, value)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setMessage(\"Added\");\r\n          handleClick();\r\n          setDisabled(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteNormalLang(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setMessage(\"Deleted!\");\r\n        handleClick();\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const skillPicker = (e) => {\r\n    setName(e.value);\r\n    setDisabled(false);\r\n  };\r\n\r\n  const skValue = (value) => {\r\n    setSkillValue(value);\r\n  };\r\n\r\n  const singleOption = ({ data }) => (\r\n    <div className=\"input-select\">\r\n      <div className=\"input-select__single-value d-flex justify-content-center\">\r\n        <span style={{ fontSize: \"1.5vw\" }}>&nbsp;{data.label}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <FormControl>\r\n        <div className=\"form\">\r\n          <div className=\"form-group col-12\">\r\n            <label>Languages :</label>\r\n            <Select\r\n              defaultValue={statusOptions[0]}\r\n              options={statusOptions}\r\n              onChange={skillPicker}\r\n              components={{ SingleValue: singleOption }}\r\n              isOptionDisabled={(option) =>\r\n                selected.indexOf(option.value) !== -1\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"col-10\">\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Proficiency:\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={5}\r\n              getAriaValueText={skValue}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks={marks}\r\n              min={1}\r\n              max={10}\r\n            />\r\n          </div>\r\n          <div className=\"row col-md-10 justify-content-around\">\r\n            <div className=\"col-3\">\r\n              <Button\r\n                onClick={upload}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                disabled={disabled}\r\n                startIcon={\r\n                  <AddCircleOutlinedIcon\r\n                    style={{\r\n                      maxWidth: \"30px\",\r\n                      maxHeight: \"30px\",\r\n                      minWidth: \"30px\",\r\n                      minHeight: \"30px\",\r\n                    }}\r\n                  />\r\n                }\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </FormControl>\r\n      <div className=\"responsive-table flex-fill\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <th>Skill</th>\r\n            <th>Proficiency</th>\r\n            <th>Delete</th>\r\n          </thead>\r\n          <tbody>\r\n            {data?.map((lng) => (\r\n              <tr className=\"mt-10\">\r\n                <td>{lng.name}</td>\r\n                <td>{lng.value}</td>\r\n                <td>\r\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\r\n                    <DeleteIcon\r\n                      style={{ color: \"#df4759\" }}\r\n                      className=\"pt-0\"\r\n                      onClick={() => {\r\n                        setTimeout(deleteById(lng.id), 500);\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillForm;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditDevLanguages.jsx",["537","538"],"import React, { useState, useEffect } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"react-select\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst statusOptions = [\r\n  { value: \"HTML5\", label: \"HTML5\", icon: \"fab fa-html5\" },\r\n  { value: \"CSS3\", label: \"CSS3\", icon: \"fab fa-css3-alt\" },\r\n  { value: \"Java\", label: \"Java\", icon: \"fab fa-java\" },\r\n  { value: \"JavaScript\", label: \"JavaScript\", icon: \"fab fa-js-square\" },\r\n  { value: \"PHP\", label: \"PHP\", icon: \"fab fa-php\" },\r\n  { value: \"Laravel\", label: \"Laravel\", icon: \"fab fa-laravel\" },\r\n  { value: \"Python\", label: \"Python\", icon: \"fab fa-python\" },\r\n  { value: \"Angular\", label: \"Angular\", icon: \"fab fa-angular\" },\r\n  { value: \"ReactJS\", label: \"ReactJS\", icon: \"fab fa-react\" },\r\n];\r\n\r\nconst marks = [\r\n  {\r\n    value: 1,\r\n    label: \"1\",\r\n  },\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n];\r\n\r\nconst SkillForm = (props) => {\r\n  //skill comp\r\n  // const classes = useStyles();\r\n  const [data, setData] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [name, setName] = useState(\"HTML5\");\r\n  const [skillValue, setSkillValue] = useState();\r\n  const [icon, setIcon] = useState(\"fab fa-html5 fa-3x\");\r\n  let selected = [];\r\n  const [disabled, setDisabled] = useState(false);\r\n  //snackbar\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getDevLang()\r\n      setData(result.data);\r\n      setSuccessful(false);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n  const upload = () => {\r\n    const value = skillValue;\r\n    userService.uploadDevLang(name, value, icon)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setMessage(\"Added\");\r\n          handleClick();\r\n          setDisabled(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteDevLang(id).then((response) => {\r\n      setSuccessful(true);\r\n      setMessage(\"Deleted!\");\r\n      handleClick();\r\n      setSuccessful(false);\r\n    });\r\n  };\r\n\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const skillPicker = (e) => {\r\n    setName(e.value);\r\n    setIcon(e.icon);\r\n    setDisabled(false);\r\n  };\r\n\r\n  const skValue = (value) => {\r\n    setSkillValue(value);\r\n  };\r\n  const singleOption = ({ data }) => (\r\n    <div className=\"input-select\">\r\n      <div className=\"input-select__single-value d-flex justify-content-center\">\r\n        <i className={data.icon + \" fa-2x\"} />\r\n        &nbsp; &nbsp;\r\n        <span style={{ fontSize: \"1.5vw\" }}>&nbsp;{data.label}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <FormControl className=\"w-100\">\r\n        <div className=\"form\">\r\n          <div className=\"form-group col-12\">\r\n            <label>Developing Skills :</label>\r\n            <Select\r\n              defaultValue={statusOptions[0]}\r\n              options={statusOptions}\r\n              onChange={skillPicker}\r\n              components={{ SingleValue: singleOption }}\r\n              isOptionDisabled={(option) =>\r\n                selected.indexOf(option.value) !== -1\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12\">\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Proficiency:\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={5}\r\n              getAriaValueText={skValue}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks={marks}\r\n              min={1}\r\n              max={10}\r\n            />\r\n          </div>\r\n          <div className=\"row col-md-10 justify-content-around\">\r\n            <div className=\"col-2 mb-2\">\r\n              <Button\r\n                onClick={() => {\r\n                  upload();\r\n                }}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                disabled={disabled}\r\n                startIcon={\r\n                  <AddCircleOutlinedIcon\r\n                    style={{\r\n                      maxWidth: \"30px\",\r\n                      maxHeight: \"30px\",\r\n                      minWidth: \"30px\",\r\n                      minHeight: \"30px\",\r\n                    }}\r\n                  />\r\n                }\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </FormControl>\r\n      <div className=\"responsive-table flex-fill row\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <th>Language</th>\r\n            <th>Proficiency</th>\r\n            <th>Delete</th>\r\n          </thead>\r\n          <tbody>\r\n            {data?.map((dev) => (\r\n              <tr className=\"mt-10\">\r\n                <td>\r\n                  <i class={`${dev.icon} fa-3x`} />{\" \"}\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.name}</span>\r\n                </td>\r\n                <td>\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.value}</span>\r\n                </td>\r\n                <td>\r\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\r\n                    <DeleteIcon\r\n                      className=\"pt-0\"\r\n                      style={{ color: \"#df4759\" }}\r\n                      onClick={() => {\r\n                        setTimeout(deleteById(dev.id), 500);\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillForm;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditEducation.jsx",["539","540"],"import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  textfield: {\r\n    marginTop: \"10px\",\r\n    marginRight: \"1vw\",\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: \"54vw\",\r\n  },\r\n  dates: {\r\n    paddingTop: \"10px\",\r\n    marginLeft: \"5vw\",\r\n    width: \"60%\",\r\n    outline: \"none\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(20),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  button: {\r\n    margin: \"1vw 1vh\",\r\n    justifyContent: \"center\",\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst EditEducation = (props) => {\r\n  //POST STATES\r\n  let [dateStart, setStartDate] = useState(new Date());\r\n  let [dateEnd, setEndDate] = useState(new Date());\r\n  const [school, setSchool] = useState(\"\");\r\n  const [diploma, setDiploma] = useState(\"\");\r\n  const [field, setField] = useState(\"\");\r\n\r\n  // STYLE STATES\r\n  const [open, setOpen] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  // RESPONSE STATES\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // whole profile from parent\r\n  // const data = props.data;\r\n\r\n  //Get data to fill table\r\n  const [getRequest, setGetRequest] = useState();\r\n\r\n  //MAKESTYLES\r\n  const classes = useStyles();\r\n\r\n  //toggle to show update or upload\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  //currently editing education id\r\n  const [editId, setEditId] = useState();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getEducation()\r\n      setGetRequest(result.data);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n\r\n  const handleStart = (date) => {\r\n    setStartDate(date);\r\n  };\r\n\r\n  const handleEnd = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  const handleSchool = (e) => {\r\n    setSchool(e.target.value);\r\n  };\r\n  const handleDiploma = (e) => {\r\n    setDiploma(e.target.value);\r\n  };\r\n  const handleField = (e) => {\r\n    setField(e.target.value);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const upload = () => {\r\n    const errors = [];\r\n    if (school.length === 0) errors.push(\"Fields must not be empty\");\r\n    if (dateEnd <= dateStart) {\r\n      errors.push(\"End date can't be inferior or equal to start date!\");\r\n    }\r\n    if (diploma.length === 0) errors.push(\"Fields must not be empty\");\r\n    if (field.length === 0) errors.push(\"Fields must not be empty\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    setModalShow(false);\r\n    dateStart = dateStart.toString().substring(4, 15);\r\n    dateEnd = dateEnd.toString().substring(4, 15);\r\n    userService.uploadEducation(school, diploma, dateStart, dateEnd, field)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setSchool(\"\");\r\n    setDiploma(\"\");\r\n    setField(\"\");\r\n    setStartDate(new Date());\r\n    setEndDate(new Date());\r\n  };\r\n\r\n  const openUpdate = (id) => {\r\n    const getData = async (id) => {\r\n      const res = await userService.getEducationById(id)\r\n      setSchool(res?.data?.school);\r\n      setDiploma(res?.data?.diploma);\r\n      setField(res?.data?.field);\r\n      setStartDate(res?.data?.dateStart);\r\n      setEndDate(res?.data?.dateEnd);\r\n    };\r\n    getData(id);\r\n    setTimeout(setModalShow(true), 500);\r\n  };\r\n\r\n  const update = (id) => {\r\n    const errors = [];\r\n    if (school.length === 0) errors.push(\"Fields must not be empty\");\r\n    if (dateEnd <= dateStart) {\r\n      errors.push(\"End date can't be inferior or equal to start date!\");\r\n    }\r\n    if (diploma.length === 0) errors.push(\"Fields must not be empty\");\r\n    if (field.length === 0) errors.push(\"Fields must not be emepty\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    dateStart = dateStart.toString().substring(4, 15);\r\n    dateEnd = dateEnd.toString().substring(4, 15);\r\n    const education = {\r\n      school: school,\r\n      diploma: diploma,\r\n      dateStart: dateStart,\r\n      dateEnd: dateEnd,\r\n      field: field,\r\n    };\r\n    userService.editEducation(id, education)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(!props.toggle);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setModalShow(false);\r\n  };\r\n\r\n  const deleteById = (id) => {\r\n    userService.deleteEducation(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Button\r\n          onClick={() => {\r\n            setSchool(\"\");\r\n            setDiploma(\"\");\r\n            setField(\"\");\r\n            setStartDate(new Date());\r\n            setEndDate(new Date());\r\n            setModalShow(true);\r\n            setToggle(false);\r\n          }}\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          size=\"medium\"\r\n          startIcon={\r\n            <AddCircleOutlinedIcon\r\n              style={{\r\n                maxWidth: \"30px\",\r\n                maxHeight: \"30px\",\r\n                minWidth: \"30px\",\r\n                minHeight: \"30px\",\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Modal\r\n          show={modalShow}\r\n          color=\"primary\"\r\n          onHide={() => setModalShow(false)}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"space-between\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"School\"\r\n                    value={school}\r\n                    onChange={handleSchool}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Diploma\"\r\n                    value={diploma}\r\n                    onChange={handleDiploma}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Field\"\r\n                    value={field}\r\n                    onChange={handleField}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"Start Date\"\r\n                      value={dateStart}\r\n                      onChange={handleStart}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"End Date\"\r\n                      value={dateEnd}\r\n                      onChange={handleEnd}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert\r\n                onClose={handleClose}\r\n                severity={successful ? \"success\" : \"error\"}\r\n              >\r\n                {typeof message == \"string\"\r\n                  ? message\r\n                  : message?.map((message1) => (\r\n                    <span>\r\n                      -{message1}\r\n                      <br />\r\n                    </span>\r\n                  ))}\r\n              </Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            {toggle && (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  update(editId);\r\n                  setSuccessful(false);\r\n                }}\r\n              >\r\n                Update\r\n              </Button>\r\n            )}\r\n            {!toggle && (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  upload();\r\n                  setSuccessful(false);\r\n                }}\r\n              >\r\n                Upload\r\n              </Button>\r\n            )}\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"simple table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>School</TableCell>\r\n                <TableCell>Diploma</TableCell>\r\n                <TableCell>Edit</TableCell>\r\n                <TableCell>Delete</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {getRequest?.map((obj) => (\r\n                <TableRow key={obj}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {obj.school}\r\n                  </TableCell>\r\n                  <TableCell>{obj.diploma}</TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <EditIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setToggle(true);\r\n                          setEditId(obj.id);\r\n                          setTimeout(openUpdate(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <DeleteIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setTimeout(deleteById(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default EditEducation;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditExperience.jsx",["541","542"],"import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../services/authHeader\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  textfield: {\r\n    marginTop: \"10px\",\r\n    marginRight: \"1vw\",\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: \"54vw\",\r\n  },\r\n  dates: {\r\n    paddingTop: \"10px\",\r\n    marginLeft: \"5vw\",\r\n    width: \"60%\",\r\n    outline: \"none\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(20),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  button: {\r\n    margin: \"1vw 1vh\",\r\n    justifyContent: \"center\",\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst EditExperience = (props) => {\r\n  //POST STATES\r\n  let [dateStart, setStartDate] = useState(new Date());\r\n  let [dateEnd, setEndDate] = useState(new Date());\r\n  const [occupation, setOccupaton] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n\r\n  // STYLE STATES\r\n  const [open, setOpen] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  // RESPONSE STATES\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  // whole profile from parent\r\n  // const data = props.data;\r\n\r\n  //Get data to fill table\r\n  const [getRequest, setGetRequest] = useState();\r\n\r\n  //MAKESTYLES\r\n  const classes = useStyles();\r\n\r\n  //toggle to show update or upload\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  //currently editing experience id\r\n  const [editId, setEditId] = useState();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getExperience()\r\n      setGetRequest(result.data);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n\r\n  const handleStart = (date) => {\r\n    setStartDate(date);\r\n  };\r\n\r\n  const handleEnd = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  const handleOccupation = (e) => {\r\n    setOccupaton(e.target.value);\r\n  };\r\n  const handleCompany = (e) => {\r\n    setCompany(e.target.value);\r\n  };\r\n  const handleDescription = (e) => {\r\n    setDescription(e.target.value);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const upload = () => {\r\n    const errors = [];\r\n    if (occupation.length === 0) errors.push(\"Occupation must not be empty\");\r\n    if (dateEnd <= dateStart) {\r\n      errors.push(\"End date can't be inferior or equal to start date!\");\r\n    }\r\n    if (company.length === 0) errors.push(\"Company must not be empty\");\r\n    if (description.length === 0) errors.push(\"Description must not be emepty\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    setModalShow(false);\r\n    dateStart = dateStart.toString().substring(4, 15);\r\n    dateEnd = dateEnd.toString().substring(4, 15);\r\n    userService.uploadExperience(occupation, company, dateStart, dateEnd, description)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setCompany(\"\");\r\n    setOccupaton(\"\");\r\n    setDescription(\"\");\r\n    setStartDate(new Date());\r\n    setEndDate(new Date());\r\n  };\r\n\r\n  const openUpdate = (id) => {\r\n    const getData = async (id) => {\r\n      const res = await userService.getExperienceById(id);\r\n      setCompany(res?.data?.company);\r\n      setOccupaton(res?.data?.occupation);\r\n      setDescription(res?.data?.description);\r\n      setStartDate(res?.data?.dateStart);\r\n      setEndDate(res?.data?.dateEnd);\r\n    };\r\n    getData(id);\r\n    setTimeout(setModalShow(true), 500);\r\n  };\r\n\r\n  const update = (id) => {\r\n    const errors = [];\r\n    if (occupation.length === 0) errors.push(\"Occupation must not be empty\");\r\n    if (dateEnd <= dateStart) {\r\n      errors.push(\"End date can't be inferior or equal to start date!\");\r\n    }\r\n    if (company.length === 0) errors.push(\"Company must not be empty\");\r\n    if (description.length === 0) errors.push(\"Description must not be emepty\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n\r\n    dateStart = dateStart.toString().substring(4, 15);\r\n    dateEnd = dateEnd.toString().substring(4, 15);\r\n    const experience = {\r\n      occupation: occupation,\r\n      company: company,\r\n      dateStart: dateStart,\r\n      dateEnd: dateEnd,\r\n      description: description,\r\n    };\r\n    userService.editExperience(id, experience)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(!props.toggle);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setModalShow(false);\r\n  };\r\n\r\n  const deleteById = (id) => {\r\n    userService.deleteExperience(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Button\r\n          onClick={() => {\r\n            setCompany(\"\");\r\n            setOccupaton(\"\");\r\n            setDescription(\"\");\r\n            setStartDate(new Date());\r\n            setEndDate(new Date());\r\n            setModalShow(true);\r\n            setToggle(false);\r\n          }}\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          size=\"medium\"\r\n          startIcon={\r\n            <AddCircleOutlinedIcon\r\n              style={{\r\n                maxWidth: \"30px\",\r\n                maxHeight: \"30px\",\r\n                minWidth: \"30px\",\r\n                minHeight: \"30px\",\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Modal\r\n          show={modalShow}\r\n          color=\"primary\"\r\n          onHide={() => setModalShow(false)}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"space-between\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Company\"\r\n                    value={company}\r\n                    onChange={handleCompany}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Occupation\"\r\n                    value={occupation}\r\n                    onChange={handleOccupation}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Description\"\r\n                    value={description}\r\n                    onChange={handleDescription}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"Start Date\"\r\n                      value={dateStart}\r\n                      onChange={handleStart}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"End Date\"\r\n                      value={dateEnd}\r\n                      onChange={handleEnd}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert\r\n                onClose={handleClose}\r\n                severity={successful ? \"success\" : \"error\"}\r\n              >\r\n                {typeof message == \"string\"\r\n                  ? message\r\n                  : message?.map((message1) => (\r\n                    <span>\r\n                      -{message1}\r\n                      <br />\r\n                    </span>\r\n                  ))}\r\n              </Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            {toggle && (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  update(editId);\r\n                  setSuccessful(false);\r\n                }}\r\n              >\r\n                Update\r\n              </Button>\r\n            )}\r\n            {!toggle && (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  upload();\r\n                  setSuccessful(false);\r\n                }}\r\n              >\r\n                Upload\r\n              </Button>\r\n            )}\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"simple table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Company</TableCell>\r\n                <TableCell>Occupation</TableCell>\r\n                <TableCell>Edit</TableCell>\r\n                <TableCell>Delete</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {getRequest?.map((obj) => (\r\n                <TableRow key={obj}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {obj.company}\r\n                  </TableCell>\r\n                  <TableCell>{obj.occupation}</TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <EditIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setToggle(true);\r\n                          setEditId(obj.id);\r\n                          setTimeout(openUpdate(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <DeleteIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setTimeout(deleteById(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default EditExperience;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditAbout.jsx",["543","544"],"import React, { useState, initialState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Input from \"react-phone-number-input/input\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport Socials from \"./EditSocials\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport userService from \"../../../../services/userService\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  route: {\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nconst EditAbout = (props) => {\r\n  // MATERIAL UI STYLING AL3ABD\r\n  const classes = useStyles();\r\n  const data = props.data;\r\n\r\n  const handleClick = (e) => {\r\n    const errors1 = [];\r\n\r\n    // if (bio?.length === 0) errors1.push(\"Bio must not be empty\");\r\n    // if (interests?.length === 0) errors1.push(\"Interests must not be empty\");\r\n    if (errors1.length > 0) {\r\n      setMessage(errors1);\r\n      return 0;\r\n    }\r\n    update(e);\r\n  };\r\n\r\n  const [bio, setBio] = useState(data?.bio);\r\n  const [address, setAddress] = useState(data?.address);\r\n  const [city, setCity] = useState(data?.city);\r\n  const [number, setNumber] = useState(data?.number);\r\n  const [interests, setInterests] = useState(data?.interests);\r\n  const [domaine, setDomaine] = useState(data?.domaine);\r\n\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(initialState);\r\n\r\n  const handleAddressChange = (e) => {\r\n    const value = e.target.value;\r\n    setAddress(value);\r\n  };\r\n\r\n  const handleCityChange = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (e) => {\r\n    const value = e;\r\n    setNumber(value);\r\n  };\r\n\r\n  const handleBioChange = (e) => {\r\n    setBio(e.target.value);\r\n  };\r\n\r\n  const handleInterestsChange = (e) => {\r\n    const value = e.target.value;\r\n    setInterests(value);\r\n  };\r\n  const handleDomaineChange = (e) => {\r\n    setDomaine(e.target.value);\r\n  };\r\n\r\n  const update = (e) => {\r\n    let abut = {\r\n      firstName:data?.firstName,\r\n      lastName:data?.lastName,\r\n      address: address,\r\n      city: city,\r\n      number: number,\r\n      bio: bio,\r\n      interests: interests,\r\n      domaine: domaine,\r\n    };\r\n    console.log(abut);\r\n    userService.updateAbout(props?.id, abut).then(\r\n      (response) => {\r\n        setMessage(response.data.message);\r\n        setSuccessful(!props.toggle);\r\n        props.onChange(true);\r\n      },\r\n      (error) => {\r\n        const resMessage =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n        setMessage(resMessage);\r\n        setSuccessful(false);\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form>\r\n        <div className=\"form-group row  align-items-center\">\r\n          <label for=\"number\" className=\"col-1 col-form-label\">\r\n            Address:\r\n          </label>\r\n          <div className=\"col-7 mr-2\">\r\n            {\" \"}\r\n            <input\r\n              className=\"form-control mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"Address\"\r\n              value={address}\r\n              onChange={handleAddressChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-3\">\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"City\"\r\n              value={city}\r\n              onChange={handleCityChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row  align-items-center\">\r\n          <label for=\"example-tel-input\" class=\"col-3 col-form-label\">\r\n            Telephone :\r\n          </label>\r\n          <div className=\"col-5\">\r\n            <Input\r\n              className=\"form-control mt-2\"\r\n              country=\"MA\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              value={number}\r\n              placeholder=\"Number\"\r\n              onChange={handleNumberChange}\r\n              id=\"example-tel-input\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row align-items-center\">\r\n          <label for=\"example-tel-input\" class=\"col-sm-2 col-form-label\">\r\n            Filière:\r\n          </label>\r\n          <div className=\"col-sm-5\">\r\n            <Form.Control\r\n              as=\"select\"\r\n              onChange={handleDomaineChange}\r\n              defaultValue={domaine}\r\n            >\r\n              <option value=\"Informatique\">Informatique</option>\r\n              <option value=\"Electrique\">Electrique</option>\r\n              <option value=\"Mécanique\">Mécanique</option>\r\n              <option value=\"Industriel\">Industriel</option>\r\n              <option value=\"Réseau et Télecommunications\">\r\n                Réseau et Télecommunications\r\n              </option>\r\n              <option value=\"Economie\">Economie</option>\r\n              <option value=\"Autre\">Autre</option>\r\n            </Form.Control>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"bio\" class=\"col-sm-2 col-form-label\">\r\n            Bio:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            className=\"inputs form-control col-sm-12 mt-2\"\r\n            rows=\"4\"\r\n            name=\"bio\"\r\n            id=\"comment\"\r\n            maxLength=\"400\"\r\n            placeholder=\"Bio\"\r\n            style={{\r\n              backgroundColor: \"#f3f2ef\",\r\n              resize: \"none\",\r\n            }}\r\n            value={bio}\r\n            onChange={handleBioChange}\r\n          ></textarea>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"bio\" class=\"col-sm-2 col-form-label\">\r\n            Interests:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            className=\"inputs form-control col-sm-12\"\r\n            rows=\"4\"\r\n            name=\"bio\"\r\n            id=\"comment\"\r\n            maxLength=\"400\"\r\n            placeholder=\"What interests you?\"\r\n            style={{\r\n              backgroundColor: \"#f3f2ef\",\r\n              resize: \"none\",\r\n            }}\r\n            value={interests}\r\n            onChange={handleInterestsChange}\r\n          ></textarea>\r\n        </div>\r\n        <Socials />\r\n        <div className={classes.root + \" btnholder\"}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={(e) => {\r\n              handleClick();\r\n            }}\r\n          >\r\n            Edit\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default EditAbout;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\Title.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\SetCompany.jsx",["545"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Stepper from \"@material-ui/core/Stepper\";\r\nimport Step from \"@material-ui/core/Step\";\r\nimport StepLabel from \"@material-ui/core/StepLabel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Link } from \"react-router-dom\";\r\n//CHILDREN\r\nimport CompanyImage from \"./AddCompany Components/CompanyImage\";\r\nimport AboutCompany from \"./AddCompany Components/AboutCompany\";\r\n\r\n// import \"../css/cv.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n  },\r\n  layout: {\r\n    width: \"90% !important\",\r\n    marginLeft: theme.spacing(2),\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n      width: 600,\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\",\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    width: \"auto\",\r\n    marginBottom: theme.spacing(3),\r\n    padding: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n      marginTop: theme.spacing(6),\r\n      marginBottom: theme.spacing(6),\r\n      padding: theme.spacing(3),\r\n    },\r\n  },\r\n  stepper: {\r\n    padding: theme.spacing(3, 0, 5),\r\n  },\r\n  buttons: {\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(3),\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n}));\r\nconst steps = [\"Photo\", \"Company Info\"];\r\n\r\nexport default function SetCompany(props) {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = useState(0);\r\n\r\n  const user = props?.user;\r\n\r\n  const [toggle, setToggle] = useState(false);\r\n\r\n  const handleNext = () => {\r\n    setActiveStep(activeStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep(activeStep - 1);\r\n  };\r\n\r\n  function getStepContent(step) {\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <CompanyImage\r\n            onChange={(value) => {\r\n              setToggle(value);\r\n            }}\r\n            id={user?.id}\r\n          />\r\n        );\r\n      case 1:\r\n        return (\r\n          <AboutCompany\r\n            user={user}\r\n            onChange={(value) => {\r\n              setToggle(value);\r\n            }}\r\n          />\r\n        );\r\n      default:\r\n        throw new Error(\"Unknown step\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          {/* <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n            Title\r\n          </Typography> */}\r\n          <div className=\"d-flex flex-wrap\">\r\n            <Stepper\r\n              activeStep={activeStep}\r\n              orientation=\"vertical\"\r\n              className={classes.stepper}\r\n            >\r\n              {steps.map((label) => (\r\n                <Step key={label}>\r\n                  <StepLabel>{label}</StepLabel>\r\n                </Step>\r\n              ))}\r\n            </Stepper>\r\n            <React.Fragment>\r\n              {activeStep === steps.length ? (\r\n                <React.Fragment>\r\n                  <div className=\"flex-fill mt-4 ml-4\">\r\n                    <Typography variant=\"h5\" gutterBottom>\r\n                      Thank you for your Time.\r\n                    </Typography>\r\n                  </div>\r\n\r\n                  <Typography variant=\"subtitle1\" decor>\r\n                    The info you have input is now visible to everyone\r\n                  </Typography>\r\n                  <div className={classes.buttons}>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      onClick={() => window.location.reload()}\r\n                    >\r\n                      View your Profile\r\n                    </Button>\r\n                  </div>\r\n                </React.Fragment>\r\n              ) : (\r\n                <React.Fragment>\r\n                  <div className=\"flex-fill mt-4  d-flex justify-content-center\">\r\n                    {getStepContent(activeStep)}\r\n                  </div>\r\n                  <div className={classes.buttons}>\r\n                    {activeStep !== 0 && (\r\n                      <Button\r\n                        onClick={() => {\r\n                          handleBack();\r\n                          setToggle(true);\r\n                        }}\r\n                        className={classes.button}\r\n                      >\r\n                        Back\r\n                      </Button>\r\n                    )}\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      disabled={!toggle}\r\n                      onClick={() => {\r\n                        handleNext();\r\n                        setToggle(false);\r\n                      }}\r\n                      className={classes.button}\r\n                    >\r\n                      {activeStep === steps.length - 1 ? \"Confirm\" : \"Next\"}\r\n                    </Button>\r\n                  </div>\r\n                </React.Fragment>\r\n              )}\r\n            </React.Fragment>\r\n          </div>\r\n        </Paper>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCv.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\EditCv\\EditSocials.jsx",["546","547","548","549"],"import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { MDBContainer, MDBBtn } from \"mdbreact\";\r\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport userService from \"../../../../services/userService\";\r\nconst Socials = (props) => {\r\n  const [id, setId] = useState(\"\");\r\n  const [toggle, setToggle] = useState(false);\r\n  const [url, setUrl] = useState(\"\");\r\n\r\n  const fbToggler = (e) => {\r\n    setId(\"Facebook\");\r\n    if (!toggle) {\r\n      setToggle(true);\r\n    } else {\r\n      if (id == \"Facebook\") {\r\n        setToggle(false);\r\n        setId(\"Facebook\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const inToggler = (e) => {\r\n    setId(\"LinkedIn\");\r\n    if (!toggle) {\r\n      setToggle(true);\r\n    } else {\r\n      if (id == \"LinkedIn\") {\r\n        setId(\"LinkedIn\");\r\n        setToggle(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const gitToggler = (e) => {\r\n    setId(\"GitHub\");\r\n    if (!toggle) {\r\n      setToggle(true);\r\n    } else {\r\n      if (id == \"GitHub\") {\r\n        setToggle(false);\r\n        setId(\"GitHub\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const ytToggler = () => {\r\n    setId(\"YouTube\");\r\n    if (!toggle) {\r\n      setToggle(true);\r\n    } else {\r\n      if (id == \"YouTube\") {\r\n        setToggle(false);\r\n        setId(\"YouTube\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const onChangeHandler = (e) => {\r\n    setUrl(e.target.value);\r\n  };\r\n\r\n  const upload = () => {\r\n    let ur = url;\r\n    if(!url.startsWith(\"https://\")){\r\n        ur = \"https://\" + url\r\n    }\r\n    const link = { name: id, url: ur };\r\n    userService.uploadCvLink(link).then(\r\n      (res) => {\r\n        setId(\"\");\r\n        setUrl(\"\");\r\n        setToggle(false);\r\n        console.log(res);\r\n      },\r\n      (err) => {\r\n        console.log(err);\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div class=\"form-group row col-sm-12 align-items-center\">\r\n        <label class=\"col-sm-2 col-form-label\">Add Socials:</label>\r\n        <MDBContainer className=\"col-sm-10 flex-row mt-3\">\r\n          <Tooltip title=\"Lien pour votre profil Facebook\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              className=\"col-sm-3 col-4\"\r\n              social=\"fb\"\r\n              onClick={fbToggler}\r\n            >\r\n              <FacebookIcon />\r\n            </MDBBtn>\r\n          </Tooltip>\r\n          <Tooltip title=\"Lien pour votre profil LinkedIn\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              className=\"col-sm-3 col-4\"\r\n              social=\"li\"\r\n              onClick={inToggler}\r\n            >\r\n              <LinkedInIcon />\r\n            </MDBBtn>\r\n          </Tooltip>\r\n          <Tooltip title=\"Lien pour votre compte GitHub\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              className=\"col-sm-3 col-4\"\r\n              social=\"git\"\r\n              onClick={gitToggler}\r\n            >\r\n              <GitHubIcon />\r\n            </MDBBtn>\r\n          </Tooltip>\r\n          <Tooltip title=\"Lien pour votre CV video\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              className=\"col-sm-3 col-4\"\r\n              social=\"git\"\r\n              onClick={ytToggler}\r\n            >\r\n              <YouTubeIcon />\r\n            </MDBBtn>\r\n          </Tooltip>\r\n        </MDBContainer>\r\n      </div>\r\n      {toggle && (\r\n        <div class=\"form-group\" style={{ display: \"flex\" }}>\r\n          {id && (\r\n            <input\r\n              class=\"form-control col-sm-8\"\r\n              type=\"text\"\r\n              placeholder={`Lien ${id}`}\r\n              style={{ backgroundColor: \"#f3f2ef\" }}\r\n              id={id}\r\n              value={url}\r\n              onChange={onChangeHandler}\r\n              required\r\n            />\r\n          )}\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"info\"\r\n            style={{ marginLeft: \"3px\", fontWeight: \"bolder\" }}\r\n            onClick={() => {\r\n              upload();\r\n            }}\r\n          >\r\n            Modifier\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Socials;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Experience.jsx",["550"],"import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport userService from \"../../../../../services/userService\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  textfield: {\r\n    marginTop: \"25px\",\r\n    marginRight: \"1vw\",\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: \"60vw\",\r\n  },\r\n  dates: {\r\n    paddingTop: \"10px\",\r\n    marginLeft: \"2vw\",\r\n    width: \"60%\",\r\n    outline: \"none\",\r\n  },\r\n  checkbox: {\r\n    paddingTop: \"40px\",\r\n    marginLeft: \"5px\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(20),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  button: {\r\n    margin: \"1vw 1vh\",\r\n    justifyContent: \"center\",\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst FormModal = (props) => {\r\n  //POST STATES\r\n  let [dateStart, setStartDate] = useState(new Date());\r\n  let [dateEnd, setEndDate] = useState(new Date());\r\n  const [occupation, setOccupaton] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n  const [checked, setChecked] = useState(false);\r\n  const [isProject, setIsProject] = useState(false);\r\n\r\n  // STYLE STATES\r\n  const [open, setOpen] = useState(false);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [modal2Show, setModal2Show] = useState(false);\r\n\r\n  // RESPONSE STATES\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [data, setData] = useState();\r\n\r\n  //MAKESTYLES\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getExperience();\r\n      setData(result.data);\r\n    };\r\n    fetchData();\r\n    props.onChange(true);\r\n  }, [successful]);\r\n\r\n  const handleStart = (date) => {\r\n    setStartDate(date);\r\n  };\r\n  const handleChecked = (e) => {\r\n    setChecked(!checked);\r\n  };\r\n\r\n  const handleEnd = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  const handleOccupation = (e) => {\r\n    setOccupaton(e.target.value);\r\n  };\r\n  const handleCompany = (e) => {\r\n    setCompany(e.target.value);\r\n  };\r\n  const handleDescription = (e) => {\r\n    setDescription(e.target.value);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  const upload = () => {\r\n    const errors = [];\r\n    if (occupation.length === 0) errors.push(\"Occupation must not be empty\");\r\n\r\n    if (dateEnd <= dateStart && !checked) {\r\n      errors.push(\"End date can't be inferior or equal to start date!\");\r\n    }\r\n    if (company.length === 0) errors.push(\"Company must not be empty\");\r\n    if (description.length === 0) errors.push(\"Description must not be emepty\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    setModalShow(false);\r\n    dateStart = dateStart.toString().substring(4, 15);\r\n    if (checked) {\r\n      dateEnd = \"Present\";\r\n    } else {\r\n      dateEnd = dateEnd.toString().substring(4, 15);\r\n    }\r\n    setChecked(false);\r\n    userService\r\n      .uploadExperience(\r\n        occupation,\r\n        company,\r\n        dateStart,\r\n        dateEnd,\r\n        description,\r\n        isProject\r\n      )\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setCompany(\"\");\r\n    setOccupaton(\"\");\r\n    setDescription(\"\");\r\n    setStartDate(new Date());\r\n    setEndDate(new Date());\r\n  };\r\n\r\n  const deleteById = (id) => {\r\n    userService.deleteExperience(id).then((response) => {\r\n      setSuccessful(true);\r\n      setSuccessful(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <ButtonGroup\r\n          color=\"primary\"\r\n          aria-label=\"contained  primary button group\"\r\n          style={{ marginBottom: \"10px\" }}\r\n        >\r\n          <Button\r\n            onClick={() => {\r\n              setModalShow(true);\r\n              setIsProject(false);\r\n            }}\r\n            startIcon={\r\n              <AddCircleOutlinedIcon\r\n                style={{\r\n                  maxWidth: \"30px\",\r\n                  maxHeight: \"30px\",\r\n                  minWidth: \"30px\",\r\n                  minHeight: \"30px\",\r\n                }}\r\n              />\r\n            }\r\n          >\r\n            Ajoutez une experience\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              setModal2Show(true);\r\n              setIsProject(true);\r\n              setCompany(\" \");\r\n            }}\r\n          >\r\n            Ou un projet que vous avez réalisé\r\n          </Button>\r\n        </ButtonGroup>\r\n        <Modal\r\n          show={modalShow}\r\n          color=\"primary\"\r\n          onHide={() => setModalShow(false)}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"space-between\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Company\"\r\n                    value={company}\r\n                    onChange={handleCompany}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Occupation\"\r\n                    value={occupation}\r\n                    onChange={handleOccupation}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Description\"\r\n                    value={description}\r\n                    onChange={handleDescription}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"Start Date\"\r\n                      value={dateStart}\r\n                      onChange={handleStart}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                      disabled={checked ? true : false}\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"End Date\"\r\n                      value={dateEnd}\r\n                      onChange={handleEnd}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <FormControlLabel\r\n                      className={classes.checkbox}\r\n                      value=\"end\"\r\n                      control={\r\n                        <Checkbox\r\n                          checked={checked}\r\n                          onChange={handleChecked}\r\n                          color=\"primary\"\r\n                        />\r\n                      }\r\n                      label=\"Present\"\r\n                      labelPlacement=\"end\"\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert\r\n                onClose={handleClose}\r\n                severity={successful ? \"success\" : \"error\"}\r\n              >\r\n                {typeof message == \"string\"\r\n                  ? message\r\n                  : message?.map((message1) => (\r\n                      <span>\r\n                        -{message1}\r\n                        <br />\r\n                      </span>\r\n                    ))}\r\n              </Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                upload();\r\n                setSuccessful(false);\r\n              }}\r\n            >\r\n              Upload\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <Modal\r\n          show={modal2Show}\r\n          color=\"primary\"\r\n          onHide={() => setModal2Show(false)}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"space-between\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Titre\"\r\n                    value={occupation}\r\n                    onChange={handleOccupation}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Description\"\r\n                    value={description}\r\n                    onChange={handleDescription}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"Start Date\"\r\n                      value={dateStart}\r\n                      onChange={handleStart}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                      disabled={checked ? true : false}\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"End Date\"\r\n                      value={dateEnd}\r\n                      onChange={handleEnd}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert\r\n                onClose={handleClose}\r\n                severity={successful ? \"success\" : \"error\"}\r\n              >\r\n                {typeof message == \"string\"\r\n                  ? message\r\n                  : message?.map((message1) => (\r\n                      <span>\r\n                        -{message1}\r\n                        <br />\r\n                      </span>\r\n                    ))}\r\n              </Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                upload();\r\n                setSuccessful(false);\r\n                setModal2Show(false);\r\n              }}\r\n            >\r\n              Upload\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"simple table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Company</TableCell>\r\n                <TableCell>Occupation (Titre)</TableCell>\r\n                <TableCell>Start Date</TableCell>\r\n                <TableCell>End Date</TableCell>\r\n                <TableCell>Description</TableCell>\r\n                <TableCell>Action</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data?.map((obj) => (\r\n                <TableRow key={obj}>\r\n                  <TableCell>{obj.company}</TableCell>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {obj.occupation}\r\n                  </TableCell>\r\n                  <TableCell>{obj.dateStart}</TableCell>\r\n                  <TableCell>{obj.dateEnd}</TableCell>\r\n                  <TableCell>{obj.description}</TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <DeleteIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setTimeout(deleteById(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default FormModal;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Image.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\About.jsx",["551"],"import React, { useState, initialState, useEffect } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Input from \"react-phone-number-input/input\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport Socials from \"./Socials\";\r\nimport \"../SetCv.css\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport userService from \"../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  route: {\r\n    width: \"55%\",\r\n  },\r\n}));\r\n\r\nconst About = (props) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  // const [fullAbout, setFullAbout] = useState();\r\n\r\n  const handleClick = (e) => {\r\n    const errors1 = [];\r\n    if (firstName.length === 0 || lastName.length === 0)\r\n      errors1.push(\"Name cannot be empty\");\r\n    // if (address.length === 0 || city.length === 0)\r\n    //   errors1.push(\"Adrress cannot be empty\");\r\n    // if (!number) errors1.push(\"Number cannot be empty\");\r\n    // if (number?.length < 11)\r\n    //   errors1.push(\"Your number should be like 0663-123123\");\r\n    if (bio?.length === 0) errors1.push(\"Bio must not be empty\");\r\n    // if (interests?.length === 0) errors1.push(\"Interests must not be empty\");\r\n    if (errors1.length > 0) {\r\n      setMessage(errors1);\r\n      setTimeout(setOpen(true), 500);\r\n      return 0;\r\n    }\r\n    upload(e);\r\n    setTimeout(setOpen(true), 500);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n    setSuccessful(false);\r\n  };\r\n\r\n  // DATA TO UPLOAD AL3ABD\r\n  const [bio, setBio] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const [interests, setInterests] = useState(\"\");\r\n  const [domaine, setDomaine] = useState(\"\");\r\n  const [gottenName, setGottenName] = useState(\"\");\r\n\r\n  // RESPONSE MESSAGE AL3ABD\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(initialState);\r\n\r\n  const handleFirstNameChange = (e) => {\r\n    const value = e.target.value;\r\n    setFirstName(value);\r\n  };\r\n\r\n  const handleLastNameChange = (e) => {\r\n    const value = e.target.value;\r\n    setLastName(value);\r\n  };\r\n\r\n  const handleAddressChange = (e) => {\r\n    const value = e.target.value;\r\n    setAddress(value);\r\n  };\r\n\r\n  const handleCityChange = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (e) => {\r\n    const value = e;\r\n    setNumber(value);\r\n  };\r\n\r\n  const handleBioChange = (e) => {\r\n    setBio(e.target.value);\r\n  };\r\n\r\n  const handleInterestsChange = (e) => {\r\n    const value = e.target.value;\r\n    setInterests(value);\r\n  };\r\n\r\n  const handleDomaineChange = (e) => {\r\n    setDomaine(e.target.value);\r\n  };\r\n\r\n  const upload = (e) => {\r\n    userService\r\n      .uploadAbout(\r\n        firstName,\r\n        lastName,\r\n        address,\r\n        city,\r\n        number,\r\n        bio,\r\n        interests,\r\n        domaine\r\n      )\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          props.onChange(true);\r\n          setSuccessful(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n\r\n  useEffect(() => {\r\n    // userService.getAbout().then((response) => {\r\n    //   setFullAbout(response?.data?.cv);\r\n    //   console.log(\"hh\");\r\n    //   console.log(response?.data?.cv);\r\n    // });\r\n    userService.getUserData().then((res) => {\r\n      setGottenName(res?.data?.name);\r\n      setFirstName(\r\n        res?.data?.name\r\n          ?.split(\" \")\r\n          .slice(0, 1)\r\n          ?.map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n          .join(\" \")\r\n      );\r\n      setLastName(\r\n        res?.data?.name\r\n          ?.split(\" \")\r\n          ?.slice(1)\r\n          ?.map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n          .join(\" \")\r\n      );\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.route}>\r\n      <form>\r\n        <div className=\"form-group row align-items-center\">\r\n          <label for=\"number\" className=\"col-sm-2  col-form-label\">\r\n            Full Name:\r\n          </label>\r\n          <div className=\"col-sm-5 mt-2 \">\r\n            <input\r\n              className=\"form-control mr-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"First Name\"\r\n              defaultValue={firstName}\r\n              value={firstName\r\n                .split(\" \")\r\n                .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                .join(\" \")}\r\n              onChange={handleFirstNameChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-sm-5 mt-2\">\r\n            <input\r\n              className=\"form-control mr-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              id=\"number\"\r\n              placeholder=\"Last Name\"\r\n              defaultValue={lastName}\r\n              value={lastName\r\n                .split(\" \")\r\n                .map((e) => e.charAt(0).toUpperCase() + e.slice(1))\r\n                .join(\" \")}\r\n              onChange={handleLastNameChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row align-items-center\">\r\n          <label for=\"number\" className=\"col-sm-2 col-form-label\">\r\n            Address:\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            {\" \"}\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"Address\"\r\n              value={address}\r\n              onChange={handleAddressChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-sm-2\">\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"City\"\r\n              value={city}\r\n              onChange={handleCityChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-group row align-items-center\">\r\n          <label for=\"example-tel-input\" class=\"col-sm-2 col-form-label\">\r\n            Telephone :\r\n          </label>\r\n          <div className=\"col-sm-5\">\r\n            <Input\r\n              className=\"form-control mt-2\"\r\n              country=\"MA\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              value={number}\r\n              placeholder=\"Number\"\r\n              onChange={handleNumberChange}\r\n              id=\"example-tel-input\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row align-items-center\">\r\n          <label for=\"example-tel-input\" class=\"col-sm-2 col-form-label\">\r\n            Filiere :\r\n          </label>\r\n          <div className=\"col-sm-5\">\r\n            <Form.Control as=\"select\" onChange={handleDomaineChange}>\r\n              <option value=\"Informatique\">Informatique</option>\r\n              <option value=\"Electrique\">Electrique</option>\r\n              <option value=\"Mécanique\">Mécanique</option>\r\n              <option value=\"Industriel\">Industriel</option>\r\n              <option value=\"Réseau et Télecommunications\">\r\n                Réseau et Télecommunications\r\n              </option>\r\n              <option value=\"Economie\">Economie</option>\r\n              <option value=\"Autre\">Autre</option>\r\n            </Form.Control>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"bio\" class=\"col-sm-2 col-form-label\">\r\n            Bio:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            className=\"inputs form-control col-sm-12 mt-2\"\r\n            rows=\"4\"\r\n            name=\"bio\"\r\n            id=\"comment\"\r\n            maxLength=\"800\"\r\n            placeholder=\"Bio\"\r\n            style={{\r\n              backgroundColor: \"#f3f2ef\",\r\n              resize: \"none\",\r\n            }}\r\n            value={bio}\r\n            onChange={handleBioChange}\r\n          ></textarea>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"interests\" class=\"col-sm-2 col-form-label\">\r\n            Interests:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            className=\"inputs form-control col-sm-12\"\r\n            rows=\"4\"\r\n            name=\"interests\"\r\n            id=\"comment\"\r\n            maxLength=\"800\"\r\n            placeholder=\"What interests you?\"\r\n            style={{\r\n              backgroundColor: \"#f3f2ef\",\r\n              resize: \"none\",\r\n            }}\r\n            value={interests}\r\n            onChange={handleInterestsChange}\r\n          ></textarea>\r\n        </div>\r\n        <Socials />\r\n        <div className={classes.root + \" btnholder\"}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={(e) => {\r\n              handleClick();\r\n            }}\r\n          >\r\n            UPLOAD\r\n          </Button>\r\n          <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert\r\n              onClose={handleClose}\r\n              severity={successful ? \"success\" : \"error\"}\r\n            >\r\n              {typeof message == \"string\"\r\n                ? message\r\n                : message?.map((message1) => (\r\n                    <span>\r\n                      -{message1}\r\n                      <br />\r\n                    </span>\r\n                  ))}\r\n            </Alert>\r\n          </Snackbar>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default About;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Education.jsx",["552","553","554","555"],"import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../../services/authHeader\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport userService from \"../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  textfield: {\r\n    marginTop: \"10px\",\r\n    marginRight: \"1vw\",\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: \"60vw\",\r\n  },\r\n  dates: {\r\n    paddingTop: \"10px\",\r\n    marginLeft: \"2vw\",\r\n    width: \"60%\",\r\n    outline: \"none\",\r\n  },\r\n  checkbox: {\r\n    paddingTop: \"40px\",\r\n    marginLeft: \"5px\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(20),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  button: {\r\n    margin: \"1vw 1vh\",\r\n    justifyContent: \"center\",\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst FormModal = (props) => {\r\n  //POST STATES\r\n  let [dateStart, setStartDate] = useState(new Date());\r\n  let [dateEnd, setEndDate] = useState(new Date());\r\n  const [school, setSchool] = useState(\"\");\r\n  const [diploma, setDiploma] = useState(\"\");\r\n  const [field, setField] = useState(\"\");\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  // STYLE STATES\r\n  const [open, setOpen] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  // RESPONSE STATES\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [data, setData] = useState();\r\n\r\n  //MAKESTYLES\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getEducation();\r\n      if (result.data.length != 0) {\r\n        props.onChange(true);\r\n      }\r\n      setData(result.data);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n\r\n  const handleStart = (date) => {\r\n    setStartDate(date);\r\n  };\r\n  const handleChecked = (e) => {\r\n    setChecked(!checked);\r\n  };\r\n  const handleEnd = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  const handleSchool = (e) => {\r\n    setSchool(e.target.value);\r\n  };\r\n  const handleDiploma = (e) => {\r\n    setDiploma(e.target.value);\r\n  };\r\n  const handleField = (e) => {\r\n    setField(e.target.value);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  const upload = () => {\r\n    const errors = [];\r\n    if (school.length === 0) errors.push(\"School must not be empty\");\r\n\r\n    if (dateEnd <= dateStart && !checked) {\r\n      errors.push(\"End date can't be inferior or equal to start date!\");\r\n    }\r\n    if (diploma.length === 0) errors.push(\"Diploma must not be empty\");\r\n    if (field.length === 0) errors.push(\"field must not be emepty\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    setModalShow(false);\r\n    dateStart = dateStart.toString().substring(4, 15);\r\n    if (checked) {\r\n      dateEnd = \"Present\";\r\n    } else {\r\n      dateEnd = dateEnd.toString().substring(4, 15);\r\n    }\r\n    console.log(dateEnd);\r\n    setChecked(false);\r\n\r\n    userService\r\n      .uploadEducation(school, diploma, dateStart, dateEnd, field)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          props.onChange(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setSchool(\"\");\r\n    setDiploma(\"\");\r\n    setField(\"\");\r\n    setStartDate(new Date());\r\n    setEndDate(new Date());\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteEducation(id).then((response) => {\r\n      setSuccessful(true);\r\n      setSuccessful(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Button\r\n          onClick={() => setModalShow(true)}\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          size=\"medium\"\r\n          style={{ marginBottom: \"10px\" }}\r\n          startIcon={\r\n            <AddCircleOutlinedIcon\r\n              style={{\r\n                maxWidth: \"30px\",\r\n                maxHeight: \"30px\",\r\n                minWidth: \"30px\",\r\n                minHeight: \"30px\",\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Modal\r\n          show={modalShow}\r\n          color=\"primary\"\r\n          onHide={() => setModalShow(false)}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"space-between\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"School\"\r\n                    value={school}\r\n                    onChange={handleSchool}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Diploma\"\r\n                    value={diploma}\r\n                    onChange={handleDiploma}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Field\"\r\n                    value={field}\r\n                    onChange={handleField}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                  <Grid item xs={6}>\r\n                    <KeyboardDatePicker\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"Start Date\"\r\n                      value={dateStart}\r\n                      onChange={handleStart}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <KeyboardDatePicker\r\n                      disabled={checked ? true : false}\r\n                      disableToolbar\r\n                      className={classes.dates}\r\n                      variant=\"inline\"\r\n                      format=\"dd/MM/yyyy\"\r\n                      margin=\"normal\"\r\n                      label=\"End Date\"\r\n                      value={dateEnd}\r\n                      onChange={handleEnd}\r\n                      KeyboardButtonProps={{\r\n                        \"aria-label\": \"change date\",\r\n                      }}\r\n                    />\r\n                    <FormControlLabel\r\n                      className={classes.checkbox}\r\n                      value=\"end\"\r\n                      control={\r\n                        <Checkbox\r\n                          checked={checked}\r\n                          onChange={handleChecked}\r\n                          color=\"primary\"\r\n                        />\r\n                      }\r\n                      label=\"Present\"\r\n                      labelPlacement=\"end\"\r\n                    />\r\n                  </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert\r\n                onClose={handleClose}\r\n                severity={successful ? \"success\" : \"error\"}\r\n              >\r\n                {typeof message == \"string\"\r\n                  ? message\r\n                  : message?.map((message1) => (\r\n                      <span>\r\n                        -{message1}\r\n                        <br />\r\n                      </span>\r\n                    ))}\r\n              </Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                upload();\r\n                setSuccessful(false);\r\n              }}\r\n            >\r\n              Upload\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n        {data && (\r\n          <TableContainer component={Paper}>\r\n            <Table\r\n              className={classes.table}\r\n              size=\"small\"\r\n              aria-label=\"simple table\"\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>School</TableCell>\r\n                  <TableCell>Diploma</TableCell>\r\n                  <TableCell>Start Date</TableCell>\r\n                  <TableCell>End Date</TableCell>\r\n                  <TableCell>Field</TableCell>\r\n                  <TableCell>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {data?.map((obj) => (\r\n                  <TableRow key={obj}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {obj.school}\r\n                    </TableCell>\r\n                    <TableCell>{obj.diploma}</TableCell>\r\n                    <TableCell>{obj.dateStart}</TableCell>\r\n                    <TableCell>{obj.dateEnd}</TableCell>\r\n                    <TableCell>{obj.field}</TableCell>\r\n\r\n                    <TableCell>\r\n                      <IconButton aria-label=\"delete\">\r\n                        <DeleteIcon\r\n                          style={{ color: \"#df4759\" }}\r\n                          onClick={() => {\r\n                            setTimeout(deleteById(obj.id), 500);\r\n                          }}\r\n                        />\r\n                      </IconButton>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default FormModal;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Award.jsx",["556","557","558"],"import \"date-fns\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../../services/authHeader\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport userService from \"../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {},\r\n  textfield: {\r\n    marginTop: \"10px\",\r\n    marginRight: \"1vw\",\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    minWidth: \"40vw\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(20),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  button: {\r\n    margin: \"1vw 1vh\",\r\n    justifyContent: \"center\",\r\n    outline: \"none\",\r\n  },\r\n}));\r\n\r\nconst Award = (props) => {\r\n  //POST STATES\r\n  const [organizer, setOrganizer] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [position, setPosition] = useState(\"\");\r\n\r\n  // STYLE STATES\r\n  const [open, setOpen] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  // RESPONSE STATES\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [data, setData] = useState();\r\n\r\n  //MAKESTYLES\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getAward();\r\n      setData(result.data);\r\n    };\r\n    props.onChange(true);\r\n    fetchData();\r\n  }, [successful]);\r\n\r\n  const handleOrganizer = (e) => {\r\n    setOrganizer(e.target.value);\r\n  };\r\n  const handleName = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n  const handlePosition = (e) => {\r\n    setPosition(e.target.value);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n  const upload = () => {\r\n    const errors = [];\r\n    if (organizer.length === 0) errors.push(\"Fields must not be empty.\\n\");\r\n    if (name.length === 0) errors.push(\"Fields must not be empty.\\n\");\r\n    if (!position.match(\"^[0-9]+$\")) errors.push(\"Position must be a number.\");\r\n    if (errors.length !== 0) {\r\n      setMessage(errors);\r\n      setOpen(true);\r\n      return 0;\r\n    }\r\n    setModalShow(false);\r\n    userService.uploadAward(organizer, name, position)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n    setOrganizer(\"\");\r\n    setName(\"\");\r\n    setPosition(\"\");\r\n  };\r\n\r\n  const deleteById = (id) => {\r\n    userService.deleteAward(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Button\r\n          onClick={() => setModalShow(true)}\r\n          variant=\"outlined\"\r\n          color=\"primary\"\r\n          size=\"medium\"\r\n          startIcon={\r\n            <AddCircleOutlinedIcon\r\n              style={{\r\n                maxWidth: \"30px\",\r\n                maxHeight: \"30px\",\r\n                minWidth: \"30px\",\r\n                minHeight: \"30px\",\r\n              }}\r\n            />\r\n          }\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Modal\r\n          show={modalShow}\r\n          color=\"primary\"\r\n          onHide={() => setModalShow(false)}\r\n          size=\"md\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Body>\r\n            <FormControl>\r\n              <Grid container justify=\"center\">\r\n                <Grid item xs={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Organizer\"\r\n                    value={organizer}\r\n                    onChange={handleOrganizer}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Name\"\r\n                    value={name}\r\n                    onChange={handleName}\r\n                    className={classes.textfield}\r\n                  />\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    label=\"Position\"\r\n                    value={position}\r\n                    onChange={handlePosition}\r\n                    className={classes.textfield}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </FormControl>\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n              <Alert severity=\"error\">{message}</Alert>\r\n            </Snackbar>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                upload();\r\n                setSuccessful(false);\r\n              }}\r\n            >\r\n              Upload\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            className={classes.table}\r\n            size=\"small\"\r\n            aria-label=\"simple table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Organizer</TableCell>\r\n                <TableCell>Competition Name</TableCell>\r\n                <TableCell>Position</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data?.map((obj) => (\r\n                <TableRow key={obj}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {obj.organizer}\r\n                  </TableCell>\r\n                  <TableCell>{obj.name}</TableCell>\r\n                  <TableCell>{obj.position}</TableCell>\r\n                  <TableCell>\r\n                    <IconButton aria-label=\"delete\">\r\n                      <DeleteIcon\r\n                        style={{ color: \"#df4759\" }}\r\n                        onClick={() => {\r\n                          setTimeout(deleteById(obj.id), 500);\r\n                        }}\r\n                      />\r\n                    </IconButton>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Award;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\AddCompany Components\\CompanyImage.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\AddCompany Components\\AboutCompany.jsx",["559","560"],"import React, { useState, initialState, useEffect } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n// import \"../../css/cv.css\";\r\nimport Input from \"react-phone-number-input/input\";\r\nimport \"react-phone-number-input/style.css\";\r\nimport CompanySocials from \"./CompanySocials\";\r\nimport axios from \"axios\";\r\nimport authHeader from \"../../../../../services/authHeader\";\r\nimport userService from \"../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  route: {\r\n    width: \"55%\",\r\n  },\r\n}));\r\n\r\nconst About = (props) => {\r\n  // MATERIAL UI STYLING AL3ABD\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClick = (e) => {\r\n    const errors1 = [];\r\n    if (address.length === 0 || city.length === 0)\r\n      errors1.push(\"Adrress cannot be empty\");\r\n    if (!number) errors1.push(\"Number cannot be empty\");\r\n    if (number?.length < 11)\r\n      errors1.push(\"Your number should be like 0663-123123\");\r\n    if (bio?.length === 0) errors1.push(\"Bio must not be empty\");\r\n    if (errors1.length > 0) {\r\n      setMessage(errors1);\r\n      setTimeout(setOpen(true), 500);\r\n      return 0;\r\n    }\r\n    upload(e);\r\n    setTimeout(setOpen(true), 500);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n    setSuccessful(false);\r\n  };\r\n\r\n  const [bio, setBio] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n  const [social, setSocials] = useState({});\r\n\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [message, setMessage] = useState(initialState);\r\n\r\n  const [flag, setFlag] = useState(initialState);\r\n  const [id, setId] = useState();\r\n\r\n  useEffect(() => {\r\n    async function getUserData() {\r\n      await userService.getUserData().then((response) => {\r\n        setFlag(response?.data?.cv?.flag);\r\n        setId(response?.data?.id);\r\n      });\r\n    }\r\n    getUserData();\r\n  }, []);\r\n\r\n  const handleAddressChange = (e) => {\r\n    const value = e.target.value;\r\n    setAddress(value);\r\n  };\r\n\r\n  const handleCityChange = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (e) => {\r\n    const value = e;\r\n    setNumber(value);\r\n  };\r\n\r\n  const handleBioChange = (e) => {\r\n    setBio(e.target.value);\r\n  };\r\n\r\n  const upload = (e) => {\r\n    const socials = JSON.stringify(social);\r\n    userService.uploadAboutCompany(\r\n      address,\r\n      city,\r\n      number,\r\n      bio,\r\n      socials).then(\r\n        (response) => {\r\n          if (!flag) {\r\n            userService.flagCompany(id)\r\n          }\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n\r\n  return (\r\n    <div className={classes.route}>\r\n      <form>\r\n        <div className=\"form-group row\">\r\n          <label for=\"number\" className=\"col-sm-2 col-form-label\">\r\n            Enterprise location:\r\n          </label>\r\n          <div className=\"col-sm-8\">\r\n            {\" \"}\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"Address\"\r\n              value={address}\r\n              onChange={handleAddressChange}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"col-sm-2\">\r\n            <input\r\n              className=\"form-control mr-2 mt-2\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"City\"\r\n              value={city}\r\n              onChange={handleCityChange}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"form-group row\">\r\n          <label for=\"example-tel-input\" class=\"col-sm-2 col-form-label\">\r\n            Telephone :\r\n          </label>\r\n          <div className=\"col-sm-5\">\r\n            <Input\r\n              className=\"form-control mt-2\"\r\n              country=\"MA\"\r\n              style={{\r\n                backgroundColor: \"#f3f2ef\",\r\n              }}\r\n              value={number}\r\n              placeholder=\"Number\"\r\n              onChange={handleNumberChange}\r\n              id=\"example-tel-input\"\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"bio\" class=\"col-sm-2 col-form-label\">\r\n            Enterprise Bio:\r\n          </label>\r\n          <br />\r\n          <textarea\r\n            className=\"inputs form-control col-sm-12 mt-2\"\r\n            rows=\"4\"\r\n            name=\"bio\"\r\n            id=\"comment\"\r\n            maxLength=\"400\"\r\n            placeholder=\"Bio\"\r\n            style={{\r\n              backgroundColor: \"#f3f2ef\",\r\n              resize: \"none\",\r\n            }}\r\n            value={bio}\r\n            onChange={handleBioChange}\r\n          ></textarea>\r\n        </div>\r\n        <CompanySocials onChange={(value) => setSocials(value)} />\r\n        <div className={classes.root + \" btnholder\"}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={(e) => {\r\n              props.onChange(true);\r\n              handleClick();\r\n            }}\r\n          >\r\n            UPLOAD\r\n          </Button>\r\n          <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert\r\n              onClose={handleClose}\r\n              severity={successful ? \"success\" : \"error\"}\r\n            >\r\n              {typeof message == \"string\"\r\n                ? message\r\n                : message?.map((message1) => (\r\n                  <span>\r\n                    -{message1}\r\n                    <br />\r\n                  </span>\r\n                ))}\r\n            </Alert>\r\n          </Snackbar>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default About;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\Socials.jsx",["561","562","563","564"],"import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { MDBContainer, MDBBtn } from \"mdbreact\";\r\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport userService from \"../../../../../services/userService\";\r\n\r\nconst Socials = (props) => {\r\n  const [id, setId] = useState(\"\");\r\n  const [toggle, setToggle] = useState(false);\r\n  const [url, setUrl] = useState(\"\");\r\n\r\n  const fbToggler = (e) => {\r\n    setId(\"Facebook\");\r\n    if (!toggle) {\r\n      setToggle(true);\r\n    } else {\r\n      if (id == \"Facebook\") {\r\n        setToggle(false);\r\n        setId(\"Facebook\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const inToggler = (e) => {\r\n    setId(\"LinkedIn\");\r\n    if (!toggle) {\r\n      setToggle(true);\r\n    } else {\r\n      if (id == \"LinkedIn\") {\r\n        setId(\"LinkedIn\");\r\n        setToggle(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const gitToggler = (e) => {\r\n    setId(\"GitHub\");\r\n    if (!toggle) {\r\n      setToggle(true);\r\n    } else {\r\n      if (id == \"GitHub\") {\r\n        setToggle(false);\r\n        setId(\"GitHub\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const ytToggler = () => {\r\n    setId(\"YouTube\");\r\n    if (!toggle) {\r\n      setToggle(true);\r\n    } else {\r\n      if (id == \"YouTube\") {\r\n        setToggle(false);\r\n        setId(\"YouTube\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const onChangeHandler = (e) => {\r\n    setUrl(e.target.value);\r\n  };\r\n\r\n  const upload = () => {\r\n    let ur = url;\r\n    if(!url.startsWith(\"https://\")){\r\n        ur = \"https://\" + url\r\n    }\r\n    const link = { name: id, url: ur };\r\n    userService.uploadCvLink(link).then(\r\n      (res) => {\r\n        setId(\"\");\r\n        setUrl(\"\");\r\n        setToggle(false);\r\n        console.log(res);\r\n      },\r\n      (err) => {\r\n        console.log(err);\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div class=\"form-group row col-sm-12 align-items-center\">\r\n        <label class=\"col-sm-2 col-form-label\">Add Socials:</label>\r\n        <MDBContainer className=\"col-sm-10 flex-row mt-3\">\r\n          <Tooltip title=\"Lien pour votre profil Facebook\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              className=\"col-sm-3 col-4\"\r\n              social=\"fb\"\r\n              onClick={fbToggler}\r\n            >\r\n              <FacebookIcon />\r\n            </MDBBtn>\r\n          </Tooltip>\r\n          <Tooltip title=\"Lien pour votre profil LinkedIn\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              className=\"col-sm-3 col-4\"\r\n              social=\"li\"\r\n              onClick={inToggler}\r\n            >\r\n              <LinkedInIcon />\r\n            </MDBBtn>\r\n          </Tooltip>\r\n          <Tooltip title=\"Lien pour votre compte GitHub\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              className=\"col-sm-3 col-4\"\r\n              social=\"git\"\r\n              onClick={gitToggler}\r\n            >\r\n              <GitHubIcon />\r\n            </MDBBtn>\r\n          </Tooltip>\r\n          <Tooltip title=\"Lien pour votre CV video\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              className=\"col-sm-3 col-4\"\r\n              social=\"git\"\r\n              onClick={ytToggler}\r\n            >\r\n              <YouTubeIcon />\r\n            </MDBBtn>\r\n          </Tooltip>\r\n        </MDBContainer>\r\n      </div>\r\n      {toggle && (\r\n        <div class=\"form-group\" style={{ display: \"flex\" }}>\r\n          {id && (\r\n            <input\r\n              class=\"form-control col-sm-8\"\r\n              type=\"text\"\r\n              placeholder={`Lien ${id}`}\r\n              style={{ backgroundColor: \"#f3f2ef\" }}\r\n              id={id}\r\n              value={url}\r\n              onChange={onChangeHandler}\r\n              required\r\n            />\r\n          )}\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"info\"\r\n            style={{ marginLeft: \"3px\", fontWeight: \"bolder\" }}\r\n            onClick={() => {\r\n              upload();\r\n            }}\r\n          >\r\n            Add\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Socials;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\Other.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\NormalLanguage.jsx",["565","566","567"],"import React, { useState, useEffect } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"react-select\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport authHeader from \"../../../../../../services/authHeader\";\r\nimport axios from \"axios\";\r\nimport userService from \"../../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst statusOptions = [\r\n  { value: \"French\", label: \"French\" },\r\n  { value: \"English\", label: \"English\" },\r\n  { value: \"Arabic\", label: \"Arabic\" },\r\n  { value: \"Spanish\", label: \"Spanish\" },\r\n  { value: \"Autre\", label: \"Autre\" }\r\n];\r\n\r\nconst marks = [\r\n  {\r\n    value: 1,\r\n    label: \"1\",\r\n  },\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n];\r\n\r\nconst SkillForm = (props) => {\r\n  //skill comp\r\n  const [data, setData] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [name, setName] = useState(\"French\");\r\n  const [skillValue, setSkillValue] = useState();\r\n  const [isOther, setIsOther] = useState(false)\r\n  let selected = [];\r\n  const [disabled, setDisabled] = useState(false);\r\n\r\n  //snackbar\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getNormalLang();\r\n      setData(result.data);\r\n      setSuccessful(false);\r\n      console.log(result);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n  const handleChange = (e) => {\r\n    const value = e.target.value\r\n    setName(value)\r\n    setDisabled(false)\r\n  }\r\n  const upload = () => {\r\n    const value = skillValue;\r\n    userService.uploadNormalLang(name, value)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setMessage(\"Added\");\r\n          handleClick();\r\n          setDisabled(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteNormalLang(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setMessage(\"Deleted!\");\r\n        handleClick();\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const skillPicker = (e) => {\r\n    if (e.value == \"Autre\") {\r\n      setIsOther(true)\r\n    }\r\n    else {\r\n      setIsOther(false);\r\n      setName(e.value);\r\n      setDisabled(false);\r\n    }\r\n  };\r\n\r\n  const skValue = (value) => {\r\n    setSkillValue(value);\r\n  };\r\n\r\n  const singleOption = ({ data }) => (\r\n    <div className=\"input-select\">\r\n      <div className=\"input-select__single-value d-flex justify-content-center\">\r\n        <span style={{ fontSize: \"18px\" }}>&nbsp;{data.label}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container d-flex flex-row\">\r\n      <FormControl className=\"col-5\">\r\n        <div className=\"form\">\r\n          <div className=\"form-group col-md-10 \">\r\n            <label>Languages :</label>\r\n            <Select\r\n              defaultValue={statusOptions[0]}\r\n              options={statusOptions}\r\n              onChange={skillPicker}\r\n              components={{ SingleValue: singleOption }}\r\n              isOptionDisabled={(option) =>\r\n                selected.indexOf(option.value) !== -1\r\n              }\r\n            />\r\n          </div>\r\n          {isOther &&\r\n            <div className=\"col-md-10 mb-3\">\r\n              <TextField id=\"standard-basic\" label=\"Your Other Skill\" required onChange={handleChange} />\r\n            </div>\r\n          }\r\n          <div className=\"col-md-10\">\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Proficiency:\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={5}\r\n              getAriaValueText={skValue}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks={marks}\r\n              min={1}\r\n              max={10}\r\n            />\r\n          </div>\r\n          <div className=\"row col-md-10 justify-content-around\">\r\n            <div className=\"col-3\">\r\n              <Button\r\n                onClick={upload}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                disabled={disabled}\r\n                startIcon={\r\n                  <AddCircleOutlinedIcon\r\n                    style={{\r\n                      maxWidth: \"30px\",\r\n                      maxHeight: \"30px\",\r\n                      minWidth: \"30px\",\r\n                      minHeight: \"30px\",\r\n                    }}\r\n                  />\r\n                }\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </FormControl>\r\n      <div className=\"responsive-table flex-fill\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <th>Skill</th>\r\n            <th>Proficiency</th>\r\n            <th>Delete</th>\r\n          </thead>\r\n          <tbody>\r\n            {data?.map((lng) => (\r\n              <tr className=\"mt-10\">\r\n                <td>{lng.name}</td>\r\n                <td>{lng.value}</td>\r\n                <td>\r\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\r\n                    <DeleteIcon\r\n                      style={{ color: \"#df4759\" }}\r\n                      className=\"pt-0\"\r\n                      onClick={() => {\r\n                        setTimeout(deleteById(lng.id), 500);\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillForm;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\DevLanguage.jsx",["568","569","570","571"],"import React, { useState, useEffect, initialState } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"react-select\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport authHeader from \"../../../../../../services/authHeader\";\r\nimport axios from \"axios\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport userService from \"../../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst statusOptions = [\r\n  { value: \"HTML5\", label: \"HTML5\", icon: \"fab fa-html5\" },\r\n  { value: \"CSS3\", label: \"CSS3\", icon: \"fab fa-css3-alt\" },\r\n  { value: \"Java\", label: \"Java\", icon: \"fab fa-java\" },\r\n  { value: \"JavaScript\", label: \"JavaScript\", icon: \"fab fa-js-square\" },\r\n  { value: \"PHP\", label: \"PHP\", icon: \"fab fa-php\" },\r\n  { value: \"Laravel\", label: \"Laravel\", icon: \"fab fa-laravel\" },\r\n  { value: \"Python\", label: \"Python\", icon: \"fab fa-python\" },\r\n  { value: \"Angular\", label: \"Angular\", icon: \"fab fa-angular\" },\r\n  { value: \"ReactJS\", label: \"ReactJS\", icon: \"fab fa-react\" },\r\n  { value: \"Autre\", label: \"Autre\" }\r\n];\r\n\r\nconst marks = [\r\n  {\r\n    value: 1,\r\n    label: \"1\",\r\n  },\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n];\r\n\r\nconst SkillForm = (props) => {\r\n  const [data, setData] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [name, setName] = useState(\"HTML5\");\r\n  const [skillValue, setSkillValue] = useState();\r\n  const [isOther, setIsOther] = useState(false)\r\n  const [icon, setIcon] = useState(\"fab fa-html5 fa-2x\");\r\n  let selected = [];\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [flag, setFlag] = useState(initialState);\r\n  const [id, setId] = useState();\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getDevLang();\r\n      setData(result.data);\r\n      setSuccessful(false);\r\n      console.log(result);\r\n    };\r\n    fetchData();\r\n    async function getUserData() {\r\n      await userService.getUserData().then((response) => {\r\n        setFlag(response?.data?.cv?.flag);\r\n        setId(response?.data?.id);\r\n      });\r\n    }\r\n    getUserData();\r\n  }, [successful]);\r\n\r\n  const upload = () => {\r\n    if (!flag) {\r\n      userService.flagStudent(id)\r\n    }\r\n    const value = skillValue;\r\n    userService.uploadDevLang(name, value, icon)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setMessage(\"Added\");\r\n          handleClick();\r\n          setDisabled(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteDevLang(id).then((response) => {\r\n      setSuccessful(true);\r\n      setMessage(\"Deleted!\");\r\n      handleClick();\r\n      setSuccessful(false);\r\n    });\r\n  };\r\n  const handleChange = (e) => {\r\n    const value = e.target.value\r\n    setName(value)\r\n    setIcon(' ')\r\n    setDisabled(false)\r\n  }\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const skillPicker = (e) => {\r\n    if (e.value == \"Autre\") {\r\n      setIsOther(true);\r\n    }\r\n    else {\r\n      setIsOther(false);\r\n      setName(e.value);\r\n      setIcon(e.icon);\r\n      setDisabled(false);\r\n    }\r\n\r\n  };\r\n\r\n  const skValue = (value) => {\r\n    setSkillValue(value);\r\n  };\r\n  const singleOption = ({ data }) => (\r\n    <div className=\"input-select\">\r\n      <div className=\"input-select__single-value d-flex justify-content-center\">\r\n        <i className={data.icon + \" fa-2x\"} />\r\n        &nbsp; &nbsp;\r\n        <span style={{ fontSize: \"18px\" }}>&nbsp;{data.label}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container d-flex flex-row\">\r\n      <FormControl className=\"col-5\">\r\n        <div className=\"form\">\r\n          <div className=\"form-group col-md-10 \">\r\n            <label>Developing Skills :</label>\r\n            <Select\r\n              defaultValue={statusOptions[0]}\r\n              options={statusOptions}\r\n              onChange={skillPicker}\r\n              components={{ SingleValue: singleOption }}\r\n              isOptionDisabled={(option) =>\r\n                selected.indexOf(option.value) !== -1\r\n              }\r\n            />\r\n          </div>\r\n          {isOther &&\r\n            <div className=\"col-md-10 mb-3\">\r\n              <TextField id=\"standard-basic\" label=\"Your Other Skill\" required onChange={handleChange} />\r\n            </div>\r\n          }\r\n          <div className=\"col-md-10\">\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Proficiency:\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={5}\r\n              getAriaValueText={skValue}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks={marks}\r\n              min={1}\r\n              max={10}\r\n            />\r\n          </div>\r\n          <div className=\"row col-md-10 justify-content-around\">\r\n            <div className=\"col-3\">\r\n              <Button\r\n                onClick={() => {\r\n                  upload();\r\n                }}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                disabled={disabled}\r\n                startIcon={\r\n                  <AddCircleOutlinedIcon\r\n                    style={{\r\n                      maxWidth: \"30px\",\r\n                      maxHeight: \"30px\",\r\n                      minWidth: \"30px\",\r\n                      minHeight: \"30px\",\r\n                    }}\r\n                  />\r\n                }\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </FormControl>\r\n      <div className=\"responsive-table flex-fill\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <th>Language</th>\r\n            <th>Proficiency</th>\r\n            <th>Delete</th>\r\n          </thead>\r\n          <tbody>\r\n            {data?.map((dev) => (\r\n              <tr className=\"mt-10\">\r\n                <td>\r\n                  {\r\n                    dev.icon == ' ' ? (<><i class={`${dev.icon} fa-x`} />{\" \"}</>) : (<><i class={`${dev.icon} fa-2x`} />{\" \"}</>)\r\n                  }\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.name}</span>\r\n                </td>\r\n                <td>\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.value}</span>\r\n                </td>\r\n                <td>\r\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\r\n                    <DeleteIcon\r\n                      className=\"pt-0\"\r\n                      style={{ color: \"#df4759\" }}\r\n                      onClick={() => {\r\n                        setTimeout(deleteById(dev.id), 500);\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillForm;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCv\\SetCvChildren\\SkillForm Children\\Software.jsx",["572","573","574"],"import React, { useState, useEffect } from \"react\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"react-select\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddCircleOutlinedIcon from \"@material-ui/icons/AddCircleOutlined\";\r\nimport authHeader from \"../../../../../../services/authHeader\";\r\nimport axios from \"axios\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport userService from \"../../../../../../services/userService\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst statusOptions = [\r\n  { value: \"Photoshop\", label: \"Photoshop\", icon: \"fab fa-fonticons\" },\r\n  { value: \"Git\", label: \"Git\", icon: \"fab fa-git-alt\" },\r\n  { value: \"Wordpress\", label: \"Wordpress\", icon: \"fab fa-wordpress\" },\r\n  {\r\n    value: \"Autre\",\r\n    label: \"Autre\",\r\n    icon: \"\",\r\n  },\r\n];\r\n\r\nconst marks = [\r\n  {\r\n    value: 1,\r\n    label: \"1\",\r\n  },\r\n  {\r\n    value: 5,\r\n    label: \"5\",\r\n  },\r\n  {\r\n    value: 10,\r\n    label: \"10\",\r\n  },\r\n];\r\n\r\nconst SkillForm = (props) => {\r\n  //skill comp\r\n  // const classes = useStyles();\r\n  const [data, setData] = useState();\r\n  const [successful, setSuccessful] = useState(false);\r\n  const [name, setName] = useState(\"Photoshop\");\r\n  const [skillValue, setSkillValue] = useState();\r\n  const [icon, setIcon] = useState(\"fab fa-fonticons fa-2x\");\r\n  let selected = [];\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [isOther, setIsOther] = useState(false)\r\n\r\n  //snackbar\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleChange = (e) => {\r\n    const value = e.target.value\r\n    setName(value)\r\n    setIcon(' ')\r\n    setDisabled(false)\r\n  }\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await userService.getSoftware();\r\n      setData(result.data);\r\n      setSuccessful(false);\r\n    };\r\n    fetchData();\r\n  }, [successful]);\r\n  const upload = () => {\r\n    const value = skillValue;\r\n    userService.uploadSoftware(name, value, icon)\r\n      .then(\r\n        (response) => {\r\n          setMessage(response.data.message);\r\n          setSuccessful(true);\r\n          setMessage(\"Added\");\r\n          handleClick();\r\n          setDisabled(true);\r\n        },\r\n        (error) => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n          setMessage(resMessage);\r\n          setSuccessful(false);\r\n        }\r\n      );\r\n  };\r\n  const deleteById = (id) => {\r\n    userService.deleteSoftware(id)\r\n      .then((response) => {\r\n        setSuccessful(true);\r\n        setMessage(\"Deleted!\");\r\n        handleClick();\r\n        setSuccessful(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = (reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const skillPicker = (e) => {\r\n    if (e.value == \"Autre\") {\r\n      setIsOther(true);\r\n    }\r\n    else {\r\n      setIsOther(false)\r\n      setName(e.value);\r\n      setIcon(e.icon);\r\n      setDisabled(false);\r\n    }\r\n\r\n  };\r\n  // const deleteByType = (type) => {\r\n  //   setSkills(skills.filter((skill) => skill.type !== type));\r\n  //   setSelected(selected.filter((select) => select !== type));\r\n  //   setDisabled(!disabled);\r\n  // };\r\n  const skValue = (value) => {\r\n    setSkillValue(value);\r\n  };\r\n  const singleOption = ({ data }) => (\r\n    <div className=\"input-select\">\r\n      <div className=\"input-select__single-value d-flex justify-content-center\">\r\n        <i className={data.icon} />\r\n        &nbsp; &nbsp;\r\n        <span style={{ fontSize: \"18px\" }}>&nbsp;{data.label}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container d-flex flex-row\">\r\n      <FormControl className=\"col-5\">\r\n        <div className=\"form\">\r\n          <div className=\"form-group col-md-10 \">\r\n            <label>Software :</label>\r\n            <Select\r\n              defaultValue={statusOptions[0]}\r\n              options={statusOptions}\r\n              onChange={skillPicker}\r\n              components={{ SingleValue: singleOption }}\r\n              isOptionDisabled={(option) =>\r\n                selected.indexOf(option.value) !== -1\r\n              }\r\n            />\r\n          </div>\r\n          {isOther &&\r\n            <div className=\"col-md-10 mb-3\">\r\n              <TextField id=\"standard-basic\" label=\"Your Other Skill\" required onChange={handleChange} />\r\n            </div>\r\n          }\r\n          <div className=\"col-md-10\">\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Proficiency:\r\n            </Typography>\r\n            <Slider\r\n              defaultValue={5}\r\n              getAriaValueText={skValue}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks={marks}\r\n              min={1}\r\n              max={10}\r\n            />\r\n          </div>\r\n          <div className=\"row col-md-10 justify-content-around\">\r\n            <div className=\"col-3\">\r\n              <Button\r\n                onClick={() => {\r\n                  upload();\r\n                }}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                size=\"medium\"\r\n                disabled={disabled}\r\n                startIcon={\r\n                  <AddCircleOutlinedIcon\r\n                    style={{\r\n                      maxWidth: \"30px\",\r\n                      maxHeight: \"30px\",\r\n                      minWidth: \"30px\",\r\n                      minHeight: \"30px\",\r\n                    }}\r\n                  />\r\n                }\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </FormControl>\r\n      <div className=\"responsive-table flex-fill\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <th>Skill / Software</th>\r\n            <th>Proficiency</th>\r\n            <th>Delete</th>\r\n          </thead>\r\n          <tbody>\r\n            {data?.map((dev) => (\r\n              <tr className=\"mt-10\">\r\n                <td>\r\n                  <i class={dev.icon} />{\" \"}\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.name}</span>\r\n                </td>\r\n                <td>\r\n                  <span style={{ fontSize: \"18px\" }}>{dev.value}</span>\r\n                </td>\r\n                <td>\r\n                  <IconButton aria-label=\"delete\" className=\"pt-0\">\r\n                    <DeleteIcon\r\n                      className=\"pt-0\"\r\n                      style={{ color: \"#df4759\" }}\r\n                      onClick={() => {\r\n                        setTimeout(deleteById(dev.id), 500);\r\n                      }}\r\n                    />\r\n                  </IconButton>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <Snackbar open={open} autoHideDuration={2000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\nexport default SkillForm;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\SetProfile\\SetCompany\\AddCompany Components\\CompanySocials.jsx",["575","576","577","578","579"],"import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { MDBContainer, MDBBtn } from \"mdbreact\";\r\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport YouTubeIcon from \"@material-ui/icons/YouTube\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport userService from \"../../../../../services/userService\";\r\nimport LanguageIcon from \"@material-ui/icons/Language\";\r\n\r\nconst Socials = (props) => {\r\n  const [id, setId] = useState(\"\");\r\n  const [toggle, setToggle] = useState(false);\r\n  const [url, setUrl] = useState(\"\");\r\n\r\n  const fbToggler = (e) => {\r\n    setId(\"Facebook\");\r\n    if (!toggle) {\r\n      setToggle(true);\r\n    } else {\r\n      if (id == \"Facebook\") {\r\n        setToggle(false);\r\n        setId(\"Facebook\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const inToggler = (e) => {\r\n    setId(\"LinkedIn\");\r\n    if (!toggle) {\r\n      setToggle(true);\r\n    } else {\r\n      if (id == \"LinkedIn\") {\r\n        setId(\"LinkedIn\");\r\n        setToggle(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const webToggler = (e) => {\r\n    setId(\"Website\");\r\n    if (!toggle) {\r\n      setToggle(true);\r\n    } else {\r\n      if (id == \"Website\") {\r\n        setToggle(false);\r\n        setId(\"Website\");\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  const onChangeHandler = (e) => {\r\n    setUrl(e.target.value);\r\n  };\r\n\r\n  const upload = () => {\r\n    let ur = url;\r\n    if(!url.startsWith(\"https://\")){\r\n        ur = \"https://\" + url\r\n    }\r\n    const link = { name: id, url: ur };\r\n    console.log(link);\r\n    userService.uploadCompanyLink(link).then((res) => {\r\n      setId(\"\");\r\n      setUrl(\"\");\r\n      setToggle(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div class=\"form-group row col-sm-12 align-items-center\">\r\n        <label class=\"col-sm-2 col-form-label\">Add Socials:</label>\r\n        <MDBContainer className=\"col-sm-10 flex-row mt-3\">\r\n          <Tooltip title=\"Lien pour le profil Facebook\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              className=\"col-sm-3 col-4\"\r\n              social=\"fb\"\r\n              onClick={fbToggler}\r\n            >\r\n              <FacebookIcon />\r\n            </MDBBtn>\r\n          </Tooltip>\r\n          <Tooltip title=\"Lien pour le profil LinkedIn\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              className=\"col-sm-3 col-4\"\r\n              social=\"li\"\r\n              onClick={inToggler}\r\n            >\r\n              <LinkedInIcon />\r\n            </MDBBtn>\r\n          </Tooltip>\r\n          <Tooltip title=\"Lien pour votre site Web\">\r\n            <MDBBtn\r\n              size=\"lg\"\r\n              className=\"col-sm-3 col-4\"\r\n              social=\"git\"\r\n              onClick={webToggler}\r\n            >\r\n              <LanguageIcon />\r\n            </MDBBtn>\r\n          </Tooltip>\r\n        </MDBContainer>\r\n      </div>\r\n      {toggle && (\r\n        <div class=\"form-group\" style={{ display: \"flex\" }}>\r\n          {id && (\r\n            <input\r\n              class=\"form-control col-sm-8\"\r\n              type=\"text\"\r\n              placeholder={`Lien ${id}`}\r\n              style={{ backgroundColor: \"#f3f2ef\" }}\r\n              id={id}\r\n              value={url}\r\n              onChange={onChangeHandler}\r\n              required\r\n            />\r\n          )}\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"info\"\r\n            style={{ marginLeft: \"3px\", fontWeight: \"bolder\" }}\r\n            onClick={() => {\r\n              upload();\r\n            }}\r\n          >\r\n            Add\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Socials;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Feed\\ProfileInfo\\ProfileInfo.jsx",["580","581"],"import React from \"react\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction ProfileInfo({ id, name, company, role, image }) {\r\n  const history = useHistory();\r\n  const handleClick = () => {\r\n  };\r\n  function capitalizeTheFirstLetterOfEachWord(words) {\r\n    var separateWord = words?.toLowerCase().split(\" \");\r\n    for (var i = 0; i < separateWord?.length; i++) {\r\n      separateWord[i] =\r\n        separateWord[i]?.charAt(0).toUpperCase() +\r\n        separateWord[i]?.substring(1);\r\n    }\r\n    return separateWord?.join(\" \");\r\n  }\r\n\r\n  return (\r\n    <div className={styles.profile_info} onClick={handleClick}>\r\n      {role == 1 ? (\r\n        <Avatar className={styles.image} src={image} />\r\n      ) : (\r\n        <Avatar className={`${styles.image} ${styles.square}`} src={image} />\r\n      )}\r\n\r\n      {role === 1 && (\r\n        <h5>\r\n          {capitalizeTheFirstLetterOfEachWord(name)} - <span>Etudiant</span>\r\n        </h5>\r\n      )}\r\n      {role === 3 && (\r\n        <h5>\r\n          {capitalizeTheFirstLetterOfEachWord(company)} -{\" \"}\r\n          <span>Entreprise</span>\r\n        </h5>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileInfo;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Messages\\Sidebar\\MessageConversation\\MessageConversation.jsx",["582"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport styles from './MessageConversation.module.css'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nfunction MessageConversation({ isActive, name, image, message, lastDate, onClick }) {\r\n    const [active, setActive] = useState(false)\r\n    useMemo(() => {\r\n        setActive(isActive ? styles.active : \"\")\r\n    }, [isActive]);\r\n    return (\r\n        <div onClick={onClick} className={`${styles.container} ${active}`}>\r\n            <Avatar className={styles.avatar} alt={name} src={image} />\r\n            <div className={styles.infos}>\r\n                <h4>{name}</h4>\r\n                <h6>{message}</h6>\r\n                <div className={styles.date}>{lastDate}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageConversation\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\Post\\Comments\\Comment\\Comment.jsx",["583","584","585","586","587","588","589","590","591","592"],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\InputOption\\InputOption.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Home\\Feed\\Post\\Post.jsx",["593","594","595","596","597","598","599","600","601","602","603"],"import { Avatar } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport React, { useEffect, useState, initialState, useRef } from \"react\";\r\nimport \"./Post.scss\";\r\nimport PublicIcon from \"@material-ui/icons/Public\";\r\nimport InputOption from \"../InputOption/InputOption\";\r\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\nimport userService from \"../../../../services/userService\";\r\nimport authService from \"../../../../services/authService\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport axios from \"axios\";\r\nimport DeleteTwoToneIcon from \"@material-ui/icons/DeleteTwoTone\";\r\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\r\nimport Comment from \"./Comments/Comment/Comment\";\r\nimport \"./Comments/AddComment/AddComment.scss\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport ThumbUpAltOutlinedIcon from \"@material-ui/icons/ThumbUpAltOutlined\";\r\nimport ModalB from \"react-bootstrap/Modal\";\r\nimport ModalImage from \"react-modal-image\";\r\nimport ExpandLessIcon from \"@material-ui/icons/ExpandLess\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport WarningIcon from \"@material-ui/icons/Warning\";\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  small: {\r\n    width: theme.spacing(3),\r\n    height: theme.spacing(3),\r\n  },\r\n  large: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: \"70vw\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction Post({\r\n  user,\r\n  postId,\r\n  message,\r\n  timestamp,\r\n  ownerId,\r\n  role,\r\n  username,\r\n  currentUserId,\r\n  ownerImage,\r\n  imageType,\r\n  onChange,\r\n}) {\r\n  const [input, setInput] = useState(message);\r\n  const [owner, setOwner] = useState();\r\n  const [commentInput, setCommentInput] = useState(\"\");\r\n  const classes = useStyles();\r\n  const [comments, setComments] = useState([]);\r\n\r\n  const [successful, setSuccessful] = useState(true);\r\n  const [uploadMessage, setUploadMessage] = useState(\"\");\r\n\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [toggleComment, setToggleComment] = useState(false);\r\n\r\n  const [modalStyle] = useState(getModalStyle);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [toggleLike, setToggleLike] = useState(false);\r\n  const [shownLikes, setShownLikes] = useState(initialState);\r\n  const [likes, setLikes] = useState(initialState);\r\n  const [snackOpen, setSnackOpen] = useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n\r\n  const handleSnackClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setSnackOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   const getPosts = async () => {\r\n  //     const result = await axios.get(\"http://localhost:5000/api/cv/getPosts\");\r\n  //     setRes(result?.data);\r\n  //     arrayForHoldingPosts = result?.data?.slice(0, 10);\r\n  //     setPostsToShow(res?.slice(0, 10));\r\n  //   };\r\n  //   getPosts();\r\n  // }, [refresh]);\r\n\r\n  useEffect(() => {\r\n    userService.getUserById(ownerId).then((response) => {\r\n      setOwner(response?.data);\r\n    });\r\n    async function bzaf() {\r\n      const result = await userService.getLikesByPost(postId);\r\n      setLikes(result?.data);\r\n      setShownLikes(result?.data?.length);\r\n      setRefresh(true);\r\n      for (let i = 0; i < result?.data?.length; i++) {\r\n        if (user?.id === result?.data[i]?.likerId) {\r\n          setToggleLike(true);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    bzaf();\r\n    userService.getPostComments(postId).then((response) => {\r\n      setComments(response?.data);\r\n      setToggleComment(!toggleComment);\r\n    });\r\n    setToggleComment(!toggleComment); //problem here\r\n  }, [refresh]);\r\n\r\n  const body = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <h2 id=\"simple-modal-title\">Edit your Post</h2>\r\n      <p id=\"simple-modal-description\">\r\n        <textarea\r\n          className=\"inputs form-control col-sm-12 mt-2\"\r\n          rows=\"4\"\r\n          maxLength=\"1000\"\r\n          placeholder=\"Post\"\r\n          style={{\r\n            backgroundColor: \"#f3f2ef\",\r\n            resize: \"none\",\r\n          }}\r\n          defaultValue={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n        ></textarea>\r\n        <Button\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            updatePost(postId);\r\n          }}\r\n        >\r\n          Update\r\n        </Button>\r\n      </p>\r\n      {/* <SimpleModal /> */}\r\n    </div>\r\n  );\r\n\r\n  //modalconst [modalShow, setModalShow] = useState(false);\r\n\r\n  // useEffect(() => {\r\n  //   async function getImageById() {\r\n  //     if (role === 1)\r\n  //       await userService.getImageById(ownerId).then((response) => {\r\n  //         setImaage(`data:image/png;base64,${response?.data}`);\r\n  //       });\r\n  //     else if (role === 3)\r\n  //       await userService.getCompanyImageById(ownerId).then((response) => {\r\n  //         setImaage(`data:image/png;base64,${response?.data}`);\r\n  //       });\r\n  //   }\r\n  //   getImageById();\r\n  // }, []);\r\n\r\n  function MyVerticallyCenteredModal(props) {\r\n    return (\r\n      <ModalB\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        dialogClassName=\"image_modal\"\r\n      >\r\n        <ModalB.Body className=\"image_modal_body\">\r\n          <img\r\n            className=\"post_image\"\r\n            onClick={() => setModalShow(true)}\r\n            src={userService.imageLink + postId + \".\" + imageType}\r\n          />\r\n        </ModalB.Body>\r\n      </ModalB>\r\n    );\r\n  }\r\n  const deleteById = (id) => {\r\n    userService.deletePostById(id).then((res) => {\r\n      // window.location.reload();\r\n      onChange(true);\r\n      onChange(false);\r\n    });\r\n  };\r\n\r\n  const updatePost = (id) => {\r\n    const post = {\r\n      message: input,\r\n      role: user?.roles[0]?.id,\r\n    };\r\n    if (user?.roles[0]?.id === 1) {\r\n      userService.updateStudentPost(id, post).then(\r\n        (response) => {\r\n          setSuccessful(true);\r\n          setSnackOpen(true);\r\n          setUploadMessage(\"Post Updated!\");\r\n          onChange(true);\r\n          onChange(false);\r\n          setOpen(false);\r\n        },\r\n        (error) => {\r\n          setSuccessful(false);\r\n          setSnackOpen(true);\r\n          setUploadMessage(\"Could not update post!\");\r\n        }\r\n      );\r\n    } else if (user?.roles[0]?.id === 3) {\r\n      userService.updateCompanyPost(id, post).then(\r\n        (response) => {\r\n          setSuccessful(true);\r\n          setSnackOpen(true);\r\n          setUploadMessage(\"Post Updated!\");\r\n          onChange(true);\r\n          onChange(false);\r\n          setOpen(false);\r\n        },\r\n        (error) => {\r\n          setSuccessful(false);\r\n          setSnackOpen(true);\r\n          setUploadMessage(\"Could not update post!\");\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const uploadComment = () => {\r\n    const errors = [];\r\n    if (commentInput.length === 0) errors.push(\"Comment cannot be empty.\\n\");\r\n    if (errors.length !== 0) {\r\n      setUploadMessage(errors);\r\n      setSuccessful(false);\r\n      setSnackOpen(true);\r\n      return 0;\r\n    }\r\n\r\n    if (user?.roles[0]?.id === 1) {\r\n      let comment = {\r\n        message: commentInput,\r\n        role: 1,\r\n      };\r\n      userService.uploadStudentComment(postId, comment).then(\r\n        (response) => {\r\n          setRefresh(!refresh);\r\n          setSnackOpen(true);\r\n          setSuccessful(true);\r\n          setCommentInput(\"\");\r\n          setUploadMessage(\"Comment uploaded!\");\r\n        },\r\n        (error) => {\r\n          setSuccessful(false);\r\n          setSnackOpen(true);\r\n          setUploadMessage(\"Could not upload comment!\");\r\n        }\r\n      );\r\n    } else if (user?.roles[0]?.id === 3) {\r\n      let comment = {\r\n        message: commentInput,\r\n        role: 3,\r\n      };\r\n      console.log(comment);\r\n      userService.uploadCompanyComment(postId, comment).then((response) => {\r\n        setRefresh(!refresh);\r\n        setSnackOpen(true);\r\n        setSuccessful(true);\r\n        setCommentInput(\"\");\r\n        setUploadMessage(\"Message uploaded!\");\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    const keyCode = e.which || e.keyCode;\r\n    if (keyCode === 13 && !e.shiftKey) {\r\n      e.preventDefault();\r\n      uploadComment(postId);\r\n    }\r\n  };\r\n\r\n  const likePost = (postId) => {\r\n    userService.likePost(postId, user?.id).then(\r\n      (response) => {\r\n        setToggleLike(true);\r\n        setShownLikes(shownLikes + 1);\r\n      },\r\n      (error) => {\r\n        setSuccessful(false);\r\n        setUploadMessage(\"Couldn't like post!\");\r\n        setSnackOpen(true);\r\n        console.log(error);\r\n      }\r\n    );\r\n  };\r\n  const unlikePost = (postId) => {\r\n    userService.unlikePost(postId).then(\r\n      (response) => {\r\n        setShownLikes(shownLikes - 1);\r\n        setToggleLike(false);\r\n      },\r\n      (error) => {\r\n        setSuccessful(false);\r\n        setUploadMessage(\"404 Couldn't unlike post!\");\r\n        setSnackOpen(true);\r\n      }\r\n    );\r\n  };\r\n  const report = (postId) => {\r\n    authService.reportByPost(postId).then((res) => {\r\n      setUploadMessage(\"Avertissement envoyé\");\r\n      setSnackOpen(true);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"post\">\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >\r\n        {body}\r\n      </Modal>\r\n\r\n      <div className=\"post_header\">\r\n        <Link to={`/view/${ownerId}`} style={{ textDecoration: \"none\" }}>\r\n          {role === 1 && (\r\n            <Avatar\r\n              src={userService.imageLink + owner?.cv?.image}\r\n              className={classes.large}\r\n            />\r\n          )}\r\n          {role === 3 && (\r\n            <Avatar\r\n              variant=\"square\"\r\n              src={userService.imageLink + owner?.company?.companyImage}\r\n              className={classes.large}\r\n            />\r\n          )}\r\n          {/* <Avatar src={imaage} className={classes.large} /> */}\r\n        </Link>\r\n        <div className=\"post_info\">\r\n          <h2 style={{ display: \"flex\" }}>\r\n            {role === 1 &&\r\n              owner?.cv?.about?.firstName + \" \" + owner?.cv?.about?.lastName}\r\n            {role === 3 && owner?.company?.aboutCompany?.name}\r\n          </h2>\r\n          <p>{`@${username}  - ${role === 1 ? \"Student\" : \"Enterprise\"}`}</p>\r\n          <span></span>\r\n          <div className=\"post_date\">\r\n            <h6 style={{ color: \"#000\" }}>{timestamp} &nbsp;</h6>\r\n            <PublicIcon className=\"global\" style={{ color: \"#000\" }} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n      <div className=\"post_body\">\r\n        <div className=\"post_message\">{message}</div>\r\n\r\n        {imageType && (\r\n          <ModalImage\r\n            className=\"post_image\"\r\n            small={userService.imageLink + \"post\" + postId + \".\" + imageType}\r\n            large={userService.imageLink + \"post\" + postId + \".\" + imageType}\r\n            alt=\"\"\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"post_stats\">\r\n        <p style={{ fontSize: \"13px\" }}>\r\n          {shownLikes} likes&nbsp;&nbsp;-&nbsp;&nbsp;\r\n          {comments?.length} comments\r\n        </p>\r\n      </div>\r\n      <div className=\"post_buttons\">\r\n        {toggleLike && user?.roles[0]?.id != 2 && (\r\n          <InputOption\r\n            Icon={ThumbUpIcon}\r\n            title=\"Like\"\r\n            color=\"blue\"\r\n            onClick={() => unlikePost(postId)}\r\n          />\r\n        )}{\" \"}\r\n        {/* dislike */}\r\n        {!toggleLike && user?.roles[0]?.id != 2 && (\r\n          <InputOption\r\n            Icon={ThumbUpAltOutlinedIcon}\r\n            title=\"Like\"\r\n            color=\"blue\"\r\n            onClick={() => likePost(postId)}\r\n          />\r\n        )}\r\n        {/* like */}\r\n        <InputOption\r\n          Icon={CommentIcon}\r\n          title=\"Comment\"\r\n          color=\"green\"\r\n          onClick={() => setToggleComment(!toggleComment)}\r\n        />\r\n        {/* {currentUserId !== ownerId && (\r\n            <InputOption Icon={ShareIcon} title=\"Share\" color=\"purple\" />\r\n          )} */}\r\n        {currentUserId === ownerId && (\r\n          <>\r\n            <InputOption\r\n              Icon={EditTwoToneIcon}\r\n              title=\"Modifier\"\r\n              color=\"purple\"\r\n              onClick={handleOpen}\r\n            />\r\n          </>\r\n        )}\r\n        {(currentUserId === ownerId || user?.roles[0]?.id == 2) && (\r\n          <>\r\n            <InputOption\r\n              Icon={DeleteTwoToneIcon}\r\n              title=\"Supprimer\"\r\n              color=\"red\"\r\n              onClick={() => {\r\n                deleteById(postId);\r\n              }}\r\n            />\r\n          </>\r\n        )}\r\n        {user?.roles[0]?.id == 2 && (\r\n          <InputOption\r\n            Icon={WarningIcon}\r\n            title=\"Signaler\"\r\n            color=\"red\"\r\n            onClick={() => {\r\n              report(postId);\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      {toggleComment && (\r\n        <>\r\n          {comments.length !== 0 && (\r\n            <div className=\"comments-header\">\r\n              <h4>Comments</h4>\r\n            </div>\r\n          )}\r\n          {user?.roles[0]?.id != 2 && (\r\n            <div className=\"add-comment\">\r\n              <Avatar\r\n                src={\r\n                  role === 1\r\n                    ? userService.imageLink + ownerImage\r\n                    : userService.imageLink + ownerImage\r\n                }\r\n                className={classes.large}\r\n              />\r\n              <textarea\r\n                rows=\"2\"\r\n                className=\"add-text-area\"\r\n                placeholder=\"Add a comment\"\r\n                value={commentInput}\r\n                onChange={(e) => setCommentInput(e.target.value)}\r\n                onKeyDown={handleKeyDown}\r\n              />\r\n\r\n              {/* <input\r\n            type=\"text\"\r\n            // rows=\"4\"\r\n            className=\"add-text-area\"\r\n            placeholder=\"Add a comment\"\r\n            value={commentInput}\r\n            onChange={(e) => setCommentInput(e.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n          /> */}\r\n            </div>\r\n          )}\r\n          {commentInput && (\r\n            <Button\r\n              color=\"blue\"\r\n              variant=\"contained\"\r\n              className=\"toggleCommentButton\"\r\n              style={{ marginBottom: \"10px\" }}\r\n              onClick={() => uploadComment(postId)}\r\n            >\r\n              Publier {<SendIcon />}\r\n            </Button>\r\n          )}\r\n        </>\r\n      )}\r\n      {toggleComment &&\r\n        comments?.map((e, key) => (\r\n          <Comment\r\n            ownerImage={ownerImage}\r\n            key={key}\r\n            onChange={() => {\r\n              setRefresh(!refresh);\r\n            }}\r\n            refresh={refresh}\r\n            user={user}\r\n            commentId={e?.id}\r\n            message={e?.message}\r\n            timestamp={e?.updatedAt.substring(0, 10)}\r\n            username={e?.ownerUsername}\r\n            firstName={e?.ownerFirstName}\r\n            lastName={e?.ownerLastName}\r\n            companyName={e?.companyName}\r\n            role={e?.role}\r\n            ownerId={e?.ownersId}\r\n            currentUserId={user?.id}\r\n            likes={e?.likes}\r\n            onChange={(value) => setRefresh(value)}\r\n          />\r\n        ))}\r\n      <Snackbar\r\n        open={snackOpen}\r\n        autoHideDuration={1500}\r\n        onClose={handleSnackClose}\r\n      >\r\n        <Alert\r\n          onClose={handleClose}\r\n          severity={successful ? \"success\" : \"error\"}\r\n        >\r\n          {uploadMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n      {toggleComment && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\",\r\n          }}\r\n        >\r\n          <Button\r\n            color=\"default\"\r\n            variant=\"outlined\"\r\n            className=\"toggleCommentButton\"\r\n            onClick={() => setToggleComment(!toggleComment)}\r\n          >\r\n            {<ExpandLessIcon />} Close\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\js\\cv.js",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Interest.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\About.jsx",["604","605","606","607","608","609","610"],"import React, { useState, useEffect } from \"react\";\r\nimport userService from \"../../../../services/userService\";\r\nimport \"./About.css\";\r\n\r\nconst About = (props) => {\r\n  const etablishment = props?.data?.etablishment?.name;\r\n  const data = props?.data?.cv?.about;\r\n  const email = props.email;\r\n\r\n  const Fb = () => {\r\n    for (let i = 0; i < props?.data?.cv?.links?.length; i++) {\r\n      if (props?.data?.cv?.links[i]?.name == \"Facebook\") {\r\n        return (\r\n          <a\r\n            rel=\"noreferrer\"\r\n            target=\"_blank\"\r\n            className=\"social-icon\"\r\n            href={`${props?.data?.cv?.links[i]?.url}`}\r\n          >\r\n            <i className=\"fab fa-facebook-f\" />\r\n          </a>\r\n        );\r\n      }\r\n    }\r\n    return <></>;\r\n  };\r\n  const Ln = () => {\r\n    for (let i = 0; i < props?.data?.cv?.links?.length; i++) {\r\n      if (props?.data?.cv?.links[i]?.name == \"LinkedIn\") {\r\n        return (\r\n          <a\r\n            rel=\"noreferrer\"\r\n            target=\"_blank\"\r\n            className=\"social-icon\"\r\n            href={`${props?.data?.cv?.links[i]?.url}`}\r\n          >\r\n            <i className=\"fab fa-linkedin-in\" />\r\n          </a>\r\n        );\r\n      }\r\n    }\r\n    return <></>;\r\n  };\r\n  const Git = () => {\r\n    for (let i = 0; i < props?.data?.cv?.links?.length; i++) {\r\n      if (props?.data?.cv?.links[i]?.name == \"GitHub\") {\r\n        return (\r\n          <a\r\n            rel=\"noreferrer\"\r\n            target=\"_blank\"\r\n            className=\"social-icon\"\r\n            href={`${props?.data?.cv?.links[i]?.url}`}\r\n          >\r\n            <i className=\"fab fa-github\" />\r\n          </a>\r\n        );\r\n      }\r\n    }\r\n    return <></>;\r\n  };\r\n  const Yt = () => {\r\n    for (let i = 0; i < props?.data?.cv?.links?.length; i++) {\r\n      if (props?.data?.cv?.links[i]?.name == \"YouTube\") {\r\n        return (\r\n          <a\r\n            rel=\"noreferrer\"\r\n            target=\"_blank\"\r\n            className=\"social-icon\"\r\n            href={`${props?.data?.cv?.links[i]?.url}`}\r\n          >\r\n            <i class=\"fab fa-youtube\"></i>\r\n          </a>\r\n        );\r\n      }\r\n    }\r\n    return <></>;\r\n  };\r\n\r\n  return (\r\n    <section className=\"resume-section\" id=\"about\">\r\n      <div className=\"resume-section-content\">\r\n        <h1 className=\"mb-0\">\r\n          {data?.firstName}\r\n          <span className=\"text-primary\">\r\n            &nbsp;\r\n            {data?.lastName}\r\n          </span>\r\n        </h1>\r\n        <div className=\"subheading mb-5\">\r\n          {data?.address + \"· \" + data?.city + \"· \" + data?.number + \"· \"}\r\n          <span className=\"text-primary\">{email}</span>\r\n        </div>\r\n        {/* <p className=\" mb-3\">\r\n          Domaine d'étude:{\" \"}\r\n          {data?.domaine[0].toUpperCase() +\r\n            data?.domaine.slice(1, data?.domaine.length)}\r\n        </p> */}\r\n        <p className=\"p-3 h5 text-primary\">{etablishment}.</p>\r\n\r\n        <p className=\"lead mb-5\">{data?.bio}</p>\r\n        <div className=\"social-icons d-flex\">\r\n          <Fb />\r\n          <Git />\r\n          <Ln />\r\n          <Yt />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\nexport default About;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Award.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Experience.jsx",["611","612"],"import React from \"react\";\r\nimport \"./Experience.css\";\r\nconst Experience = (props) => {\r\n  const data = props.data;\r\n  return (\r\n    <>\r\n      <section className=\"resume-section\" id=\"experience\">\r\n        <div className=\"resume-section-content\">\r\n          <h2 className=\"mb-5\">\r\n            Experiences Professionnelles et Projets\r\n            universitaires/professionnels\r\n          </h2>\r\n          {data\r\n            ?.filter((e) => !e?.isProject)\r\n            ?.map((experience) => (\r\n              <div className=\"d-flex flex-column flex-md-row justify-content-between mb-5\">\r\n                <div className=\"flex-grow-1\">\r\n                  <h3 className=\"mb-0\">{experience?.occupation}</h3>\r\n                  <div className=\"subheading mb-3\">{experience?.company}</div>\r\n                  <p>{experience?.description}</p>\r\n                </div>\r\n                <div className=\"flex-shrink-0\">\r\n                  <span className=\"text-primary\">\r\n                    {experience?.dateStart?.split(\" \")[0] +\r\n                      \" \" +\r\n                      experience?.dateStart?.split(\" \")[2]}{\" \"}\r\n                    -{\" \"}\r\n                    {experience?.dateEnd == \"Present\"\r\n                      ? experience?.dateEnd\r\n                      : experience?.dateEnd?.split(\" \")[0] +\r\n                        \" \" +\r\n                        experience?.dateEnd?.split(\" \")[2]}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          {data\r\n            ?.filter((e) => e?.isProject)\r\n            ?.map((experience) => (\r\n              <div className=\"d-flex flex-column flex-md-row justify-content-between mb-5\">\r\n                <div className=\"flex-grow-1\">\r\n                  <h3 className=\"mb-0\">{experience?.occupation}</h3>\r\n                  <p>{experience?.description}</p>\r\n                </div>\r\n                <div className=\"flex-shrink-0\">\r\n                  <span className=\"text-primary\">\r\n                    {experience?.dateStart?.split(\" \")[0] +\r\n                      \" \" +\r\n                      experience?.dateStart?.split(\" \")[2]}{\" \"}\r\n                    -{\" \"}\r\n                    {experience?.dateEnd == \"Present\"\r\n                      ? experience?.dateEnd\r\n                      : experience?.dateEnd?.split(\" \")[0] +\r\n                        \" \" +\r\n                        experience?.dateEnd?.split(\" \")[2]}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\nexport default Experience;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\company\\Nav.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Skill.jsx",["613","614","615","616","617"],"import React from \"react\";\r\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\r\nimport \"./Skill.css\";\r\nimport Box from '@material-ui/core/Box';\r\nimport Rating, { IconContainerProps } from '@material-ui/lab/Rating';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Skill = (props) => {\r\n  const dev = props.dev;\r\n  const normal = props.normal;\r\n  const software = props.software;\r\n\r\n  return (\r\n    <section className=\"resume-section m-0\" id=\"skills\">\r\n      <div className=\"resume-section-content\">\r\n        <h2 className=\"mb-5\">Skills</h2>\r\n        {\r\n          dev.length!=0 && (<>\r\n          <div className=\"subheading mb-3\">Programming Languages</div>\r\n        <div className=\"d-flex flex-row\" style={{ flexWrap: \"wrap\" }}>\r\n          {dev?.map((e) => (\r\n            <div className=\"col-2 mr-4 d-block mb-2\">\r\n              <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                <Typography component=\"legend\" className=\"d-flex align-items-center space-between flex-nowrap justify-content-start\"><i className={e.icon + \" fa-2x\"} /><span className=\"ml-2\">{e.name}</span></Typography>\r\n                <Rating readOnly name=\"customized-10\" defaultValue={e.value / 2} max={5} />\r\n              </Box>\r\n            </div>\r\n          ))}\r\n        </div>\r\n          </>)\r\n        }\r\n        {\r\n          software.length!=0 && (<>\r\n          <div className=\"subheading mb-3 mt-3\">Softwares and Other Skills</div>\r\n        <div className=\"d-flex flex-row\" style={{ flexWrap: \"wrap\" }}>\r\n          {software?.map((e) => (\r\n            <div className=\"col-2 mr-4 d-block\">\r\n              <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                <Typography component=\"legend\" className=\"d-flex align-items-center space-between flex-nowrap justify-content-start\"><i className={e.icon + \" fa-2x\"} /><span className=\"ml-2\">{e.name}</span></Typography>\r\n                <Rating readOnly name=\"customized-10\" defaultValue={e.value / 2} max={5} />\r\n              </Box>\r\n            </div>\r\n          ))}\r\n        </div>\r\n          </>)\r\n        }\r\n        {\r\n          normal?.length !=0 &&\r\n          (<>\r\n          <div className=\"subheading mb-3 mt-3\">Languages</div>\r\n        <div className=\"d-flex flex-row\" style={{ flexWrap: \"wrap\" }}>\r\n          {normal?.map((e) => (\r\n            <div className=\"col-5 mr-4 d-block\">\r\n              <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\r\n                <Typography component=\"legend\">{e.name}</Typography>\r\n                <Rating readOnly name=\"customized-10\" defaultValue={e.value} max={10} />\r\n              </Box>\r\n            </div>\r\n          ))}\r\n        </div>\r\n          </>)\r\n        }\r\n        \r\n        \r\n      </div>\r\n    </section >\r\n  );\r\n};\r\nexport default Skill;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Education.jsx",["618"],"import React from \"react\";\r\nconst Education = (props) => {\r\n  const data = props.data;\r\n\r\n  return (\r\n    <section className=\"resume-section mt-0\" id=\"education\">\r\n      <div className=\"resume-section-content\">\r\n        <h2 className=\"mb-5\">Education</h2>\r\n        {data?.map((educ, index) => (\r\n          <div className=\"d-flex flex-column flex-md-row justify-content-between mb-5\">\r\n            <div className=\"flex-grow-1\">\r\n              <h3 className=\"mb-0\">{educ?.school}</h3>\r\n              <div className=\"subheading mb-3\">{educ?.diploma}</div>\r\n              <div>{educ?.field}</div>\r\n            </div>\r\n            <div className=\"flex-shrink-0\">\r\n              <span className=\"text-primary\">\r\n                {educ?.dateStart?.split(\" \")[0] +\r\n                  \" \" +\r\n                  educ?.dateStart?.split(\" \")[2]}{\" \"}\r\n                -{\" \"}\r\n                {educ?.dateEnd == \"Present\" ? educ?.dateEnd : educ?.dateEnd?.split(\" \")[0] +\r\n                  \" \" +\r\n                  educ?.dateEnd?.split(\" \")[2]}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\nexport default Education;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\cv\\Navbar.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Profile\\ShownProfile\\company\\About.jsx",["619","620","621"],"import React from \"react\";\r\n\r\nconst About = (props) => {\r\n  const data = props?.data?.aboutCompany;\r\n  const email = props?.email;\r\n\r\n  \r\nconst Fb = () => {\r\n    for (let i = 0; i < props?.data?.links?.length; i++) {\r\n      if (props?.data?.links[i]?.name == \"Facebook\") {\r\n        return (\r\n          <a\r\n            rel=\"noreferrer\"\r\n            target=\"_blank\"\r\n            className=\"social-icon\"\r\n            href={`${props?.data?.links[i]?.url}`}\r\n          >\r\n            <i className=\"fab fa-facebook-f\" />\r\n          </a>\r\n        );\r\n      }\r\n    }\r\n    return <></>;\r\n  };\r\n  const Ln = () => {\r\n    for (let i = 0; i < props?.data?.links?.length; i++) {\r\n      if (props?.data?.links[i]?.name == \"LinkedIn\") {\r\n        return (\r\n          <a\r\n            rel=\"noreferrer\"\r\n            target=\"_blank\"\r\n            className=\"social-icon\"\r\n            href={`${props?.data?.links[i]?.url}`}\r\n          >\r\n            <i className=\"fab fa-linkedin-in\" />\r\n          </a>\r\n        );\r\n      }\r\n    }\r\n    return <></>;\r\n  };\r\nconst Web = () => {\r\n    for (let i = 0; i < props?.data?.links?.length; i++) {\r\n      if (props?.data?.links[i]?.name == \"Website\") {\r\n        return (\r\n          <a\r\n            rel=\"noreferrer\"\r\n            target=\"_blank\"\r\n            className=\"social-icon\"\r\n            href={`${props?.data?.links[i]?.url}`}\r\n          >\r\n            <i className=\"fas fa-globe\" />\r\n          </a>\r\n        );\r\n      }\r\n    }\r\n    return <></>;\r\n  };\r\n\r\n  return (\r\n    <section className=\"resume-section\" id=\"about\">\r\n      <div className=\"resume-section-content\">\r\n        <h1 className=\"mb-0\">\r\n          <span className=\"text-primary\">\r\n            &nbsp;\r\n            {data?.name}\r\n          </span>\r\n        </h1>\r\n        <div className=\"lead mb-5\">\r\n          Address : {data?.address}&nbsp;\r\n          <span style={{ color: \"brown\", fontWeight: \"bolder\" }}>\r\n            {data?.city}\r\n          </span>\r\n          <br />\r\n          Email : {email} <br />\r\n          Phone : {data?.number} <br />\r\n        </div>\r\n        <h4>Company Bio :</h4>\r\n        <p className=\"lead mb-5\">{data?.bio}</p>\r\n        <div className=\"social-icons d-flex\">\r\n          <Fb />\r\n          <Web />\r\n          <Ln />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\nexport default About;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation Children\\Team.jsx",["622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645"],"import React, { useEffect } from \"react\";\r\nimport img1 from \"./img/aniss-moumen.jpeg\";\r\nimport img2 from \"./img/hassan-berragragui.jpeg\";\r\nimport img3 from \"./img/safouane.jpeg\";\r\nimport img4 from \"./img/abdo.jpeg\";\r\nimport img5 from \"./img/saad.jpg\";\r\nimport img6 from \"./img/tm1.jpg\";\r\nimport \"./team.css\";\r\nimport Aos from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\n\r\nexport default function Team() {\r\n  useEffect(() => {\r\n    Aos.init({ duration: 2000 });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"w-100\">\r\n      <section id=\"team\" class=\"team section-bg\">\r\n        <div className=\"section-title\">\r\n              <h2>Team </h2>\r\n            </div>\r\n        <div class=\"container mt-4 mb-4\" data-aos=\"fade-up\">\r\n\r\n          <div class=\"row mb-5\">\r\n\r\n            <div class=\"col-lg-6 \">\r\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"100\">\r\n                <div class=\"pic\"><img src={img1} class=\"img-fluid\" alt=\"\" /></div>\r\n                <div class=\"member-info\">\r\n                  <h4>Aniss Moumen</h4>\r\n                  <span>Encadrant</span>\r\n                  <p>Profeseur à l'école nationale des sciences appliquées de kenitra</p>\r\n                  <div class=\"social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter fa-xs\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f fa-xs\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram fa-xs\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in fa-xs\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-lg-6 mt-4 mt-lg-0\">\r\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"200\">\r\n                <div class=\"pic\"><img src={img6} class=\"img-fluid\" alt=\"\" /></div>\r\n                <div class=\"member-info\">\r\n                  <h4>Aymane El Mouhtarim</h4>\r\n                  <span>Fullstack Developer</span>\r\n                  <p>Eléve ingenieur à l'école nationale des sciences appliquées de kenitra</p>\r\n                  <div class=\"social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter fa-sm\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f fa-sm\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram fa-sm\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in fa-sm\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-lg-6 \">\r\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"100\">\r\n                <div class=\"pic\"><img src={img5} class=\"img-fluid\" alt=\"\" /></div>\r\n                <div class=\"member-info\">\r\n                  <h4>Saad Errazgouni</h4>\r\n                  <span>Fullstack Developer</span>\r\n                  <p>Eléve ingenieur à l'école nationale des sciences appliquées de kenitra</p>\r\n                  <div class=\"social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-lg-6 mt-4 mt-lg-0\">\r\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"200\">\r\n                <div class=\"pic\"><img src={img2} class=\"img-fluid rounded\" alt=\"\" /></div>\r\n                <div class=\"member-info\">\r\n                  <h4>Hassan berragragui</h4>\r\n                  <span>Fullstack Developer</span>\r\n                  <p>Eléve ingenieur à l'école nationale des sciences appliquées de kenitra</p>\r\n                  <div class=\"social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-lg-6 mt-4\">\r\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"300\">\r\n                <div class=\"pic\"><img src={img3} class=\"img-fluid rounded\" alt=\"\" /></div>\r\n                <div class=\"member-info\">\r\n                  <h4>Safouane Lammari</h4>\r\n                  <span>Fullstack Developer</span>\r\n                  <p>Eléve ingenieur à l'école nationale des sciences appliquées de kenitra</p>\r\n                  <div class=\"social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-lg-6 mt-4\">\r\n              <div class=\"member d-flex align-items-start\" data-aos=\"zoom-in\" data-aos-delay=\"300\">\r\n                <div class=\"pic\"><img src={img4} class=\"img-fluid\" alt=\"\" /></div>\r\n                <div class=\"member-info\">\r\n                  <h4>Abdelkhalek Faik</h4>\r\n                  <span>Mobile Developer</span>\r\n                  <p>Eléve ingenieur à l'école nationale des sciences appliquées de kenitra</p> \r\n                  <div class=\"social\">\r\n                    <a href=\"\"><i class=\"fab fa-twitter\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-facebook-f\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-instagram\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                    <a href=\"\"><i class=\"fab fa-linkedin-in\" style={{ color: \"#8b8ef1\" }}></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </section>\r\n    </div>\r\n\r\n\r\n\r\n\r\n  );\r\n}\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\Presentation Children\\welcome.jsx",["646","647","648","649","650","651"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport img1 from \"./assets/img/clients/client-1.png\";\r\nimport imgc1 from \"./assets/img/clubs/club-1.png\";\r\nimport imgc2 from \"./assets/img/clubs/club-2.png\";\r\nimport imgc3 from \"./assets/img/clubs/club-3.png\";\r\nimport imgc4 from \"./assets/img/clubs/club-4.png\";\r\nimport imgc5 from \"./assets/img/clubs/club-3.png\";\r\nimport imgpa0 from \"./assets/img/pacademiques/0.png\";\r\nimport imgpa1 from \"./assets/img/pacademiques/1.jpg\";\r\nimport imgpa2 from \"./assets/img/pacademiques/2.jpg\";\r\nimport imgpa3 from \"./assets/img/pacademiques/3.png\";\r\nimport imgpa4 from \"./assets/img/pacademiques/4.png\";\r\nimport imgpa5 from \"./assets/img/pacademiques/5.png\";\r\nimport imgpa6 from \"./assets/img/pacademiques/6.png\";\r\nimport imgpa7 from \"./assets/img/pacademiques/7.png\";\r\nimport imgpa8 from \"./assets/img/pacademiques/8.png\";\r\nimport imgpa9 from \"./assets/img/pacademiques/9.png\";\r\nimport imgpa10 from \"./assets/img/pacademiques/10.png\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\n\r\nimport imgbanner from \"./img/banner.jpeg\";\r\nimport imgvideo from \"./assets1/img/about.jpg\";\r\nimport Slider from \"react-slick\";\r\nimport welcomecss from \"./welcome.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./welcome.css\";\r\nimport headpng from \"./assets/img/ecoles1.png\"; \r\n//import \"./assets1/js/main.js\";\r\n//import \"./assets/css/style.css\";  \r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport AccountBalanceIcon from '@material-ui/icons/AccountBalance';\r\nimport Aos from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\n \r\nexport default function Welcome() {\r\n  const history = useHistory();\r\n  const settings = {\r\n    slidesToShow: 4,\r\n    slideToScroll: 2,\r\n    autoplay: true,\r\n    autoplaySpeed: 1500,\r\n    arrows: false,\r\n    dots: false,\r\n    pauseOnHover: true,\r\n    responsive: [\r\n      {\r\n        breakpoint: 768,\r\n        settings: {\r\n          slidesToShow: 2,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 520,\r\n        settings: {\r\n          slidesToShow: 1,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  useEffect(() => {\r\n    Aos.init({ duration: 2000 });\r\n  }, []);\r\n\r\n  const [timerDays, setTimerDays] = useState(\"00\");\r\n  const [timerHours, setTimerHours] = useState(\"00\");\r\n  const [timerMinutes, setTimerMinutes] = useState(\"00\");\r\n  const [timerSeconds, setTimerSeconds] = useState(\"00\");\r\n\r\n  let interval = useRef();\r\n  const startTimer = () => {\r\n    const countdownDate = new Date(\"June 03 2021 00:00:00\").getTime();\r\n    interval = setInterval(() => {\r\n      const now = new Date().getTime();\r\n      const distance = countdownDate - now; \r\n\r\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\r\n      const hours = Math.floor(\r\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\r\n      );\r\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000); \r\n\r\n      if (distance < 0) {\r\n        //stop timer\r\n        clearInterval(interval.current);\r\n      } else {\r\n        //update timer\r\n        setTimerDays(days);\r\n        setTimerHours(hours);\r\n        setTimerMinutes(minutes);\r\n        setTimerSeconds(seconds);\r\n      }\r\n    }, 1000);\r\n  };\r\n  // componentDidMount\r\n  useEffect(() => {\r\n    startTimer();\r\n    return () => {\r\n      clearInterval(interval.current);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <section id=\"home\"></section>\r\n      <div className=\"landing\" >\r\n        <div className={welcomecss.s1} >\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-6 d-flex flex-column justify-content-center pt-4 pt-lg-0 order-2 order-lg-1\" id=\"#landing\">\r\n                <div className={welcomecss.s10}>\r\n                  <h1>La première édition du Forum Virtuel à l’Université Ibn Tofail,et la 7 ieme édition du Forum ENSAK-ENTREPRISES</h1>\r\n                  <h5>Sous le thème</h5>\r\n                  <h2>Le rôle du digital à l’université pour une meilleure ouverture des lauréats & étudiants</h2>\r\n                  <div className={welcomecss.dlgflex}>\r\n                    <a href=\"#cliens\" className={welcomecss.btngetstarted}>Plus de détails</a>\r\n                    <a href=\"https://www.youtube.com/watch?v=6YQwLMsjoFU&ab_channel=HassanBERRAGRAGUI\" target=\"_blank\" className={welcomecss.btnwatchvideo} data-vbtype=\"video\" data-autoplay=\"true\"> Regarder la vidéo <i className=\"far fa-play-circle\"></i></a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-lg-6 order-1 order-lg-2 gtco-feature\">\r\n                <div className=\"container-fluid gtco-feature\">\r\n                  <div className={welcomecss.cover}>\r\n                    <div className={welcomecss.card}>\r\n\r\n\r\n                      <svg className={welcomecss.backbg} width=\"100%\" viewBox=\"0 0 900 700\">\r\n                        <defs>\r\n                          <linearGradient id=\"PSgrad_01\" x1=\"64.279%\" x2=\"0%\" y1=\"76.604%\" y2=\"0%\">\r\n                            <stop offset=\"0%\" stop-color=\"rgb(250,236,246)\" stop-opacity=\"1\" />\r\n                            <stop offset=\"100%\" stop-color=\"rgb(250,236,246)\" stop-opacity=\"1\" />\r\n                          </linearGradient>\r\n                        </defs>\r\n                        <path fill-rule=\"evenodd\" opacity=\"0.102\" fill=\"url(#PSgrad_01)\"\r\n                          d=\"M616.656,2.494 L89.351,98.948 C19.867,111.658 -16.508,176.639 7.408,240.130 L122.755,546.348 C141.761,596.806 203.597,623.407 259.843,609.597 L697.535,502.126 C748.221,489.680 783.967,441.432 777.751,392.742 L739.837,95.775 C732.096,35.145 677.715,-8.675 616.656,2.494 Z\" />\r\n                      </svg>\r\n\r\n                      <svg className=\"svg2\" width=\"100%\" viewBox=\"0 0 700 500\">\r\n                        <clipPath id=\"clip-path\">\r\n                          <path d=\"M89.479,0.180 L512.635,25.932 C568.395,29.326 603.115,76.927 590.357,129.078 L528.827,380.603 C518.688,422.048 472.661,448.814 427.190,443.300 L73.350,400.391 C32.374,395.422 -0.267,360.907 -0.002,322.064 L1.609,85.154 C1.938,36.786 40.481,-2.801 89.479,0.180 Z\"></path>\r\n                        </clipPath>\r\n\r\n                        <image clip-path=\"url(#clip-path)\" href={imgbanner} width=\"100%\"\r\n                          height=\"465\" class=\"svg__image\"></image>\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <section id=\"cliens\" className=\"cliens\" id=\"cliens\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-12 col-md-14 col-16 d-flex align-items-center justify-content-center\">\r\n                <img src={headpng} class=\"img-fluid\" alt=\"\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section id=\"about1\" className=\"about\">\r\n          <div className=\"container\" data-aos=\"fade-up\">\r\n            <div className=\"section-titleleft\">\r\n              <h2>L'université en chiffre</h2>\r\n            </div>\r\n            <div className=\"row justify-content-end\">\r\n              <div className=\"col-lg-11\">\r\n                <div className=\"row justify-content-end\">\r\n                  <div className=\"col-lg-3 col-md-5 col-6 d-md-flex align-items-md-stretch\">\r\n                    <div className=\"count-box py-5\">\r\n                      <i className=\"icony icofont-university\"><AccountBalanceIcon /></i>\r\n                      <span data-toggle=\"counter-up\">11</span>\r\n                      <p>Etablissements</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-3 col-md-5 col-6 d-md-flex align-items-md-stretch\">\r\n                    <div className=\"count-box py-5\">\r\n                      <i className=\"icony icofont-building-alt\"><i class=\"far fa-building\"></i></i>\r\n                      <span data-toggle=\"counter-up\">8</span>\r\n                      <p>Centres</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-3 col-md-5 col-6 d-md-flex align-items-md-stretch\">\r\n                    <div className=\"count-box pb-5 pt-0 pt-lg-5\">\r\n                      <i className=\"icony icofont-teacher\"><i class=\"fas fa-user-tie\"></i></i>\r\n                      <span data-toggle=\"counter-up\">620</span>\r\n                      <p>Engeignants</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-3 col-md-5 col-6 d-md-flex align-items-md-stretch\">\r\n                    <div className=\"count-box pb-5 pt-0 pt-lg-5\">\r\n                      <i className=\"icony icofont-group\"> <GroupIcon /></i>\r\n\r\n                      <span data-toggle=\"counter-up\">63458</span>\r\n                      <p>Etudiants</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\" >\r\n\r\n              <div className=\"col-lg-6 video-box align-self-baseline\">\r\n                <img src={imgvideo} className=\"img-fluid\" alt=\"\" />\r\n                <a href=\"https://www.youtube.com/watch?v=6YQwLMsjoFU&ab_channel=HassanBERRAGRAGUI\" className=\"venobox play-btn mb-4\" data-vbtype=\"video\" data-autoplay=\"true\"></a>\r\n              </div>\r\n\r\n              <div className=\"col-lg-6 pt-3 pt-lg-0 content\"> \r\n                <div className=\"section-title\">\r\n                  <h2>Présentation</h2>\r\n                </div>\r\n                <p>La première édition du Forum Virtuel à l’Université Ibn Tofail,et la 7 ieme édition du Forum ENSAK-ENTREPRISES est l’occasion de rapprocher le monde académique au monde professionnel, ainsi contribuer à renforcer le rôle de l’université dans son environnement.</p>\r\n                <p>Cette organisation en mode virtuel, est un témoignage de l’adoption de l’université des moyens digital pour à la fois faciliter aux entreprises et l’étudiant cette rencontre, qui pourrait être une préparation aux versions présentielles organisées par les\r\n                  différents établissements de l’Université Ibn Tofail.</p>\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n        </section>\r\n        <section id=\"our-values\" className=\"our-values\">\r\n          <div className=\"container\">\r\n            <div className=\"section-title\">\r\n              <h2>Espaces </h2>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6 d-flex align-items-stretch\">\r\n                <div className=\"card\" >\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title\"><a href=\"\">E-Entreprise</a></h5>\r\n                    <p className=\"card-text\">Vous étes un responsable RH dans une entreprise et vous cherchez à recruter un étudiant à l'université Ibn Tofail. La plateforme FORUM ENSAK est votre opportunité à trouver votre cible.</p>\r\n                    <Link\r\n                      href=\"#\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        history.push(\"/login\");\r\n                      }}\r\n                      \r\n                      className=\"cta-btn\"\r\n                    >\r\n                      Se connecter\r\n                    </Link><br/>\r\n                    <Link\r\n                      href=\"#\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        history.push(\"/register\");\r\n                      }}\r\n                      \r\n                      className=\"cta-btn2\"\r\n                    >\r\n                      S'inscrire\r\n                    </Link>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-6 d-flex align-items-stretch mt-4 mt-md-0\">\r\n                <div className=\"card1\"  >\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title\"><a href=\"\">E-Etudiant</a></h5>\r\n                    <p className=\"card-text\">Vous étes étudiant à l'université Ibn Tofail .La plateforme FORUM ENSAK est votre opportunité à décrocher un stage .</p>\r\n                    <Link\r\n                      href=\"#\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        history.push(\"/login\");\r\n                      }}\r\n                      \r\n                      className=\"cta-btn\"\r\n                    >\r\n                      Se connecter\r\n                    </Link><br/>\r\n                    <Link\r\n                      href=\"#\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        history.push(\"/register\");\r\n                      }}\r\n                      \r\n                      className=\"cta-btn2\"\r\n                    >\r\n                      S'inscrire\r\n                    </Link>\r\n                    \r\n                   \r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <section id=\"clients\" className=\"wow fadeInUp\" >\r\n          <div className=\"container\" id=\"partenairess\">\r\n            <div className=\"section-header\">\r\n              <h2>Partenaires professionnels</h2>\r\n            </div>\r\n\r\n            <Slider {...settings}>\r\n            <div className=\"slide\">\r\n                <img className=\"stand\" src={img1} alt=\"\" />\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img1} alt=\"\" />\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img1} alt=\"\" />\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={img1} alt=\"\" />\r\n              </div>\r\n              \r\n\r\n            </Slider>\r\n\r\n          </div>\r\n        </section>\r\n        <section id=\"clients\" className=\"wow fadeInUp\">\r\n          <div className=\"container\">\r\n            <div className=\"section-header\">\r\n              <h2>Partenaires académiques</h2>\r\n            </div>\r\n\r\n            <Slider {...settings}>\r\n            <div className=\"slide\">\r\n                <img className=\"stand\" src={imgpa0} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgpa1} alt=\"\" />\r\n\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgpa2} alt=\"\" />\r\n\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgpa3} alt=\"\" />\r\n\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgpa4} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgpa5} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgpa6} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgpa7} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgpa8} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgpa9} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgpa10} alt=\"\" />\r\n\r\n              </div>\r\n\r\n            </Slider>\r\n\r\n          </div>\r\n        </section>\r\n\r\n\r\n        <section id=\"clients\" className=\"wow fadeInUp\">\r\n          <div className=\"container\">\r\n            <div className=\"section-header\">\r\n              <h2>Clubs</h2>\r\n            </div>\r\n\r\n            <Slider {...settings}>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgc1} alt=\"\" />\r\n\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgc2} alt=\"\" />\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgc3} alt=\"\" />\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgc4} alt=\"\" />\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgc5} alt=\"\" />\r\n              </div><div className=\"slide\">\r\n                <img className=\"stand\" src={imgc4} alt=\"\" />\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgc5} alt=\"\" />\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgc5} alt=\"\" />\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgc5} alt=\"\" />\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgc5} alt=\"\" />\r\n              </div>\r\n              <div className=\"slide\">\r\n                <img className=\"stand\" src={imgc5} alt=\"\" />\r\n              </div>\r\n              \r\n\r\n            </Slider>\r\n            \r\n\r\n          </div>\r\n        </section>\r\n        <div className=\"parallax\">\r\n          <div className=\"parallax_box\">\r\n            <div\r\n              className=\"parallax_timer\"\r\n              data-aos=\"fade-up\"\r\n              data-aos-duration=\"1000\"\r\n            >\r\n              <p className=\"number\">{timerDays}</p>\r\n              <p className=\"text\">jours</p>\r\n            </div>\r\n            <div\r\n              className=\"parallax_timer\"\r\n              data-aos=\"fade-up\"\r\n              data-aos-duration=\"1300\"\r\n            >\r\n              <p className=\"number\">{timerHours}</p>\r\n              <p className=\"text\">heures</p>\r\n            </div>\r\n            <div\r\n              className=\"parallax_timer\"\r\n              data-aos=\"fade-up\"\r\n              data-aos-duration=\"1600\"\r\n            >\r\n              <p className=\"number\">{timerMinutes}</p>\r\n              <p className=\"text\">minutes</p>\r\n            </div>\r\n            <div\r\n              className=\"parallax_timer\"\r\n              data-aos=\"fade-up\"\r\n              data-aos-duration=\"1900\"\r\n            >\r\n              <p className=\"number\">{timerSeconds}</p>\r\n              <p className=\"text\">secondes</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n\r\n      </div>\r\n\r\n\r\n    </>\r\n  );\r\n}","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Presentation\\NavbarElements.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Search\\Search.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Search\\SearchMenu\\SearchMenu.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\HeaderOption\\HeaderOption.jsx",["652"],"import { Avatar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./HeaderOption.css\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  large: {\r\n    width: theme.spacing(7),\r\n    height: theme.spacing(7),\r\n  },\r\n}));\r\nconst StyledBadge = withStyles((theme) => ({\r\n  badge: {\r\n    right: -3,\r\n    top: 13,\r\n  },\r\n}))(Badge);\r\n\r\nfunction HeaderOption({\r\n  image,\r\n  Icon,\r\n  title,\r\n  isMobile,\r\n  titleIcon,\r\n  children,\r\n  badge,\r\n  onClick,\r\n}) {\r\n  const [open, setOpen] = useState(false);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      {!titleIcon && (\r\n        <NavLink\r\n          exact\r\n          to={\"/\" + title}\r\n          className=\"headerOption\"\r\n          onClick={onClick}\r\n          activeClassName=\"active\"\r\n        >\r\n          <StyledBadge badgeContent={badge} color=\"secondary\">\r\n            {Icon && (\r\n              <Icon\r\n                className={\r\n                  isMobile ? \"headerOption_icon2\" : \"headerOption_icon\"\r\n                }\r\n              />\r\n            )}\r\n          </StyledBadge>\r\n          {!Icon && <Avatar className=\"headerOption_icon\" src={image} />}\r\n          {!isMobile && (\r\n            <h5\r\n              onClick={() => {\r\n                setOpen(!open);\r\n              }}\r\n              className=\"headerOption_title\"\r\n            >\r\n              {title}\r\n              {titleIcon}\r\n            </h5>\r\n          )}\r\n          {open && children}\r\n        </NavLink>\r\n      )}\r\n      {titleIcon && (\r\n        <div className=\"headerOption\">\r\n          {Icon && <Icon className=\"headerOption_icon\" />}\r\n          {/* {!Icon && <img src={`data:image/png;base64,${image}`} alt=\"\" />} */}\r\n          {!Icon && (\r\n            <Avatar\r\n              className={\"headerOption_icon \" + classes.large}\r\n              src={image}\r\n            />\r\n          )}\r\n          <h5\r\n            onClick={() => {\r\n              setOpen(!open);\r\n            }}\r\n            className=\"headerOption_title\"\r\n          >\r\n            {title}\r\n            {titleIcon}\r\n          </h5>\r\n          {open && children}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HeaderOption;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\HeaderOption\\DropdowMenu\\DropdownMenu.jsx",[],"C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Header\\Search\\SearchMenu\\ProfileInfo\\ProfileInfo.jsx",["653"],"import React from \"react\";\r\nimport \"./ProfileInfo.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction ProfileInfo({ id, name, company, role, image }) {\r\n  const history = useHistory();\r\n  const handleClick = () => {\r\n    history.push(\"/view/\" + id);\r\n    window.location.reload();\r\n  };\r\n  function capitalizeTheFirstLetterOfEachWord(words) {\r\n    var separateWord = words?.toLowerCase().split(\" \");\r\n    for (var i = 0; i < separateWord?.length; i++) {\r\n      separateWord[i] =\r\n        separateWord[i]?.charAt(0).toUpperCase() +\r\n        separateWord[i]?.substring(1);\r\n    }\r\n    return separateWord?.join(\" \");\r\n  }\r\n\r\n  return (\r\n    <div className=\"profile_info\" onClick={handleClick}>\r\n      {role == 1 ? (\r\n        <Avatar className=\"image\" src={image} />\r\n      ) : (\r\n        <Avatar className=\"image square\" src={image} />\r\n      )}\r\n\r\n      {role === 1 && (\r\n        <h5>\r\n          {capitalizeTheFirstLetterOfEachWord(name)} - <span>Etudiant</span>\r\n        </h5>\r\n      )}\r\n      {role === 3 && (\r\n        <h5>\r\n          {capitalizeTheFirstLetterOfEachWord(company)} -{\" \"}\r\n          <span>Entreprise</span>\r\n        </h5>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileInfo;\r\n","C:\\Users\\aymane\\Desktop\\gitting\\forum-last\\src\\Components\\Dashboard\\ReportedUsers.jsx",["654","655","656","657"],{"ruleId":"658","replacedBy":"659"},{"ruleId":"660","replacedBy":"661"},{"ruleId":"662","severity":1,"message":"663","line":2,"column":25,"nodeType":"664","messageId":"665","endLine":2,"endColumn":33},{"ruleId":"662","severity":1,"message":"666","line":18,"column":8,"nodeType":"664","messageId":"665","endLine":18,"endColumn":18},{"ruleId":"667","severity":1,"message":"668","line":98,"column":57,"nodeType":"669","messageId":"670","endLine":98,"endColumn":59},{"ruleId":"667","severity":1,"message":"668","line":99,"column":60,"nodeType":"669","messageId":"670","endLine":99,"endColumn":62},{"ruleId":"671","severity":1,"message":"672","line":23,"column":6,"nodeType":"673","endLine":23,"endColumn":8,"suggestions":"674"},{"ruleId":"662","severity":1,"message":"675","line":18,"column":17,"nodeType":"664","messageId":"665","endLine":18,"endColumn":25},{"ruleId":"667","severity":1,"message":"668","line":36,"column":27,"nodeType":"669","messageId":"670","endLine":36,"endColumn":29},{"ruleId":"667","severity":1,"message":"676","line":51,"column":27,"nodeType":"669","messageId":"670","endLine":51,"endColumn":29},{"ruleId":"662","severity":1,"message":"677","line":2,"column":8,"nodeType":"664","messageId":"665","endLine":2,"endColumn":14},{"ruleId":"662","severity":1,"message":"678","line":11,"column":8,"nodeType":"664","messageId":"665","endLine":11,"endColumn":24},{"ruleId":"662","severity":1,"message":"679","line":1,"column":17,"nodeType":"664","messageId":"665","endLine":1,"endColumn":26},{"ruleId":"662","severity":1,"message":"680","line":8,"column":11,"nodeType":"664","messageId":"665","endLine":8,"endColumn":18},{"ruleId":"662","severity":1,"message":"677","line":2,"column":8,"nodeType":"664","messageId":"665","endLine":2,"endColumn":14},{"ruleId":"662","severity":1,"message":"678","line":11,"column":8,"nodeType":"664","messageId":"665","endLine":11,"endColumn":24},{"ruleId":"671","severity":1,"message":"681","line":105,"column":6,"nodeType":"673","endLine":105,"endColumn":8,"suggestions":"682"},{"ruleId":"667","severity":1,"message":"668","line":155,"column":22,"nodeType":"669","messageId":"670","endLine":155,"endColumn":24},{"ruleId":"667","severity":1,"message":"668","line":188,"column":22,"nodeType":"669","messageId":"670","endLine":188,"endColumn":24},{"ruleId":"662","severity":1,"message":"683","line":36,"column":9,"nodeType":"664","messageId":"665","endLine":36,"endColumn":21},{"ruleId":"662","severity":1,"message":"679","line":1,"column":27,"nodeType":"664","messageId":"665","endLine":1,"endColumn":36},{"ruleId":"662","severity":1,"message":"684","line":130,"column":20,"nodeType":"664","messageId":"665","endLine":130,"endColumn":31},{"ruleId":"662","severity":1,"message":"685","line":146,"column":9,"nodeType":"664","messageId":"665","endLine":146,"endColumn":25},{"ruleId":"667","severity":1,"message":"668","line":31,"column":90,"nodeType":"669","messageId":"670","endLine":31,"endColumn":92},{"ruleId":"671","severity":1,"message":"686","line":45,"column":8,"nodeType":"673","endLine":45,"endColumn":10,"suggestions":"687"},{"ruleId":"662","severity":1,"message":"688","line":14,"column":3,"nodeType":"664","messageId":"665","endLine":14,"endColumn":9},{"ruleId":"667","severity":1,"message":"668","line":24,"column":37,"nodeType":"669","messageId":"670","endLine":24,"endColumn":39},{"ruleId":"662","severity":1,"message":"689","line":93,"column":13,"nodeType":"664","messageId":"665","endLine":93,"endColumn":17},{"ruleId":"667","severity":1,"message":"668","line":144,"column":40,"nodeType":"669","messageId":"670","endLine":144,"endColumn":42},{"ruleId":"667","severity":1,"message":"668","line":153,"column":38,"nodeType":"669","messageId":"670","endLine":153,"endColumn":40},{"ruleId":"667","severity":1,"message":"676","line":166,"column":23,"nodeType":"669","messageId":"670","endLine":166,"endColumn":25},{"ruleId":"667","severity":1,"message":"668","line":167,"column":25,"nodeType":"669","messageId":"670","endLine":167,"endColumn":27},{"ruleId":"667","severity":1,"message":"668","line":168,"column":13,"nodeType":"669","messageId":"670","endLine":168,"endColumn":15},{"ruleId":"667","severity":1,"message":"676","line":174,"column":23,"nodeType":"669","messageId":"670","endLine":174,"endColumn":25},{"ruleId":"671","severity":1,"message":"690","line":180,"column":6,"nodeType":"673","endLine":180,"endColumn":43,"suggestions":"691"},{"ruleId":"667","severity":1,"message":"668","line":420,"column":34,"nodeType":"669","messageId":"670","endLine":420,"endColumn":36},{"ruleId":"667","severity":1,"message":"676","line":519,"column":32,"nodeType":"669","messageId":"670","endLine":519,"endColumn":34},{"ruleId":"667","severity":1,"message":"668","line":521,"column":33,"nodeType":"669","messageId":"670","endLine":521,"endColumn":35},{"ruleId":"667","severity":1,"message":"676","line":522,"column":26,"nodeType":"669","messageId":"670","endLine":522,"endColumn":28},{"ruleId":"667","severity":1,"message":"668","line":559,"column":30,"nodeType":"669","messageId":"670","endLine":559,"endColumn":32},{"ruleId":"662","severity":1,"message":"692","line":13,"column":8,"nodeType":"664","messageId":"665","endLine":13,"endColumn":15},{"ruleId":"662","severity":1,"message":"693","line":19,"column":10,"nodeType":"664","messageId":"665","endLine":19,"endColumn":15},{"ruleId":"662","severity":1,"message":"694","line":88,"column":10,"nodeType":"664","messageId":"665","endLine":88,"endColumn":17},{"ruleId":"662","severity":1,"message":"695","line":89,"column":10,"nodeType":"664","messageId":"665","endLine":89,"endColumn":20},{"ruleId":"671","severity":1,"message":"696","line":176,"column":6,"nodeType":"673","endLine":176,"endColumn":8,"suggestions":"697"},{"ruleId":"662","severity":1,"message":"698","line":185,"column":10,"nodeType":"664","messageId":"665","endLine":185,"endColumn":14},{"ruleId":"662","severity":1,"message":"699","line":187,"column":9,"nodeType":"664","messageId":"665","endLine":187,"endColumn":19},{"ruleId":"662","severity":1,"message":"700","line":190,"column":9,"nodeType":"664","messageId":"665","endLine":190,"endColumn":20},{"ruleId":"667","severity":1,"message":"668","line":208,"column":30,"nodeType":"669","messageId":"670","endLine":208,"endColumn":32},{"ruleId":"671","severity":1,"message":"701","line":225,"column":6,"nodeType":"673","endLine":225,"endColumn":15,"suggestions":"702"},{"ruleId":"671","severity":1,"message":"703","line":234,"column":6,"nodeType":"673","endLine":234,"endColumn":46,"suggestions":"704"},{"ruleId":"667","severity":1,"message":"676","line":310,"column":31,"nodeType":"669","messageId":"670","endLine":310,"endColumn":33},{"ruleId":"667","severity":1,"message":"676","line":463,"column":49,"nodeType":"669","messageId":"670","endLine":463,"endColumn":51},{"ruleId":"658","replacedBy":"705"},{"ruleId":"660","replacedBy":"706"},{"ruleId":"662","severity":1,"message":"707","line":2,"column":8,"nodeType":"664","messageId":"665","endLine":2,"endColumn":12},{"ruleId":"662","severity":1,"message":"708","line":10,"column":8,"nodeType":"664","messageId":"665","endLine":10,"endColumn":13},{"ruleId":"662","severity":1,"message":"709","line":15,"column":7,"nodeType":"664","messageId":"665","endLine":15,"endColumn":16},{"ruleId":"662","severity":1,"message":"710","line":18,"column":8,"nodeType":"664","messageId":"665","endLine":18,"endColumn":17},{"ruleId":"662","severity":1,"message":"711","line":36,"column":10,"nodeType":"664","messageId":"665","endLine":36,"endColumn":24},{"ruleId":"662","severity":1,"message":"712","line":105,"column":17,"nodeType":"664","messageId":"665","endLine":105,"endColumn":25},{"ruleId":"667","severity":1,"message":"676","line":238,"column":36,"nodeType":"669","messageId":"670","endLine":238,"endColumn":38},{"ruleId":"662","severity":1,"message":"713","line":1,"column":18,"nodeType":"664","messageId":"665","endLine":1,"endColumn":24},{"ruleId":"662","severity":1,"message":"708","line":13,"column":8,"nodeType":"664","messageId":"665","endLine":13,"endColumn":13},{"ruleId":"662","severity":1,"message":"666","line":16,"column":8,"nodeType":"664","messageId":"665","endLine":16,"endColumn":18},{"ruleId":"662","severity":1,"message":"693","line":35,"column":10,"nodeType":"664","messageId":"665","endLine":35,"endColumn":15},{"ruleId":"662","severity":1,"message":"714","line":77,"column":10,"nodeType":"664","messageId":"665","endLine":77,"endColumn":19},{"ruleId":"662","severity":1,"message":"715","line":89,"column":10,"nodeType":"664","messageId":"665","endLine":89,"endColumn":15},{"ruleId":"667","severity":1,"message":"668","line":122,"column":22,"nodeType":"669","messageId":"670","endLine":122,"endColumn":24},{"ruleId":"671","severity":1,"message":"716","line":160,"column":6,"nodeType":"673","endLine":160,"endColumn":22,"suggestions":"717"},{"ruleId":"667","severity":1,"message":"668","line":418,"column":26,"nodeType":"669","messageId":"670","endLine":418,"endColumn":28},{"ruleId":"718","severity":1,"message":"719","line":453,"column":17,"nodeType":"720","messageId":"721","endLine":453,"endColumn":56},{"ruleId":"662","severity":1,"message":"707","line":2,"column":8,"nodeType":"664","messageId":"665","endLine":2,"endColumn":12},{"ruleId":"662","severity":1,"message":"708","line":10,"column":8,"nodeType":"664","messageId":"665","endLine":10,"endColumn":13},{"ruleId":"662","severity":1,"message":"666","line":11,"column":8,"nodeType":"664","messageId":"665","endLine":11,"endColumn":18},{"ruleId":"662","severity":1,"message":"722","line":14,"column":10,"nodeType":"664","messageId":"665","endLine":14,"endColumn":15},{"ruleId":"662","severity":1,"message":"711","line":19,"column":10,"nodeType":"664","messageId":"665","endLine":19,"endColumn":24},{"ruleId":"662","severity":1,"message":"723","line":30,"column":9,"nodeType":"664","messageId":"665","endLine":30,"endColumn":16},{"ruleId":"667","severity":1,"message":"676","line":78,"column":27,"nodeType":"669","messageId":"670","endLine":78,"endColumn":29},{"ruleId":"662","severity":1,"message":"677","line":1,"column":10,"nodeType":"664","messageId":"665","endLine":1,"endColumn":16},{"ruleId":"662","severity":1,"message":"724","line":10,"column":10,"nodeType":"664","messageId":"665","endLine":10,"endColumn":44},{"ruleId":"667","severity":1,"message":"668","line":23,"column":55,"nodeType":"669","messageId":"670","endLine":23,"endColumn":57},{"ruleId":"667","severity":1,"message":"668","line":33,"column":34,"nodeType":"669","messageId":"670","endLine":33,"endColumn":36},{"ruleId":"667","severity":1,"message":"668","line":38,"column":47,"nodeType":"669","messageId":"670","endLine":38,"endColumn":49},{"ruleId":"671","severity":1,"message":"725","line":51,"column":6,"nodeType":"673","endLine":51,"endColumn":8,"suggestions":"726"},{"ruleId":"667","severity":1,"message":"676","line":64,"column":24,"nodeType":"669","messageId":"670","endLine":64,"endColumn":26},{"ruleId":"667","severity":1,"message":"668","line":94,"column":27,"nodeType":"669","messageId":"670","endLine":94,"endColumn":29},{"ruleId":"667","severity":1,"message":"676","line":94,"column":64,"nodeType":"669","messageId":"670","endLine":94,"endColumn":66},{"ruleId":"667","severity":1,"message":"668","line":101,"column":57,"nodeType":"669","messageId":"670","endLine":101,"endColumn":59},{"ruleId":"667","severity":1,"message":"676","line":106,"column":26,"nodeType":"669","messageId":"670","endLine":106,"endColumn":28},{"ruleId":"667","severity":1,"message":"668","line":137,"column":27,"nodeType":"669","messageId":"670","endLine":137,"endColumn":29},{"ruleId":"667","severity":1,"message":"676","line":137,"column":63,"nodeType":"669","messageId":"670","endLine":137,"endColumn":65},{"ruleId":"667","severity":1,"message":"668","line":145,"column":45,"nodeType":"669","messageId":"670","endLine":145,"endColumn":47},{"ruleId":"667","severity":1,"message":"676","line":150,"column":26,"nodeType":"669","messageId":"670","endLine":150,"endColumn":28},{"ruleId":"667","severity":1,"message":"676","line":186,"column":24,"nodeType":"669","messageId":"670","endLine":186,"endColumn":26},{"ruleId":"662","severity":1,"message":"727","line":13,"column":8,"nodeType":"664","messageId":"665","endLine":13,"endColumn":21},{"ruleId":"662","severity":1,"message":"689","line":30,"column":19,"nodeType":"664","messageId":"665","endLine":30,"endColumn":23},{"ruleId":"667","severity":1,"message":"668","line":39,"column":19,"nodeType":"669","messageId":"670","endLine":39,"endColumn":21},{"ruleId":"662","severity":1,"message":"689","line":52,"column":19,"nodeType":"664","messageId":"665","endLine":52,"endColumn":23},{"ruleId":"662","severity":1,"message":"689","line":64,"column":19,"nodeType":"664","messageId":"665","endLine":64,"endColumn":23},{"ruleId":"671","severity":1,"message":"728","line":15,"column":8,"nodeType":"673","endLine":15,"endColumn":18,"suggestions":"729"},{"ruleId":"667","severity":1,"message":"668","line":18,"column":77,"nodeType":"669","messageId":"670","endLine":18,"endColumn":79},{"ruleId":"662","severity":1,"message":"730","line":26,"column":12,"nodeType":"664","messageId":"665","endLine":26,"endColumn":20},{"ruleId":"671","severity":1,"message":"731","line":64,"column":8,"nodeType":"673","endLine":64,"endColumn":36,"suggestions":"732"},{"ruleId":"662","severity":1,"message":"733","line":96,"column":11,"nodeType":"664","messageId":"665","endLine":96,"endColumn":32},{"ruleId":"667","severity":1,"message":"676","line":200,"column":35,"nodeType":"669","messageId":"670","endLine":200,"endColumn":37},{"ruleId":"667","severity":1,"message":"668","line":201,"column":53,"nodeType":"669","messageId":"670","endLine":201,"endColumn":55},{"ruleId":"734","severity":1,"message":"735","line":21,"column":19,"nodeType":"736","endLine":21,"endColumn":30},{"ruleId":"734","severity":1,"message":"735","line":24,"column":19,"nodeType":"736","endLine":24,"endColumn":30},{"ruleId":"734","severity":1,"message":"735","line":46,"column":21,"nodeType":"736","endLine":46,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":47,"column":21,"nodeType":"736","endLine":47,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":48,"column":21,"nodeType":"736","endLine":48,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":49,"column":21,"nodeType":"736","endLine":49,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":50,"column":21,"nodeType":"736","endLine":50,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":58,"column":15,"nodeType":"736","endLine":58,"endColumn":26},{"ruleId":"734","severity":1,"message":"735","line":59,"column":15,"nodeType":"736","endLine":59,"endColumn":26},{"ruleId":"734","severity":1,"message":"735","line":65,"column":27,"nodeType":"736","endLine":65,"endColumn":39},{"ruleId":"667","severity":1,"message":"668","line":42,"column":18,"nodeType":"669","messageId":"670","endLine":42,"endColumn":20},{"ruleId":"667","severity":1,"message":"668","line":47,"column":24,"nodeType":"669","messageId":"670","endLine":47,"endColumn":26},{"ruleId":"667","severity":1,"message":"668","line":52,"column":22,"nodeType":"669","messageId":"670","endLine":52,"endColumn":24},{"ruleId":"667","severity":1,"message":"668","line":57,"column":26,"nodeType":"669","messageId":"670","endLine":57,"endColumn":28},{"ruleId":"662","severity":1,"message":"708","line":9,"column":8,"nodeType":"664","messageId":"665","endLine":9,"endColumn":13},{"ruleId":"662","severity":1,"message":"708","line":11,"column":8,"nodeType":"664","messageId":"665","endLine":11,"endColumn":13},{"ruleId":"662","severity":1,"message":"666","line":12,"column":8,"nodeType":"664","messageId":"665","endLine":12,"endColumn":18},{"ruleId":"662","severity":1,"message":"666","line":12,"column":8,"nodeType":"664","messageId":"665","endLine":12,"endColumn":18},{"ruleId":"662","severity":1,"message":"708","line":13,"column":8,"nodeType":"664","messageId":"665","endLine":13,"endColumn":13},{"ruleId":"662","severity":1,"message":"666","line":12,"column":8,"nodeType":"664","messageId":"665","endLine":12,"endColumn":18},{"ruleId":"662","severity":1,"message":"708","line":13,"column":8,"nodeType":"664","messageId":"665","endLine":13,"endColumn":13},{"ruleId":"662","severity":1,"message":"666","line":12,"column":8,"nodeType":"664","messageId":"665","endLine":12,"endColumn":18},{"ruleId":"662","severity":1,"message":"708","line":13,"column":8,"nodeType":"664","messageId":"665","endLine":13,"endColumn":13},{"ruleId":"662","severity":1,"message":"708","line":16,"column":8,"nodeType":"664","messageId":"665","endLine":16,"endColumn":13},{"ruleId":"662","severity":1,"message":"666","line":17,"column":8,"nodeType":"664","messageId":"665","endLine":17,"endColumn":18},{"ruleId":"662","severity":1,"message":"708","line":16,"column":8,"nodeType":"664","messageId":"665","endLine":16,"endColumn":13},{"ruleId":"662","severity":1,"message":"666","line":17,"column":8,"nodeType":"664","messageId":"665","endLine":17,"endColumn":18},{"ruleId":"662","severity":1,"message":"695","line":46,"column":10,"nodeType":"664","messageId":"665","endLine":46,"endColumn":20},{"ruleId":"662","severity":1,"message":"694","line":47,"column":10,"nodeType":"664","messageId":"665","endLine":47,"endColumn":17},{"ruleId":"662","severity":1,"message":"707","line":10,"column":10,"nodeType":"664","messageId":"665","endLine":10,"endColumn":14},{"ruleId":"667","severity":1,"message":"668","line":20,"column":14,"nodeType":"669","messageId":"670","endLine":20,"endColumn":16},{"ruleId":"667","severity":1,"message":"668","line":32,"column":14,"nodeType":"669","messageId":"670","endLine":32,"endColumn":16},{"ruleId":"667","severity":1,"message":"668","line":44,"column":14,"nodeType":"669","messageId":"670","endLine":44,"endColumn":16},{"ruleId":"667","severity":1,"message":"668","line":56,"column":14,"nodeType":"669","messageId":"670","endLine":56,"endColumn":16},{"ruleId":"671","severity":1,"message":"737","line":96,"column":6,"nodeType":"673","endLine":96,"endColumn":18,"suggestions":"738"},{"ruleId":"662","severity":1,"message":"739","line":71,"column":10,"nodeType":"664","messageId":"665","endLine":71,"endColumn":20},{"ruleId":"662","severity":1,"message":"708","line":18,"column":8,"nodeType":"664","messageId":"665","endLine":18,"endColumn":13},{"ruleId":"662","severity":1,"message":"666","line":19,"column":8,"nodeType":"664","messageId":"665","endLine":19,"endColumn":18},{"ruleId":"667","severity":1,"message":"676","line":91,"column":30,"nodeType":"669","messageId":"670","endLine":91,"endColumn":32},{"ruleId":"671","severity":1,"message":"737","line":97,"column":6,"nodeType":"673","endLine":97,"endColumn":18,"suggestions":"740"},{"ruleId":"662","severity":1,"message":"708","line":11,"column":8,"nodeType":"664","messageId":"665","endLine":11,"endColumn":13},{"ruleId":"662","severity":1,"message":"666","line":12,"column":8,"nodeType":"664","messageId":"665","endLine":12,"endColumn":18},{"ruleId":"671","severity":1,"message":"737","line":75,"column":6,"nodeType":"673","endLine":75,"endColumn":18,"suggestions":"741"},{"ruleId":"662","severity":1,"message":"708","line":10,"column":8,"nodeType":"664","messageId":"665","endLine":10,"endColumn":13},{"ruleId":"662","severity":1,"message":"666","line":11,"column":8,"nodeType":"664","messageId":"665","endLine":11,"endColumn":18},{"ruleId":"667","severity":1,"message":"668","line":21,"column":14,"nodeType":"669","messageId":"670","endLine":21,"endColumn":16},{"ruleId":"667","severity":1,"message":"668","line":33,"column":14,"nodeType":"669","messageId":"670","endLine":33,"endColumn":16},{"ruleId":"667","severity":1,"message":"668","line":45,"column":14,"nodeType":"669","messageId":"670","endLine":45,"endColumn":16},{"ruleId":"667","severity":1,"message":"668","line":57,"column":14,"nodeType":"669","messageId":"670","endLine":57,"endColumn":16},{"ruleId":"662","severity":1,"message":"666","line":13,"column":8,"nodeType":"664","messageId":"665","endLine":13,"endColumn":18},{"ruleId":"662","severity":1,"message":"708","line":14,"column":8,"nodeType":"664","messageId":"665","endLine":14,"endColumn":13},{"ruleId":"667","severity":1,"message":"668","line":115,"column":17,"nodeType":"669","messageId":"670","endLine":115,"endColumn":19},{"ruleId":"662","severity":1,"message":"666","line":12,"column":8,"nodeType":"664","messageId":"665","endLine":12,"endColumn":18},{"ruleId":"662","severity":1,"message":"708","line":13,"column":8,"nodeType":"664","messageId":"665","endLine":13,"endColumn":13},{"ruleId":"667","severity":1,"message":"668","line":132,"column":17,"nodeType":"669","messageId":"670","endLine":132,"endColumn":19},{"ruleId":"667","severity":1,"message":"668","line":232,"column":30,"nodeType":"669","messageId":"670","endLine":232,"endColumn":32},{"ruleId":"662","severity":1,"message":"666","line":12,"column":8,"nodeType":"664","messageId":"665","endLine":12,"endColumn":18},{"ruleId":"662","severity":1,"message":"708","line":13,"column":8,"nodeType":"664","messageId":"665","endLine":13,"endColumn":13},{"ruleId":"667","severity":1,"message":"668","line":120,"column":17,"nodeType":"669","messageId":"670","endLine":120,"endColumn":19},{"ruleId":"662","severity":1,"message":"742","line":6,"column":8,"nodeType":"664","messageId":"665","endLine":6,"endColumn":18},{"ruleId":"662","severity":1,"message":"743","line":7,"column":8,"nodeType":"664","messageId":"665","endLine":7,"endColumn":19},{"ruleId":"667","severity":1,"message":"668","line":22,"column":14,"nodeType":"669","messageId":"670","endLine":22,"endColumn":16},{"ruleId":"667","severity":1,"message":"668","line":34,"column":14,"nodeType":"669","messageId":"670","endLine":34,"endColumn":16},{"ruleId":"667","severity":1,"message":"668","line":46,"column":14,"nodeType":"669","messageId":"670","endLine":46,"endColumn":16},{"ruleId":"662","severity":1,"message":"680","line":7,"column":9,"nodeType":"664","messageId":"665","endLine":7,"endColumn":16},{"ruleId":"667","severity":1,"message":"668","line":22,"column":13,"nodeType":"669","messageId":"670","endLine":22,"endColumn":15},{"ruleId":"662","severity":1,"message":"679","line":1,"column":17,"nodeType":"664","messageId":"665","endLine":1,"endColumn":26},{"ruleId":"662","severity":1,"message":"744","line":1,"column":38,"nodeType":"664","messageId":"665","endLine":1,"endColumn":50},{"ruleId":"662","severity":1,"message":"708","line":11,"column":8,"nodeType":"664","messageId":"665","endLine":11,"endColumn":13},{"ruleId":"662","severity":1,"message":"745","line":19,"column":8,"nodeType":"664","messageId":"665","endLine":19,"endColumn":19},{"ruleId":"662","severity":1,"message":"746","line":75,"column":10,"nodeType":"664","messageId":"665","endLine":75,"endColumn":15},{"ruleId":"667","severity":1,"message":"668","line":233,"column":22,"nodeType":"669","messageId":"670","endLine":233,"endColumn":24},{"ruleId":"671","severity":1,"message":"747","line":240,"column":6,"nodeType":"673","endLine":240,"endColumn":8,"suggestions":"748"},{"ruleId":"671","severity":1,"message":"749","line":254,"column":6,"nodeType":"673","endLine":254,"endColumn":8,"suggestions":"750"},{"ruleId":"667","severity":1,"message":"676","line":302,"column":33,"nodeType":"669","messageId":"670","endLine":302,"endColumn":35},{"ruleId":"667","severity":1,"message":"668","line":331,"column":63,"nodeType":"669","messageId":"670","endLine":331,"endColumn":65},{"ruleId":"667","severity":1,"message":"668","line":343,"column":33,"nodeType":"669","messageId":"670","endLine":343,"endColumn":35},{"ruleId":"662","severity":1,"message":"751","line":3,"column":52,"nodeType":"664","messageId":"665","endLine":3,"endColumn":58},{"ruleId":"662","severity":1,"message":"708","line":14,"column":8,"nodeType":"664","messageId":"665","endLine":14,"endColumn":13},{"ruleId":"662","severity":1,"message":"715","line":97,"column":10,"nodeType":"664","messageId":"665","endLine":97,"endColumn":15},{"ruleId":"671","severity":1,"message":"752","line":148,"column":6,"nodeType":"673","endLine":148,"endColumn":15,"suggestions":"753"},{"ruleId":"754","severity":1,"message":"755","line":205,"column":11,"nodeType":"736","endLine":209,"endColumn":13},{"ruleId":"667","severity":1,"message":"676","line":415,"column":43,"nodeType":"669","messageId":"670","endLine":415,"endColumn":45},{"ruleId":"667","severity":1,"message":"676","line":424,"column":44,"nodeType":"669","messageId":"670","endLine":424,"endColumn":46},{"ruleId":"667","severity":1,"message":"668","line":452,"column":59,"nodeType":"669","messageId":"670","endLine":452,"endColumn":61},{"ruleId":"667","severity":1,"message":"668","line":464,"column":29,"nodeType":"669","messageId":"670","endLine":464,"endColumn":31},{"ruleId":"667","severity":1,"message":"676","line":483,"column":31,"nodeType":"669","messageId":"670","endLine":483,"endColumn":33},{"ruleId":"718","severity":1,"message":"719","line":547,"column":13,"nodeType":"720","messageId":"721","endLine":547,"endColumn":52},{"ruleId":"662","severity":1,"message":"756","line":1,"column":17,"nodeType":"664","messageId":"665","endLine":1,"endColumn":25},{"ruleId":"662","severity":1,"message":"679","line":1,"column":27,"nodeType":"664","messageId":"665","endLine":1,"endColumn":36},{"ruleId":"662","severity":1,"message":"757","line":2,"column":8,"nodeType":"664","messageId":"665","endLine":2,"endColumn":19},{"ruleId":"667","severity":1,"message":"668","line":12,"column":43,"nodeType":"669","messageId":"670","endLine":12,"endColumn":45},{"ruleId":"667","severity":1,"message":"668","line":29,"column":43,"nodeType":"669","messageId":"670","endLine":29,"endColumn":45},{"ruleId":"667","severity":1,"message":"668","line":46,"column":43,"nodeType":"669","messageId":"670","endLine":46,"endColumn":45},{"ruleId":"667","severity":1,"message":"668","line":63,"column":43,"nodeType":"669","messageId":"670","endLine":63,"endColumn":45},{"ruleId":"667","severity":1,"message":"668","line":28,"column":42,"nodeType":"669","messageId":"670","endLine":28,"endColumn":44},{"ruleId":"667","severity":1,"message":"668","line":51,"column":42,"nodeType":"669","messageId":"670","endLine":51,"endColumn":44},{"ruleId":"662","severity":1,"message":"758","line":2,"column":8,"nodeType":"664","messageId":"665","endLine":2,"endColumn":19},{"ruleId":"662","severity":1,"message":"759","line":5,"column":18,"nodeType":"664","messageId":"665","endLine":5,"endColumn":36},{"ruleId":"667","severity":1,"message":"676","line":18,"column":21,"nodeType":"669","messageId":"670","endLine":18,"endColumn":23},{"ruleId":"667","severity":1,"message":"676","line":33,"column":26,"nodeType":"669","messageId":"670","endLine":33,"endColumn":28},{"ruleId":"667","severity":1,"message":"676","line":48,"column":26,"nodeType":"669","messageId":"670","endLine":48,"endColumn":28},{"ruleId":"667","severity":1,"message":"668","line":22,"column":32,"nodeType":"669","messageId":"670","endLine":22,"endColumn":34},{"ruleId":"667","severity":1,"message":"668","line":10,"column":39,"nodeType":"669","messageId":"670","endLine":10,"endColumn":41},{"ruleId":"667","severity":1,"message":"668","line":27,"column":39,"nodeType":"669","messageId":"670","endLine":27,"endColumn":41},{"ruleId":"667","severity":1,"message":"668","line":44,"column":39,"nodeType":"669","messageId":"670","endLine":44,"endColumn":41},{"ruleId":"734","severity":1,"message":"735","line":35,"column":21,"nodeType":"736","endLine":35,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":36,"column":21,"nodeType":"736","endLine":36,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":37,"column":21,"nodeType":"736","endLine":37,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":38,"column":21,"nodeType":"736","endLine":38,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":52,"column":21,"nodeType":"736","endLine":52,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":53,"column":21,"nodeType":"736","endLine":53,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":54,"column":21,"nodeType":"736","endLine":54,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":55,"column":21,"nodeType":"736","endLine":55,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":71,"column":21,"nodeType":"736","endLine":71,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":72,"column":21,"nodeType":"736","endLine":72,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":73,"column":21,"nodeType":"736","endLine":73,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":74,"column":21,"nodeType":"736","endLine":74,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":88,"column":21,"nodeType":"736","endLine":88,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":89,"column":21,"nodeType":"736","endLine":89,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":90,"column":21,"nodeType":"736","endLine":90,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":91,"column":21,"nodeType":"736","endLine":91,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":105,"column":21,"nodeType":"736","endLine":105,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":106,"column":21,"nodeType":"736","endLine":106,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":107,"column":21,"nodeType":"736","endLine":107,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":108,"column":21,"nodeType":"736","endLine":108,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":121,"column":21,"nodeType":"736","endLine":121,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":122,"column":21,"nodeType":"736","endLine":122,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":123,"column":21,"nodeType":"736","endLine":123,"endColumn":32},{"ruleId":"734","severity":1,"message":"735","line":124,"column":21,"nodeType":"736","endLine":124,"endColumn":32},{"ruleId":"671","severity":1,"message":"760","line":103,"column":30,"nodeType":"664","endLine":103,"endColumn":37},{"ruleId":"761","severity":1,"message":"762","line":121,"column":21,"nodeType":"736","messageId":"763","endLine":121,"endColumn":198,"fix":"764"},{"ruleId":"718","severity":1,"message":"719","line":159,"column":49,"nodeType":"720","messageId":"721","endLine":159,"endColumn":60},{"ruleId":"765","severity":1,"message":"766","line":217,"column":17,"nodeType":"736","endLine":217,"endColumn":175},{"ruleId":"734","severity":1,"message":"735","line":243,"column":48,"nodeType":"736","endLine":243,"endColumn":59},{"ruleId":"734","severity":1,"message":"735","line":273,"column":48,"nodeType":"736","endLine":273,"endColumn":59},{"ruleId":"662","severity":1,"message":"679","line":2,"column":17,"nodeType":"664","messageId":"665","endLine":2,"endColumn":26},{"ruleId":"667","severity":1,"message":"668","line":24,"column":13,"nodeType":"669","messageId":"670","endLine":24,"endColumn":15},{"ruleId":"662","severity":1,"message":"710","line":10,"column":8,"nodeType":"664","messageId":"665","endLine":10,"endColumn":17},{"ruleId":"662","severity":1,"message":"711","line":16,"column":10,"nodeType":"664","messageId":"665","endLine":16,"endColumn":24},{"ruleId":"662","severity":1,"message":"723","line":27,"column":9,"nodeType":"664","messageId":"665","endLine":27,"endColumn":16},{"ruleId":"667","severity":1,"message":"676","line":75,"column":27,"nodeType":"669","messageId":"670","endLine":75,"endColumn":29},"no-native-reassign",["767"],"no-negated-in-lhs",["768"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'authHeader' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'query', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["769"],"'setState' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Avatar' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'useEffect' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.",["770"],"'handleSearch' is assigned a value but never used.","'setAccounts' is assigned a value but never used.","'fixedHeightPaper' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'forceId'. Either include it or remove the dependency array.",["771"],"'Offset' is defined but never used.","'resp' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUserId' and 'id'. Either include them or remove the dependency array.",["772"],"'Shimmer' is defined but never used.","'Alert' is defined but never used.","'message' is assigned a value but never used.","'successful' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'count' and 'loopThroughPosts'. Either include them or remove the dependency array.",["773"],"'open' is assigned a value but never used.","'handleOpen' is assigned a value but never used.","'handleClose' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'res' and 'user?.roles'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPostsToShow' needs the current value of 'res'.",["774"],"React Hook useEffect has a missing dependency: 'loadingSpinner'. Either include it or remove the dependency array.",["775"],["767"],["768"],"'Link' is defined but never used.","'axios' is defined but never used.","'useStyles' is assigned a value but never used.","'CloseIcon' is defined but never used.","'preventDefault' is defined but never used.","'setCount' is assigned a value but never used.","'setRef' is defined but never used.","'userImage' is assigned a value but never used.","'likes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ownerId', 'postId', and 'user?.id'. Either include them or remove the dependency array.",["776"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Close' is defined but never used.","'classes' is assigned a value but never used.","'capitalizeTheFirstLetterOfEachWord' is defined but never used.","React Hook useEffect has missing dependencies: 'user?.company?.aboutCompany?.domaine', 'user?.cv?.about?.domaine', and 'user?.roles'. Either include them or remove the dependency array. If 'setRecommendedCompanies' needs the current value of 'user.cv.about.domaine', you can also switch to useReducer instead of useState and read 'user.cv.about.domaine' in the reducer.",["777"],"'createPalette' is defined but never used.","React Hook useEffect has a missing dependency: 'forceId'. Either include it or remove the dependency array. If 'setActiveId' needs the current value of 'forceId', you can also switch to useReducer instead of useState and read 'forceId' in the reducer.",["778"],"'loading1' is assigned a value but never used.","React Hook useMemo has unnecessary dependencies: 'date', 'id', 'img', 'isNew', and 'name'. Either exclude them or remove the dependency array.",["779"],"'handleMessageReceived' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["780"],"'gottenName' is assigned a value but never used.",["781"],["782"],"'GitHubIcon' is defined but never used.","'YouTubeIcon' is defined but never used.","'initialState' is defined but never used.","'InputOption' is defined but never used.","'image' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'likes' and 'user?.id'. Either include them or remove the dependency array.",["783"],"React Hook useEffect has missing dependencies: 'ownerId' and 'role'. Either include them or remove the dependency array.",["784"],"'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'ownerId', 'postId', 'toggleComment', and 'user?.id'. Either include them or remove the dependency array. You can also do a functional update 'setToggleComment(t => ...)' if you only need 'toggleComment' in the 'setToggleComment' call.",["785"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'useState' is defined but never used.","'userService' is defined but never used.","'ProgressBar' is defined but never used.","'IconContainerProps' is defined but never used.","The ref value 'interval.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'interval.current' to a variable inside the effect, and use that variable in the cleanup function.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"786","text":"787"},"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","no-global-assign","no-unsafe-negation",{"desc":"788","fix":"789"},{"desc":"790","fix":"791"},{"desc":"792","fix":"793"},{"desc":"794","fix":"795"},{"desc":"796","fix":"797"},{"desc":"798","fix":"799"},{"desc":"800","fix":"801"},{"desc":"802","fix":"803"},{"desc":"804","fix":"805"},{"desc":"806","fix":"807"},{"desc":"808","fix":"809"},{"desc":"810","fix":"811"},{"desc":"810","fix":"812"},{"desc":"810","fix":"813"},{"desc":"814","fix":"815"},{"desc":"816","fix":"817"},{"desc":"818","fix":"819"},[4498,4498]," rel=\"noreferrer\"","Update the dependencies array to be: [history, query, user]",{"range":"820","text":"821"},"Update the dependencies array to be: [history, user]",{"range":"822","text":"823"},"Update the dependencies array to be: [forceId]",{"range":"824","text":"825"},"Update the dependencies array to be: [count, currentUserRole, toggle, role, currentUserId, id]",{"range":"826","text":"827"},"Update the dependencies array to be: [count, loopThroughPosts]",{"range":"828","text":"829"},"Update the dependencies array to be: [refresh, res, user?.roles]",{"range":"830","text":"831"},"Update the dependencies array to be: [childLoaderRefresh, loadingSpinner, props.refreshHome]",{"range":"832","text":"833"},"Update the dependencies array to be: [refresh, count, ownerId, postId, user?.id]",{"range":"834","text":"835"},"Update the dependencies array to be: [user?.company?.aboutCompany?.domaine, user?.cv?.about?.domaine, user?.roles]",{"range":"836","text":"837"},"Update the dependencies array to be: [activeId, forceId]",{"range":"838","text":"839"},"Update the dependencies array to be: []",{"range":"840","text":"841"},"Update the dependencies array to be: [props, successful]",{"range":"842","text":"843"},{"range":"844","text":"843"},{"range":"845","text":"843"},"Update the dependencies array to be: [likes, user?.id]",{"range":"846","text":"847"},"Update the dependencies array to be: [ownerId, role]",{"range":"848","text":"849"},"Update the dependencies array to be: [ownerId, postId, refresh, toggleComment, user?.id]",{"range":"850","text":"851"},[729,731],"[history, query, user]",[3629,3631],"[history, user]",[1655,1657],"[forceId]",[6146,6183],"[count, currentUserRole, toggle, role, currentUserId, id]",[4869,4871],"[count, loopThroughPosts]",[6031,6040],"[refresh, res, user?.roles]",[6192,6232],"[childLoaderRefresh, loadingSpinner, props.refreshHome]",[5478,5494],"[refresh, count, ownerId, postId, user?.id]",[1726,1728],"[user?.company?.aboutCompany?.domaine, user?.cv?.about?.domaine, user?.roles]",[626,636],"[activeId, forceId]",[2680,2708],"[]",[3106,3118],"[props, successful]",[3071,3083],[2420,2432],[6539,6541],"[likes, user?.id]",[6990,6992],"[ownerId, role]",[4498,4507],"[ownerId, postId, refresh, toggleComment, user?.id]"]
>>>>>>> 3c5e9d7380ffdb6a024635da93c312574c9829bb
